# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,
0.000000,0,0.000000,package Moose::Meta::Method::Destructor;
0.000000,0,0.000000,BEGIN {
0.000008,1,0.000008,$Moose::Meta::Method::Destructor::AUTHORITY = 'cpan:STEVAN';
0.000041,1,0.000041,}
0.000000,0,0.000000,{
0.000005,2,0.000003,$Moose::Meta::Method::Destructor::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000034,2,0.000017,use strict;
0.000034,2,0.000017,use warnings;
0.000000,0,0.000000,
0.000033,2,0.000017,use Devel::GlobalDestruction ();
0.000037,2,0.000019,use Scalar::Util 'blessed', 'weaken';
0.000040,2,0.000020,use Try::Tiny;
0.000000,0,0.000000,
0.000010,1,0.000010,use base 'Moose::Meta::Method',
0.000523,1,0.000523,'Class::MOP::Method::Inlined';
0.000000,0,0.000000,
0.000000,0,0.000000,sub new {
0.000002,1,0.000002,my $class   = shift;
0.000003,1,0.000003,my %options = @_;
0.000000,0,0.000000,
0.000002,1,0.000002,(ref $options{options} eq 'HASH')
0.000000,0,0.000000,|| $class->throw_error("You must pass a hash of options", data => $options{options});
0.000000,0,0.000000,
0.000002,1,0.000002,($options{package_name} && $options{name})
0.000000,0,0.000000,|| $class->throw_error("You must supply the package_name and name parameters $Class::MOP::Method::UPGRADE_ERROR_TEXT");
0.000000,0,0.000000,
0.000005,1,0.000005,my $self = bless {
0.000000,0,0.000000,# from our superclass
0.000000,0,0.000000,'body'                 => undef,
0.000000,0,0.000000,'package_name'         => $options{package_name},
0.000000,0,0.000000,'name'                 => $options{name},
0.000000,0,0.000000,# ...
0.000000,0,0.000000,'options'              => $options{options},
0.000000,0,0.000000,'definition_context'   => $options{definition_context},
0.000000,0,0.000000,'associated_metaclass' => $options{metaclass},
0.000000,0,0.000000,} => $class;
0.000000,0,0.000000,
0.000000,0,0.000000,# we don't want this creating
0.000000,0,0.000000,# a cycle in the code, if not
0.000000,0,0.000000,# needed
0.000262,1,0.000262,weaken($self->{'associated_metaclass'});
0.000000,0,0.000000,
0.000006,1,0.000006,$self->_initialize_body;
0.000000,0,0.000000,
0.000007,1,0.000007,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,## accessors
0.000000,0,0.000000,
0.000007,1,0.000007,sub options              { (shift)->{'options'}              }
0.000000,0,0.000000,
0.000000,0,0.000000,## method
0.000000,0,0.000000,
0.000000,0,0.000000,sub is_needed {
0.000002,1,0.000002,my $self      = shift;
0.000002,1,0.000002,my $metaclass = shift;
0.000000,0,0.000000,
0.000017,1,0.000017,( blessed $metaclass && $metaclass->isa('Class::MOP::Class') )
0.000000,0,0.000000,|| $self->throw_error(
0.000000,0,0.000000,"The is_needed method expected a metaclass object as its arugment");
0.000000,0,0.000000,
0.000012,1,0.000012,return $metaclass->find_method_by_name("DEMOLISHALL");
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub initialize_body {
0.000000,0,0.000000,Carp::cluck('The initialize_body method has been made private.'
0.000000,0,0.000000,. " The public version is deprecated and will be removed in a future release.\n");
0.000000,0,0.000000,shift->_initialize_body;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _initialize_body {
0.000002,1,0.000002,my $self = shift;
0.000000,0,0.000000,# TODO:
0.000000,0,0.000000,# the %options should also include a both
0.000000,0,0.000000,# a call 'initializer' and call 'SUPER::'
0.000000,0,0.000000,# options, which should cover approx 90%
0.000000,0,0.000000,# of the possible use cases (even if it
0.000000,0,0.000000,# requires some adaption on the part of
0.000000,0,0.000000,# the author, after all, nothing is free)
0.000000,0,0.000000,
0.000015,1,0.000015,my $class = $self->associated_metaclass->name;
0.000013,1,0.000013,my @source = (
0.000000,0,0.000000,'sub {',
0.000000,0,0.000000,'my $self = shift;',
0.000000,0,0.000000,'return ' . $self->_generate_fallback_destructor('$self'),
0.000000,0,0.000000,'if Scalar::Util::blessed($self) ne \'' . $class . '\';',
0.000000,0,0.000000,$self->_generate_DEMOLISHALL('$self'),
0.000000,0,0.000000,'return;',
0.000000,0,0.000000,'}',
0.000000,0,0.000000,);
0.000006,1,0.000006,warn join("\n", @source) if $self->options->{debug};
0.000000,0,0.000000,
0.000000,0,0.000000,my $code = try {
0.000016,1,0.000016,$self->_compile_code(source => \@source);
0.000000,0,0.000000,}
0.000000,0,0.000000,catch {
0.000000,0,0.000000,my $source = join("\n", @source);
0.000000,0,0.000000,$self->throw_error(
0.000000,0,0.000000,"Could not eval the destructor :\n\n$source\n\nbecause :\n\n$_",
0.000000,0,0.000000,error => $_,
0.000000,0,0.000000,data  => $source,
0.000000,0,0.000000,);
0.000017,1,0.000017,};
0.000000,0,0.000000,
0.000009,1,0.000009,$self->{'body'} = $code;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_fallback_destructor {
0.000002,1,0.000002,my $self = shift;
0.000002,1,0.000002,my ($inv) = @_;
0.000000,0,0.000000,
0.000008,1,0.000008,return $inv . '->Moose::Object::DESTROY(@_)';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_DEMOLISHALL {
0.000002,1,0.000002,my $self = shift;
0.000002,1,0.000002,my ($inv) = @_;
0.000000,0,0.000000,
0.000009,1,0.000009,my @methods = $self->associated_metaclass->find_all_methods_by_name('DEMOLISH');
0.000007,1,0.000007,return unless @methods;
0.000000,0,0.000000,
0.000000,0,0.000000,return (
0.000000,0,0.000000,'local $?;',
0.000000,0,0.000000,'my $igd = Devel::GlobalDestruction::in_global_destruction;',
0.000000,0,0.000000,'Try::Tiny::try {',
0.000000,0,0.000000,(map { $inv . '->' . $_->{class} . '::DEMOLISH($igd);' } @methods),
0.000000,0,0.000000,'}',
0.000000,0,0.000000,'Try::Tiny::catch {',
0.000000,0,0.000000,'die $_;',
0.000000,0,0.000000,'};',
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000003,1,0.000003,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Method Meta Object for destructors
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
