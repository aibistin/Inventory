# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Devel::Declare::MethodInstaller::Simple;
0.000000,0,0.000000,
0.000040,2,0.000020,use base 'Devel::Declare::Context::Simple';
0.000000,0,0.000000,
0.000031,2,0.000015,use Devel::Declare ();
0.000034,2,0.000017,use Sub::Name;
0.000033,2,0.000016,use strict;
0.000063,2,0.000031,use warnings;
0.000000,0,0.000000,
0.000002,1,0.000002,our $VERSION = '0.006014';
0.000000,0,0.000000,
0.000000,0,0.000000,sub install_methodhandler {
0.000003,2,0.000002,my $class = shift;
0.000005,2,0.000003,my %args  = @_;
0.000000,0,0.000000,{
0.000189,4,0.000047,no strict 'refs';
0.000013,2,0.000007,*{$args{into}.'::'.$args{name}}   = sub (&) {};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000011,2,0.000005,my $warnings = warnings::enabled("redefine");
0.000017,2,0.000008,my $ctx = $class->new(%args);
0.000000,0,0.000000,Devel::Declare->setup_for(
0.000000,0,0.000000,$args{into},
0.000154,17,0.000009,{ $args{name} => { const => sub { $ctx->parser(@_, $warnings) } } }
0.000029,2,0.000014,);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub code_for {
0.000029,17,0.000002,my ($self, $name) = @_;
0.000000,0,0.000000,
0.000027,17,0.000002,if (defined $name) {
0.000085,17,0.000005,my $pkg = $self->get_curstash_name;
0.000129,17,0.000008,$name = join( '::', $pkg, $name )
0.000000,0,0.000000,unless( $name =~ /::/ );
0.000000,0,0.000000,return sub (&) {
0.000027,17,0.000002,my $code = shift;
0.000000,0,0.000000,# So caller() gets the subroutine name
0.000083,2,0.000041,no strict 'refs';
0.000000,0,0.000000,my $installer = $self->warning_on_redefine
0.000259,17,0.000015,? sub { *{$name} = subname $name => $code; }
0.000269,2,0.000134,: sub { no warnings 'redefine';
0.000121,17,0.000007,*{$name} = subname $name => $code; };
0.000087,17,0.000005,$installer->();
0.000131,17,0.000008,return;
0.000131,17,0.000008,};
0.000000,0,0.000000,} else {
0.000000,0,0.000000,return sub (&) { shift };
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub install {
0.000029,17,0.000002,my ($self, $name ) = @_;
0.000000,0,0.000000,
0.000199,17,0.000012,$self->shadow( $self->code_for($name) );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub parser {
0.000025,17,0.000001,my $self = shift;
0.000085,17,0.000005,$self->init(@_);
0.000000,0,0.000000,
0.000088,17,0.000005,$self->skip_declarator;
0.000092,17,0.000005,my $name   = $self->strip_name;
0.000087,17,0.000005,my $proto  = $self->strip_proto;
0.000088,17,0.000005,my $attrs  = $self->strip_attrs;
0.000096,17,0.000006,my @decl   = $self->parse_proto($proto);
0.000097,17,0.000006,my $inject = $self->inject_parsed_proto(@decl);
0.000106,17,0.000006,if (defined $name) {
0.000000,0,0.000000,$inject = $self->scope_injector_call() . $inject;
0.000000,0,0.000000,}
0.000097,17,0.000006,$self->inject_if_block($inject, $attrs ? "sub ${attrs} " : '');
0.000000,0,0.000000,
0.000087,17,0.000005,$self->install( $name );
0.000000,0,0.000000,
0.000096,17,0.000006,return;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub parse_proto { '' }
0.000000,0,0.000000,
0.000000,0,0.000000,sub inject_parsed_proto {
0.000092,17,0.000005,return $_[1];
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,1;
0.000000,0,0.000000,
