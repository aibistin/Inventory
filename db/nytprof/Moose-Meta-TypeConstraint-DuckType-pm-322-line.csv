# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Moose::Meta::TypeConstraint::DuckType;
0.000000,0,0.000000,BEGIN {
0.000009,1,0.000009,$Moose::Meta::TypeConstraint::DuckType::AUTHORITY = 'cpan:STEVAN';
0.000034,1,0.000034,}
0.000000,0,0.000000,{
0.000005,2,0.000003,$Moose::Meta::TypeConstraint::DuckType::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000034,2,0.000017,use strict;
0.000034,2,0.000017,use warnings;
0.000038,2,0.000019,use metaclass;
0.000000,0,0.000000,
0.000036,2,0.000018,use B;
0.000037,2,0.000018,use Scalar::Util 'blessed';
0.000036,2,0.000018,use List::MoreUtils qw(all);
0.000040,2,0.000020,use Moose::Util 'english_list';
0.000000,0,0.000000,
0.000031,2,0.000015,use Moose::Util::TypeConstraints ();
0.000000,0,0.000000,
0.000513,2,0.000256,use base 'Moose::Meta::TypeConstraint';
0.000000,0,0.000000,
0.000014,1,0.000014,__PACKAGE__->meta->add_attribute('methods' => (
0.000000,0,0.000000,accessor => 'methods',
0.000000,0,0.000000,Class::MOP::_definition_context(),
0.000000,0,0.000000,));
0.000000,0,0.000000,
0.000000,0,0.000000,my $inliner = sub {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,my $val  = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,return $self->parent->_inline_check($val)
0.000000,0,0.000000,. ' && do {' . "\n"
0.000000,0,0.000000,. 'my $val = ' . $val . ';' . "\n"
0.000000,0,0.000000,. '&List::MoreUtils::all(' . "\n"
0.000000,0,0.000000,. 'sub { $val->can($_) },' . "\n"
0.000000,0,0.000000,. join(', ', map { B::perlstring($_) } @{ $self->methods })
0.000000,0,0.000000,. ');' . "\n"
0.000000,0,0.000000,. '}';
0.000004,1,0.000004,};
0.000000,0,0.000000,
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,my ( $class, %args ) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,$args{parent}
0.000000,0,0.000000,= Moose::Util::TypeConstraints::find_type_constraint('Object');
0.000000,0,0.000000,
0.000000,0,0.000000,my @methods = @{ $args{methods} };
0.000000,0,0.000000,$args{constraint} = sub {
0.000000,0,0.000000,my $val = $_[0];
0.000000,0,0.000000,return all { $val->can($_) } @methods;
0.000000,0,0.000000,};
0.000000,0,0.000000,
0.000000,0,0.000000,$args{inlined} = $inliner;
0.000000,0,0.000000,
0.000000,0,0.000000,my $self = $class->SUPER::new(\%args);
0.000000,0,0.000000,
0.000000,0,0.000000,$self->compile_type_constraint()
0.000000,0,0.000000,unless $self->_has_compiled_type_constraint;
0.000000,0,0.000000,
0.000000,0,0.000000,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub equals {
0.000000,0,0.000000,my ( $self, $type_or_name ) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my $other = Moose::Util::TypeConstraints::find_type_constraint($type_or_name);
0.000000,0,0.000000,
0.000000,0,0.000000,return unless $other->isa(__PACKAGE__);
0.000000,0,0.000000,
0.000000,0,0.000000,my @self_methods  = sort @{ $self->methods };
0.000000,0,0.000000,my @other_methods = sort @{ $other->methods };
0.000000,0,0.000000,
0.000000,0,0.000000,return unless @self_methods == @other_methods;
0.000000,0,0.000000,
0.000000,0,0.000000,while ( @self_methods ) {
0.000000,0,0.000000,my $method = shift @self_methods;
0.000000,0,0.000000,my $other_method = shift @other_methods;
0.000000,0,0.000000,
0.000000,0,0.000000,return unless $method eq $other_method;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub create_child_type {
0.000000,0,0.000000,my ($self, @args) = @_;
0.000000,0,0.000000,return Moose::Meta::TypeConstraint->new(@args, parent => $self);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub get_message {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,my ($value) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,if ($self->has_message) {
0.000000,0,0.000000,return $self->SUPER::get_message(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return $self->SUPER::get_message($value) unless blessed($value);
0.000000,0,0.000000,
0.000000,0,0.000000,my @methods = grep { !$value->can($_) } @{ $self->methods };
0.000000,0,0.000000,my $class = blessed $value;
0.000000,0,0.000000,$class ||= $value;
0.000000,0,0.000000,
0.000000,0,0.000000,return $class
0.000000,0,0.000000,. " is missing methods "
0.000000,0,0.000000,. english_list(map { "'$_'" } @methods);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000006,1,0.000006,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Type constraint for duck typing
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
