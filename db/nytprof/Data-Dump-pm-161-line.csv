# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Data::Dump;
0.000000,0,0.000000,
0.000037,2,0.000018,use strict;
0.000040,2,0.000020,use vars qw(@EXPORT @EXPORT_OK $VERSION $DEBUG);
0.000303,2,0.000152,use subs qq(dump);
0.000000,0,0.000000,
0.000002,1,0.000002,require Exporter;
0.000003,1,0.000003,*import = \&Exporter::import;
0.000003,1,0.000003,@EXPORT = qw(dd ddx);
0.000002,1,0.000002,@EXPORT_OK = qw(dump pp dumpf quote);
0.000000,0,0.000000,
0.000002,1,0.000002,$VERSION = "1.22";
0.000001,1,0.000001,$DEBUG = 0;
0.000000,0,0.000000,
0.000033,2,0.000017,use overload ();
0.001181,2,0.000590,use vars qw(%seen %refcnt @dump @fixup %require $TRY_BASE64 @FILTERS $INDENT);
0.000000,0,0.000000,
0.000002,1,0.000002,$TRY_BASE64 = 50 unless defined $TRY_BASE64;
0.000001,1,0.000001,$INDENT = "  " unless defined $INDENT;
0.000000,0,0.000000,
0.000000,0,0.000000,sub dump
0.000000,0,0.000000,{
0.000002,1,0.000002,local %seen;
0.000002,1,0.000002,local %refcnt;
0.000002,1,0.000002,local %require;
0.000002,1,0.000002,local @fixup;
0.000000,0,0.000000,
0.000002,1,0.000002,require Data::Dump::FilterContext if @FILTERS;
0.000000,0,0.000000,
0.000002,1,0.000002,my $name = "a";
0.000002,1,0.000002,my @dump;
0.000000,0,0.000000,
0.000007,1,0.000007,for my $v (@_) {
0.000007,1,0.000007,my $val = _dump($v, $name, [], tied($v));
0.000003,1,0.000003,push(@dump, [$name, $val]);
0.000000,0,0.000000,} continue {
0.000000,0,0.000000,$name++;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000002,1,0.000002,my $out = "";
0.000002,1,0.000002,if (%require) {
0.000000,0,0.000000,for (sort keys %require) {
0.000000,0,0.000000,$out .= "require $_;\n";
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000002,1,0.000002,if (%refcnt) {
0.000000,0,0.000000,# output all those with refcounts first
0.000000,0,0.000000,for (@dump) {
0.000000,0,0.000000,my $name = $_->[0];
0.000000,0,0.000000,if ($refcnt{$name}) {
0.000000,0,0.000000,$out .= "my \$$name = $_->[1];\n";
0.000000,0,0.000000,undef $_->[1];
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,for (@fixup) {
0.000000,0,0.000000,$out .= "$_;\n";
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000002,1,0.000002,my $paren = (@dump != 1);
0.000002,1,0.000002,$out .= "(" if $paren;
0.000000,0,0.000000,$out .= format_list($paren, undef,
0.000009,1,0.000009,map {defined($_->[1]) ? $_->[1] : "\$".$_->[0]}
0.000000,0,0.000000,@dump
0.000000,0,0.000000,);
0.000002,1,0.000002,$out .= ")" if $paren;
0.000000,0,0.000000,
0.000002,1,0.000002,if (%refcnt || %require) {
0.000000,0,0.000000,$out .= ";\n";
0.000000,0,0.000000,$out =~ s/^/$INDENT/gm;
0.000000,0,0.000000,$out = "do {\n$out}";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000002,1,0.000002,print STDERR "$out\n" unless defined wantarray;
0.000008,1,0.000008,$out;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000002,1,0.000002,*pp = \&dump;
0.000000,0,0.000000,
0.000000,0,0.000000,sub dd {
0.000000,0,0.000000,print dump(@_), "\n";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub ddx {
0.000000,0,0.000000,my(undef, $file, $line) = caller;
0.000000,0,0.000000,$file =~ s,.*[\\/],,;
0.000000,0,0.000000,my $out = "$file:$line: " . dump(@_) . "\n";
0.000000,0,0.000000,$out =~ s/^/# /gm;
0.000000,0,0.000000,print $out;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub dumpf {
0.000000,0,0.000000,require Data::Dump::Filtered;
0.000000,0,0.000000,goto &Data::Dump::Filtered::dump_filtered;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _dump
0.000000,0,0.000000,{
0.000002,1,0.000002,my $ref  = ref $_[0];
0.000002,1,0.000002,my $rval = $ref ? $_[0] : \$_[0];
0.000002,1,0.000002,shift;
0.000000,0,0.000000,
0.000002,1,0.000002,my($name, $idx, $dont_remember, $pclass, $pidx) = @_;
0.000000,0,0.000000,
0.000001,1,0.000001,my($class, $type, $id);
0.000006,1,0.000006,my $strval = overload::StrVal($rval);
0.000000,0,0.000000,# Parse $strval without using regexps, in order not to clobber $1, $2,...
0.000004,1,0.000004,if ((my $i = rindex($strval, "=")) >= 0) {
0.000002,1,0.000002,$class = substr($strval, 0, $i);
0.000002,1,0.000002,$strval = substr($strval, $i+1);
0.000000,0,0.000000,}
0.000004,1,0.000004,if ((my $i = index($strval, "(0x")) >= 0) {
0.000002,1,0.000002,$type = substr($strval, 0, $i);
0.000002,1,0.000002,$id = substr($strval, $i + 2, -1);
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,die "Can't parse " . overload::StrVal($rval);
0.000000,0,0.000000,}
0.000003,1,0.000003,if ($] < 5.008 && $type eq "SCALAR") {
0.000000,0,0.000000,$type = "REF" if $ref eq "REF";
0.000000,0,0.000000,}
0.000002,1,0.000002,warn "\$$name(@$idx) $class $type $id ($ref)" if $DEBUG;
0.000000,0,0.000000,
0.000002,1,0.000002,my $out;
0.000001,1,0.000001,my $comment;
0.000001,1,0.000001,my $hide_keys;
0.000002,1,0.000002,if (@FILTERS) {
0.000000,0,0.000000,my $pself = "";
0.000000,0,0.000000,$pself = fullname("self", [@$idx[$pidx..(@$idx - 1)]]) if $pclass;
0.000000,0,0.000000,my $ctx = Data::Dump::FilterContext->new($rval, $class, $type, $ref, $pclass, $pidx, $idx);
0.000000,0,0.000000,my @bless;
0.000000,0,0.000000,for my $filter (@FILTERS) {
0.000000,0,0.000000,if (my $f = $filter->($ctx, $rval)) {
0.000000,0,0.000000,if (my $v = $f->{object}) {
0.000000,0,0.000000,local @FILTERS;
0.000000,0,0.000000,$out = _dump($v, $name, $idx, 1);
0.000000,0,0.000000,$dont_remember++;
0.000000,0,0.000000,}
0.000000,0,0.000000,if (defined(my $c = $f->{bless})) {
0.000000,0,0.000000,push(@bless, $c);
0.000000,0,0.000000,}
0.000000,0,0.000000,if (my $c = $f->{comment}) {
0.000000,0,0.000000,$comment = $c;
0.000000,0,0.000000,}
0.000000,0,0.000000,if (defined(my $c = $f->{dump})) {
0.000000,0,0.000000,$out = $c;
0.000000,0,0.000000,$dont_remember++;
0.000000,0,0.000000,}
0.000000,0,0.000000,if (my $h = $f->{hide_keys}) {
0.000000,0,0.000000,if (ref($h) eq "ARRAY") {
0.000000,0,0.000000,$hide_keys = sub {
0.000000,0,0.000000,for my $k (@$h) {
0.000000,0,0.000000,return 1 if $k eq $_[0];
0.000000,0,0.000000,}
0.000000,0,0.000000,return 0;
0.000000,0,0.000000,};
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,push(@bless, "") if defined($out) && !@bless;
0.000000,0,0.000000,if (@bless) {
0.000000,0,0.000000,$class = shift(@bless);
0.000000,0,0.000000,warn "More than one filter callback tried to bless object" if @bless;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,unless ($dont_remember) {
0.000002,1,0.000002,if (my $s = $seen{$id}) {
0.000000,0,0.000000,my($sname, $sidx) = @$s;
0.000000,0,0.000000,$refcnt{$sname}++;
0.000000,0,0.000000,my $sref = fullname($sname, $sidx,
0.000000,0,0.000000,($ref && $type eq "SCALAR"));
0.000000,0,0.000000,warn "SEEN: [\$$name(@$idx)] => [\$$sname(@$sidx)] ($ref,$sref)" if $DEBUG;
0.000000,0,0.000000,return $sref unless $sname eq $name;
0.000000,0,0.000000,$refcnt{$name}++;
0.000000,0,0.000000,push(@fixup, fullname($name,$idx)." = $sref");
0.000000,0,0.000000,return "do{my \$fix}" if @$idx && $idx->[-1] eq '$';
0.000000,0,0.000000,return "'fix'";
0.000000,0,0.000000,}
0.000003,1,0.000003,$seen{$id} = [$name, $idx];
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,if ($class) {
0.000002,1,0.000002,$pclass = $class;
0.000002,1,0.000002,$pidx = @$idx;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000005,1,0.000005,if (defined $out) {
0.000000,0,0.000000,# keep it
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($type eq "SCALAR" || $type eq "REF" || $type eq "REGEXP") {
0.000000,0,0.000000,if ($ref) {
0.000000,0,0.000000,if ($class && $class eq "Regexp") {
0.000000,0,0.000000,my $v = "$rval";
0.000000,0,0.000000,
0.000000,0,0.000000,my $mod = "";
0.000000,0,0.000000,if ($v =~ /^\(\?\^?([msix-]*):([\x00-\xFF]*)\)\z/) {
0.000000,0,0.000000,$mod = $1;
0.000000,0,0.000000,$v = $2;
0.000000,0,0.000000,$mod =~ s/-.*//;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,my $sep = '/';
0.000000,0,0.000000,my $sep_count = ($v =~ tr/\///);
0.000000,0,0.000000,if ($sep_count) {
0.000000,0,0.000000,# see if we can find a better one
0.000000,0,0.000000,for ('|', ',', ':', '#') {
0.000000,0,0.000000,my $c = eval "\$v =~ tr/\Q$_\E//";
0.000000,0,0.000000,#print "SEP $_ $c $sep_count\n";
0.000000,0,0.000000,if ($c < $sep_count) {
0.000000,0,0.000000,$sep = $_;
0.000000,0,0.000000,$sep_count = $c;
0.000000,0,0.000000,last if $sep_count == 0;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,$v =~ s/\Q$sep\E/\\$sep/g;
0.000000,0,0.000000,
0.000000,0,0.000000,$out = "qr$sep$v$sep$mod";
0.000000,0,0.000000,undef($class);
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,delete $seen{$id} if $type eq "SCALAR";  # will be seen again shortly
0.000000,0,0.000000,my $val = _dump($$rval, $name, [@$idx, "\$"], 0, $pclass, $pidx);
0.000000,0,0.000000,$out = $class ? "do{\\(my \$o = $val)}" : "\\$val";
0.000000,0,0.000000,}
0.000000,0,0.000000,} else {
0.000023,1,0.000023,if (!defined $$rval) {
0.000000,0,0.000000,$out = "undef";
0.000000,0,0.000000,}
0.002134,1,0.002134,elsif (do {no warnings 'numeric'; $$rval + 0 eq $$rval}) {
0.000000,0,0.000000,$out = $$rval;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$out = str($$rval);
0.000000,0,0.000000,}
0.000000,0,0.000000,if ($class && !@$idx) {
0.000000,0,0.000000,# Top is an object, not a reference to one as perl needs
0.000000,0,0.000000,$refcnt{$name}++;
0.000000,0,0.000000,my $obj = fullname($name, $idx);
0.000000,0,0.000000,my $cl  = quote($class);
0.000000,0,0.000000,push(@fixup, "bless \\$obj, $cl");
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($type eq "GLOB") {
0.000000,0,0.000000,if ($ref) {
0.000000,0,0.000000,delete $seen{$id};
0.000000,0,0.000000,my $val = _dump($$rval, $name, [@$idx, "*"], 0, $pclass, $pidx);
0.000000,0,0.000000,$out = "\\$val";
0.000000,0,0.000000,if ($out =~ /^\\\*Symbol::/) {
0.000000,0,0.000000,$require{Symbol}++;
0.000000,0,0.000000,$out = "Symbol::gensym()";
0.000000,0,0.000000,}
0.000000,0,0.000000,} else {
0.000000,0,0.000000,my $val = "$$rval";
0.000000,0,0.000000,$out = "$$rval";
0.000000,0,0.000000,
0.000000,0,0.000000,for my $k (qw(SCALAR ARRAY HASH)) {
0.000000,0,0.000000,my $gval = *$$rval{$k};
0.000000,0,0.000000,next unless defined $gval;
0.000000,0,0.000000,next if $k eq "SCALAR" && ! defined $$gval;  # always there
0.000000,0,0.000000,my $f = scalar @fixup;
0.000000,0,0.000000,push(@fixup, "RESERVED");  # overwritten after _dump() below
0.000000,0,0.000000,$gval = _dump($gval, $name, [@$idx, "*{$k}"], 0, $pclass, $pidx);
0.000000,0,0.000000,$refcnt{$name}++;
0.000000,0,0.000000,my $gname = fullname($name, $idx);
0.000000,0,0.000000,$fixup[$f] = "$gname = $gval";  #XXX indent $gval
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($type eq "ARRAY") {
0.000000,0,0.000000,my @vals;
0.000000,0,0.000000,my $tied = tied_str(tied(@$rval));
0.000000,0,0.000000,my $i = 0;
0.000000,0,0.000000,for my $v (@$rval) {
0.000000,0,0.000000,push(@vals, _dump($v, $name, [@$idx, "[$i]"], $tied, $pclass, $pidx));
0.000000,0,0.000000,$i++;
0.000000,0,0.000000,}
0.000000,0,0.000000,$out = "[" . format_list(1, $tied, @vals) . "]";
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($type eq "HASH") {
0.000002,1,0.000002,my(@keys, @vals);
0.000006,1,0.000006,my $tied = tied_str(tied(%$rval));
0.000000,0,0.000000,
0.000000,0,0.000000,# statistics to determine variation in key lengths
0.000001,1,0.000001,my $kstat_max = 0;
0.000001,1,0.000001,my $kstat_sum = 0;
0.000002,1,0.000002,my $kstat_sum2 = 0;
0.000000,0,0.000000,
0.000023,1,0.000023,my @orig_keys = keys %$rval;
0.000002,1,0.000002,if ($hide_keys) {
0.000000,0,0.000000,@orig_keys = grep !$hide_keys->($_), @orig_keys;
0.000000,0,0.000000,}
0.000002,1,0.000002,my $text_keys = 0;
0.000004,1,0.000004,for (@orig_keys) {
0.000000,0,0.000000,$text_keys++, last unless /^[-+]?(?:0|[1-9]\d*)(?:\.\d+)?\z/;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,if ($text_keys) {
0.000000,0,0.000000,@orig_keys = sort { lc($a) cmp lc($b) } @orig_keys;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000011,1,0.000011,@orig_keys = sort { $a <=> $b } @orig_keys;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000001,1,0.000001,my $quote;
0.000003,1,0.000003,for my $key (@orig_keys) {
0.000000,0,0.000000,next if $key =~ /^-?[a-zA-Z_]\w*\z/;
0.000000,0,0.000000,next if $key =~ /^-?[1-9]\d{0,8}\z/;
0.000000,0,0.000000,$quote++;
0.000000,0,0.000000,last;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,for my $key (@orig_keys) {
0.000000,0,0.000000,my $val = \$rval->{$key};  # capture value before we modify $key
0.000000,0,0.000000,$key = quote($key) if $quote;
0.000000,0,0.000000,$kstat_max = length($key) if length($key) > $kstat_max;
0.000000,0,0.000000,$kstat_sum += length($key);
0.000000,0,0.000000,$kstat_sum2 += length($key)*length($key);
0.000000,0,0.000000,
0.000000,0,0.000000,push(@keys, $key);
0.000000,0,0.000000,push(@vals, _dump($$val, $name, [@$idx, "{$key}"], $tied, $pclass, $pidx));
0.000000,0,0.000000,}
0.000002,1,0.000002,my $nl = "";
0.000002,1,0.000002,my $klen_pad = 0;
0.000004,1,0.000004,my $tmp = "@keys @vals";
0.000013,1,0.000013,if (length($tmp) > 60 || $tmp =~ /\n/ || $tied) {
0.000002,1,0.000002,$nl = "\n";
0.000000,0,0.000000,
0.000000,0,0.000000,# Determine what padding to add
0.000002,1,0.000002,if ($kstat_max < 4) {
0.000000,0,0.000000,$klen_pad = $kstat_max;
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif (@keys >= 2) {
0.000000,0,0.000000,my $n = @keys;
0.000000,0,0.000000,my $avg = $kstat_sum/$n;
0.000000,0,0.000000,my $stddev = sqrt(($kstat_sum2 - $n * $avg * $avg) / ($n - 1));
0.000000,0,0.000000,
0.000000,0,0.000000,# I am not actually very happy with this heuristics
0.000000,0,0.000000,if ($stddev / $kstat_max < 0.25) {
0.000000,0,0.000000,$klen_pad = $kstat_max;
0.000000,0,0.000000,}
0.000000,0,0.000000,if ($DEBUG) {
0.000000,0,0.000000,push(@keys, "__S");
0.000000,0,0.000000,push(@vals, sprintf("%.2f (%d/%.1f/%.1f)",
0.000000,0,0.000000,$stddev / $kstat_max,
0.000000,0,0.000000,$kstat_max, $avg, $stddev));
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000002,1,0.000002,$out = "{$nl";
0.000003,1,0.000003,$out .= "$INDENT# $tied$nl" if $tied;
0.000003,1,0.000003,while (@keys) {
0.000000,0,0.000000,my $key = shift @keys;
0.000000,0,0.000000,my $val = shift @vals;
0.000000,0,0.000000,my $vpad = $INDENT . (" " x ($klen_pad ? $klen_pad + 4 : 0));
0.000000,0,0.000000,$val =~ s/\n/\n$vpad/gm;
0.000000,0,0.000000,my $kpad = $nl ? $INDENT : " ";
0.000000,0,0.000000,$key .= " " x ($klen_pad - length($key)) if $nl;
0.000000,0,0.000000,$out .= "$kpad$key => $val,$nl";
0.000000,0,0.000000,}
0.000001,1,0.000001,$out =~ s/,$/ / unless $nl;
0.000002,1,0.000002,$out .= "}";
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($type eq "CODE") {
0.000000,0,0.000000,$out = 'sub { ... }';
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($type eq "VSTRING") {
0.000000,0,0.000000,$out = sprintf +($ref ? '\v%vd' : 'v%vd'), $$rval;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,warn "Can't handle $type data";
0.000000,0,0.000000,$out = "'#$type#'";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000009,1,0.000009,if ($class && $ref) {
0.000000,0,0.000000,$out = "bless($out, " . quote($class) . ")";
0.000000,0,0.000000,}
0.000002,1,0.000002,if ($comment) {
0.000000,0,0.000000,$comment =~ s/^/# /gm;
0.000000,0,0.000000,$comment .= "\n" unless $comment =~ /\n\z/;
0.000000,0,0.000000,$comment =~ s/^#[ \t]+\n/\n/;
0.000000,0,0.000000,$out = "$comment$out";
0.000000,0,0.000000,}
0.000007,1,0.000007,return $out;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub tied_str {
0.000002,1,0.000002,my $tied = shift;
0.000003,1,0.000003,if ($tied) {
0.000000,0,0.000000,if (my $tied_ref = ref($tied)) {
0.000000,0,0.000000,$tied = "tied $tied_ref";
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$tied = "tied";
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000008,1,0.000008,return $tied;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub fullname
0.000000,0,0.000000,{
0.000000,0,0.000000,my($name, $idx, $ref) = @_;
0.000000,0,0.000000,substr($name, 0, 0) = "\$";
0.000000,0,0.000000,
0.000000,0,0.000000,my @i = @$idx;  # need copy in order to not modify @$idx
0.000000,0,0.000000,if ($ref && @i && $i[0] eq "\$") {
0.000000,0,0.000000,shift(@i);  # remove one deref
0.000000,0,0.000000,$ref = 0;
0.000000,0,0.000000,}
0.000000,0,0.000000,while (@i && $i[0] eq "\$") {
0.000000,0,0.000000,shift @i;
0.000000,0,0.000000,$name = "\$$name";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,my $last_was_index;
0.000000,0,0.000000,for my $i (@i) {
0.000000,0,0.000000,if ($i eq "*" || $i eq "\$") {
0.000000,0,0.000000,$last_was_index = 0;
0.000000,0,0.000000,$name = "$i\{$name}";
0.000000,0,0.000000,} elsif ($i =~ s/^\*//) {
0.000000,0,0.000000,$name .= $i;
0.000000,0,0.000000,$last_was_index++;
0.000000,0,0.000000,} else {
0.000000,0,0.000000,$name .= "->" unless $last_was_index++;
0.000000,0,0.000000,$name .= $i;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,$name = "\\$name" if $ref;
0.000000,0,0.000000,$name;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub format_list
0.000000,0,0.000000,{
0.000002,1,0.000002,my $paren = shift;
0.000002,1,0.000002,my $comment = shift;
0.000001,1,0.000001,my $indent_lim = $paren ? 0 : 1;
0.000002,1,0.000002,if (@_ > 3) {
0.000000,0,0.000000,# can we use range operator to shorten the list?
0.000000,0,0.000000,my $i = 0;
0.000000,0,0.000000,while ($i < @_) {
0.000000,0,0.000000,my $j = $i + 1;
0.000000,0,0.000000,my $v = $_[$i];
0.000000,0,0.000000,while ($j < @_) {
0.000000,0,0.000000,# XXX allow string increment too?
0.000000,0,0.000000,if ($v eq "0" || $v =~ /^-?[1-9]\d{0,9}\z/) {
0.000000,0,0.000000,$v++;
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($v =~ /^"([A-Za-z]{1,3}\d*)"\z/) {
0.000000,0,0.000000,$v = $1;
0.000000,0,0.000000,$v++;
0.000000,0,0.000000,$v = qq("$v");
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,last;
0.000000,0,0.000000,}
0.000000,0,0.000000,last if $_[$j] ne $v;
0.000000,0,0.000000,$j++;
0.000000,0,0.000000,}
0.000000,0,0.000000,if ($j - $i > 3) {
0.000000,0,0.000000,splice(@_, $i, $j - $i, "$_[$i] .. $_[$j-1]");
0.000000,0,0.000000,}
0.000000,0,0.000000,$i++;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000003,1,0.000003,my $tmp = "@_";
0.000002,1,0.000002,if ($comment || (@_ > $indent_lim && (length($tmp) > 60 || $tmp =~ /\n/))) {
0.000000,0,0.000000,my @elem = @_;
0.000000,0,0.000000,for (@elem) { s/^/$INDENT/gm; }
0.000000,0,0.000000,return "\n" . ($comment ? "$INDENT# $comment\n" : "") .
0.000000,0,0.000000,join(",\n", @elem, "");
0.000000,0,0.000000,} else {
0.000007,1,0.000007,return join(", ", @_);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub str {
0.000000,0,0.000000,if (length($_[0]) > 20) {
0.000000,0,0.000000,for ($_[0]) {
0.000000,0,0.000000,# Check for repeated string
0.000000,0,0.000000,if (/^(.)\1\1\1/s) {
0.000000,0,0.000000,# seems to be a repating sequence, let's check if it really is
0.000000,0,0.000000,# without backtracking
0.000000,0,0.000000,unless (/[^\Q$1\E]/) {
0.000000,0,0.000000,my $base = quote($1);
0.000000,0,0.000000,my $repeat = length;
0.000000,0,0.000000,return "($base x $repeat)"
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,# Length protection because the RE engine will blow the stack [RT#33520]
0.000000,0,0.000000,if (length($_) < 16 * 1024 && /^(.{2,5}?)\1*\z/s) {
0.000000,0,0.000000,my $base   = quote($1);
0.000000,0,0.000000,my $repeat = length($_)/length($1);
0.000000,0,0.000000,return "($base x $repeat)";
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,local $_ = &quote;
0.000000,0,0.000000,
0.000000,0,0.000000,if (length($_) > 40  && !/\\x\{/ && length($_) > (length($_[0]) * 2)) {
0.000000,0,0.000000,# too much binary data, better to represent as a hex/base64 string
0.000000,0,0.000000,
0.000000,0,0.000000,# Base64 is more compact than hex when string is longer than
0.000000,0,0.000000,# 17 bytes (not counting any require statement needed).
0.000000,0,0.000000,# But on the other hand, hex is much more readable.
0.000000,0,0.000000,if ($TRY_BASE64 && length($_[0]) > $TRY_BASE64 &&
0.000000,0,0.000000,(defined &utf8::is_utf8 && !utf8::is_utf8($_[0])) &&
0.000000,0,0.000000,eval { require MIME::Base64 })
0.000000,0,0.000000,{
0.000000,0,0.000000,$require{"MIME::Base64"}++;
0.000000,0,0.000000,return "MIME::Base64::decode(\"" .
0.000000,0,0.000000,MIME::Base64::encode($_[0],"") .
0.000000,0,0.000000,"\")";
0.000000,0,0.000000,}
0.000000,0,0.000000,return "pack(\"H*\",\"" . unpack("H*", $_[0]) . "\")";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return $_;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000005,1,0.000005,my %esc = (
0.000000,0,0.000000,"\a" => "\\a",
0.000000,0,0.000000,"\b" => "\\b",
0.000000,0,0.000000,"\t" => "\\t",
0.000000,0,0.000000,"\n" => "\\n",
0.000000,0,0.000000,"\f" => "\\f",
0.000000,0,0.000000,"\r" => "\\r",
0.000000,0,0.000000,"\e" => "\\e",
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,# put a string value in double quotes
0.000000,0,0.000000,sub quote {
0.000003,1,0.000003,local($_) = $_[0];
0.000000,0,0.000000,# If there are many '"' we might want to use qq() instead
0.000011,1,0.000011,s/([\\\"\@\$])/\\$1/g;
0.000014,1,0.000014,return qq("$_") unless /[^\040-\176]/;  # fast exit
0.000000,0,0.000000,
0.000000,0,0.000000,s/([\a\b\t\n\f\r\e])/$esc{$1}/g;
0.000000,0,0.000000,
0.000000,0,0.000000,# no need for 3 digits in escape for these
0.000000,0,0.000000,s/([\0-\037])(?!\d)/sprintf('\\%o',ord($1))/eg;
0.000000,0,0.000000,
0.000000,0,0.000000,s/([\0-\037\177-\377])/sprintf('\\x%02X',ord($1))/eg;
0.000000,0,0.000000,s/([^\040-\176])/sprintf('\\x{%X}',ord($1))/eg;
0.000000,0,0.000000,
0.000000,0,0.000000,return qq("$_");
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000008,1,0.000008,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
