# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Class::MOP::Method::Inlined;
0.000000,0,0.000000,BEGIN {
0.000008,1,0.000008,$Class::MOP::Method::Inlined::AUTHORITY = 'cpan:STEVAN';
0.000032,1,0.000032,}
0.000000,0,0.000000,{
0.000005,2,0.000002,$Class::MOP::Method::Inlined::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000032,2,0.000016,use strict;
0.000033,2,0.000017,use warnings;
0.000000,0,0.000000,
0.000040,2,0.000020,use Carp         'confess';
0.000035,2,0.000017,use Scalar::Util 'blessed', 'weaken', 'looks_like_number', 'refaddr';
0.000000,0,0.000000,
0.000347,2,0.000173,use base 'Class::MOP::Method::Generated';
0.000000,0,0.000000,
0.000000,0,0.000000,sub _uninlined_body {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,my $super_method
0.000000,0,0.000000,= $self->associated_metaclass->find_next_method_by_name( $self->name )
0.000000,0,0.000000,or return;
0.000000,0,0.000000,
0.000000,0,0.000000,if ( $super_method->isa(__PACKAGE__) ) {
0.000000,0,0.000000,return $super_method->_uninlined_body;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,return $super_method->body;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub can_be_inlined {
0.000050,32,0.000002,my $self      = shift;
0.000159,32,0.000005,my $metaclass = $self->associated_metaclass;
0.000236,32,0.000007,my $class     = $metaclass->name;
0.000000,0,0.000000,
0.000000,0,0.000000,# If we don't find an inherited method, this is a rather weird
0.000000,0,0.000000,# case where we have no method in the inheritance chain even
0.000000,0,0.000000,# though we're expecting one to be there
0.000358,32,0.000011,my $inherited_method
0.000000,0,0.000000,= $metaclass->find_next_method_by_name( $self->name );
0.000000,0,0.000000,
0.000277,32,0.000009,if (   $inherited_method
0.000000,0,0.000000,&& $inherited_method->isa('Class::MOP::Method::Wrapped') ) {
0.000000,0,0.000000,warn "Not inlining '"
0.000000,0,0.000000,. $self->name
0.000000,0,0.000000,. "' for $class since it "
0.000000,0,0.000000,. "has method modifiers which would be lost if it were inlined\n";
0.000000,0,0.000000,
0.000000,0,0.000000,return 0;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000366,32,0.000011,my $expected_class = $self->_expected_method_class
0.000000,0,0.000000,or return 1;
0.000000,0,0.000000,
0.000000,0,0.000000,# if we are shadowing a method we first verify that it is
0.000000,0,0.000000,# compatible with the definition we are replacing it with
0.000019,1,0.000019,my $expected_method = $expected_class->can( $self->name );
0.000000,0,0.000000,
0.000002,1,0.000002,if ( ! $expected_method ) {
0.000000,0,0.000000,warn "Not inlining '"
0.000000,0,0.000000,. $self->name
0.000000,0,0.000000,. "' for $class since ${expected_class}::"
0.000000,0,0.000000,. $self->name
0.000000,0,0.000000,. " is not defined\n";
0.000000,0,0.000000,
0.000000,0,0.000000,return 0;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000017,1,0.000017,my $actual_method = $class->can( $self->name )
0.000000,0,0.000000,or return 1;
0.000000,0,0.000000,
0.000000,0,0.000000,# the method is what we wanted (probably Moose::Object::new)
0.000018,1,0.000018,return 1
0.000000,0,0.000000,if refaddr($expected_method) == refaddr($actual_method);
0.000000,0,0.000000,
0.000000,0,0.000000,# otherwise we have to check that the actual method is an inlined
0.000000,0,0.000000,# version of what we're expecting
0.000000,0,0.000000,if ( $inherited_method->isa(__PACKAGE__) ) {
0.000000,0,0.000000,if ( $inherited_method->_uninlined_body
0.000000,0,0.000000,&& refaddr( $inherited_method->_uninlined_body )
0.000000,0,0.000000,== refaddr($expected_method) ) {
0.000000,0,0.000000,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ( refaddr( $inherited_method->body )
0.000000,0,0.000000,== refaddr($expected_method) ) {
0.000000,0,0.000000,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,my $warning
0.000000,0,0.000000,= "Not inlining '"
0.000000,0,0.000000,. $self->name
0.000000,0,0.000000,. "' for $class since it is not"
0.000000,0,0.000000,. " inheriting the default ${expected_class}::"
0.000000,0,0.000000,. $self->name . "\n";
0.000000,0,0.000000,
0.000000,0,0.000000,if ( $self->isa("Class::MOP::Method::Constructor") ) {
0.000000,0,0.000000,
0.000000,0,0.000000,# FIXME kludge, refactor warning generation to a method
0.000000,0,0.000000,$warning
0.000000,0,0.000000,.= "If you are certain you don't need to inline your"
0.000000,0,0.000000,. " constructor, specify inline_constructor => 0 in your"
0.000000,0,0.000000,. " call to $class->meta->make_immutable\n";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,warn $warning;
0.000000,0,0.000000,
0.000000,0,0.000000,return 0;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Method base class for methods which have been inlined
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
