# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Class::MOP::Mixin::AttributeCore;
0.000000,0,0.000000,BEGIN {
0.000008,1,0.000008,$Class::MOP::Mixin::AttributeCore::AUTHORITY = 'cpan:STEVAN';
0.000035,1,0.000035,}
0.000000,0,0.000000,{
0.000005,2,0.000003,$Class::MOP::Mixin::AttributeCore::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000032,2,0.000016,use strict;
0.000033,2,0.000017,use warnings;
0.000000,0,0.000000,
0.000034,2,0.000017,use Scalar::Util 'blessed';
0.000000,0,0.000000,
0.000395,2,0.000198,use base 'Class::MOP::Mixin';
0.000000,0,0.000000,
0.001194,207,0.000006,sub has_accessor        { defined $_[0]->{'accessor'} }
0.001100,207,0.000005,sub has_reader          { defined $_[0]->{'reader'} }
0.001139,207,0.000006,sub has_writer          { defined $_[0]->{'writer'} }
0.008293,207,0.000040,sub has_predicate       { defined $_[0]->{'predicate'} }
0.001108,207,0.000005,sub has_clearer         { defined $_[0]->{'clearer'} }
0.000973,193,0.000005,sub has_builder         { defined $_[0]->{'builder'} }
0.000000,0,0.000000,sub has_init_arg        { defined $_[0]->{'init_arg'} }
0.007526,310,0.000024,sub has_default         { exists  $_[0]->{'default'} }
0.009431,648,0.000015,sub has_initializer     { defined $_[0]->{'initializer'} }
0.000000,0,0.000000,sub has_insertion_order { defined $_[0]->{'insertion_order'} }
0.000000,0,0.000000,
0.000701,131,0.000005,sub _set_insertion_order { $_[0]->{'insertion_order'} = $_[1] }
0.000000,0,0.000000,
0.000000,0,0.000000,sub has_read_method  { $_[0]->has_reader || $_[0]->has_accessor }
0.000000,0,0.000000,sub has_write_method { $_[0]->has_writer || $_[0]->has_accessor }
0.000000,0,0.000000,
0.000000,0,0.000000,sub is_default_a_coderef {
0.000000,0,0.000000,# Uber hack because it is called from CMOP::Attribute constructor as
0.000000,0,0.000000,# $class->is_default_a_coderef(\%options)
0.000362,161,0.000002,my ($value) = ref $_[0] ? $_[0]->{'default'} : $_[1]->{'default'};
0.000000,0,0.000000,
0.000425,161,0.000003,return unless ref($value);
0.000000,0,0.000000,
0.000673,115,0.000006,return ref($value) eq 'CODE'
0.000000,0,0.000000,|| ( blessed($value) && $value->isa('Class::MOP::Method') );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub default {
0.000629,386,0.000002,my ( $self, $instance ) = @_;
0.000785,386,0.000002,if ( defined $instance && $self->is_default_a_coderef ) {
0.000000,0,0.000000,# if the default is a CODE ref, then we pass in the instance and
0.000000,0,0.000000,# default can return a value based on that instance. Somewhat crude,
0.000000,0,0.000000,# but works.
0.000000,0,0.000000,return $self->{'default'}->($instance);
0.000000,0,0.000000,}
0.001796,368,0.000005,$self->{'default'};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Core attributes shared by attribute metaclasses
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
