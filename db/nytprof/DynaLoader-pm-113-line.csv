# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,
0.000000,0,0.000000,# Generated from DynaLoader_pm.PL
0.000000,0,0.000000,
0.000000,0,0.000000,package DynaLoader;
0.000000,0,0.000000,
0.000000,0,0.000000,#   And Gandalf said: 'Many folk like to know beforehand what is to
0.000000,0,0.000000,#   be set on the table; but those who have laboured to prepare the
0.000000,0,0.000000,#   feast like to keep their secret; for wonder makes the words of
0.000000,0,0.000000,#   praise louder.'
0.000000,0,0.000000,
0.000000,0,0.000000,#   (Quote from Tolkien suggested by Anno Siegel.)
0.000000,0,0.000000,#
0.000000,0,0.000000,# See pod text at end of file for documentation.
0.000000,0,0.000000,# See also ext/DynaLoader/README in source tree for other information.
0.000000,0,0.000000,#
0.000000,0,0.000000,# Tim.Bunce@ig.co.uk, August 1994
0.000000,0,0.000000,
0.000000,0,0.000000,BEGIN {
0.000007,1,0.000007,$VERSION = '1.18';
0.000021,1,0.000021,}
0.000000,0,0.000000,
0.001423,2,0.000712,use Config;
0.000000,0,0.000000,
0.000000,0,0.000000,# enable debug/trace messages from DynaLoader perl code
0.000002,1,0.000002,$dl_debug = $ENV{PERL_DL_DEBUG} || 0 unless defined $dl_debug;
0.000000,0,0.000000,
0.000000,0,0.000000,#
0.000000,0,0.000000,# Flags to alter dl_load_file behaviour.  Assigned bits:
0.000000,0,0.000000,#   0x01  make symbols available for linking later dl_load_file's.
0.000000,0,0.000000,#         (only known to work on Solaris 2 using dlopen(RTLD_GLOBAL))
0.000000,0,0.000000,#         (ignored under VMS; effect is built-in to image linking)
0.000000,0,0.000000,#
0.000000,0,0.000000,# This is called as a class method $module->dl_load_flags.  The
0.000000,0,0.000000,# definition here will be inherited and result on "default" loading
0.000000,0,0.000000,# behaviour unless a sub-class of DynaLoader defines its own version.
0.000000,0,0.000000,#
0.000000,0,0.000000,
0.000042,8,0.000005,sub dl_load_flags { 0x00 }
0.000000,0,0.000000,
0.000022,1,0.000022,($dl_dlext, $dl_so, $dlsrc) = @Config::Config{qw(dlext so dlsrc)};
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000002,1,0.000002,$do_expand = 0;
0.000000,0,0.000000,
0.000002,1,0.000002,@dl_require_symbols = ();       # names of symbols we need
0.000002,1,0.000002,@dl_resolve_using   = ();       # names of files to link with
0.000002,1,0.000002,@dl_library_path    = ();       # path to look for files
0.000000,0,0.000000,
0.000000,0,0.000000,#XSLoader.pm may have added elements before we were required
0.000000,0,0.000000,#@dl_shared_objects  = ();       # shared objects for symbols we have 
0.000000,0,0.000000,#@dl_librefs         = ();       # things we have loaded
0.000000,0,0.000000,#@dl_modules         = ();       # Modules we have loaded
0.000000,0,0.000000,
0.000000,0,0.000000,# This is a fix to support DLD's unfortunate desire to relink -lc
0.000002,1,0.000002,@dl_resolve_using = dl_findfile('-lc') if $dlsrc eq "dl_dld.xs";
0.000000,0,0.000000,
0.000000,0,0.000000,# Initialise @dl_library_path with the 'standard' library path
0.000000,0,0.000000,# for this platform as determined by Configure.
0.000000,0,0.000000,
0.000012,1,0.000012,push(@dl_library_path, split(' ', $Config::Config{libpth}));
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000007,1,0.000007,my $ldlibpthname         = $Config::Config{ldlibpthname};
0.000007,1,0.000007,my $ldlibpthname_defined = defined $Config::Config{ldlibpthname};
0.000007,1,0.000007,my $pthsep               = $Config::Config{path_sep};
0.000000,0,0.000000,
0.000000,0,0.000000,# Add to @dl_library_path any extra directories we can gather from environment
0.000000,0,0.000000,# during runtime.
0.000000,0,0.000000,
0.000002,1,0.000002,if ($ldlibpthname_defined &&
0.000000,0,0.000000,exists $ENV{$ldlibpthname}) {
0.000000,0,0.000000,push(@dl_library_path, split(/$pthsep/, $ENV{$ldlibpthname}));
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# E.g. HP-UX supports both its native SHLIB_PATH *and* LD_LIBRARY_PATH.
0.000000,0,0.000000,
0.000002,1,0.000002,if ($ldlibpthname_defined &&
0.000000,0,0.000000,$ldlibpthname ne 'LD_LIBRARY_PATH' &&
0.000000,0,0.000000,exists $ENV{LD_LIBRARY_PATH}) {
0.000000,0,0.000000,push(@dl_library_path, split(/$pthsep/, $ENV{LD_LIBRARY_PATH}));
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,# No prizes for guessing why we don't say 'bootstrap DynaLoader;' here.
0.000000,0,0.000000,# NOTE: All dl_*.xs (including dl_none.xs) define a dl_error() XSUB
0.000002,1,0.000002,boot_DynaLoader('DynaLoader') if defined(&boot_DynaLoader) &&
0.000000,0,0.000000,!defined(&dl_error);
0.000000,0,0.000000,
0.000001,1,0.000001,if ($dl_debug) {
0.000000,0,0.000000,print STDERR "DynaLoader.pm loaded (@INC, @dl_library_path)\n";
0.000000,0,0.000000,print STDERR "DynaLoader not linked into this perl\n"
0.000000,0,0.000000,unless defined(&boot_DynaLoader);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000015,1,0.000015,1; # End of main code
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,sub croak   { require Carp; Carp::croak(@_)   }
0.000000,0,0.000000,
0.000000,0,0.000000,sub bootstrap_inherit {
0.000002,1,0.000002,my $module = $_[0];
0.000005,1,0.000005,local *isa = *{"$module\::ISA"};
0.000011,1,0.000011,local @isa = (@isa, 'DynaLoader');
0.000000,0,0.000000,# Cannot goto due to delocalization.  Will report errors on a wrong line?
0.000010,1,0.000010,bootstrap(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub bootstrap {
0.000000,0,0.000000,# use local vars to enable $module.bs script to edit values
0.000024,9,0.000003,local(@args) = @_;
0.000018,9,0.000002,local($module) = $args[0];
0.000015,9,0.000002,local(@dirs, $file);
0.000000,0,0.000000,
0.000013,9,0.000001,unless ($module) {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,Carp::confess("Usage: DynaLoader::bootstrap(module)");
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# A common error on platforms which don't support dynamic loading.
0.000000,0,0.000000,# Since it's fatal and potentially confusing we give a detailed message.
0.000017,9,0.000002,croak("Can't load module $module, dynamic loading not available in this perl.\n".
0.000000,0,0.000000,"  (You may need to build a new perl executable which either supports\n".
0.000000,0,0.000000,"  dynamic loading or has the $module module statically linked into it.)\n")
0.000000,0,0.000000,unless defined(&dl_load_file);
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000036,9,0.000004,my @modparts = split(/::/,$module);
0.000017,9,0.000002,my $modfname = $modparts[-1];
0.000000,0,0.000000,
0.000000,0,0.000000,# Some systems have restrictions on files names for DLL's etc.
0.000000,0,0.000000,# mod2fname returns appropriate file base name (typically truncated)
0.000000,0,0.000000,# It may also edit @modparts if required.
0.000015,9,0.000002,$modfname = &mod2fname(\@modparts) if defined &mod2fname;
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000022,9,0.000002,my $modpname = join('/',@modparts);
0.000000,0,0.000000,
0.000014,9,0.000002,print STDERR "DynaLoader::bootstrap for $module ",
0.000000,0,0.000000,"(auto/$modpname/$modfname.$dl_dlext)\n"
0.000000,0,0.000000,if $dl_debug;
0.000000,0,0.000000,
0.000148,9,0.000016,foreach (@INC) {
0.000000,0,0.000000,
0.000168,99,0.000002,my $dir = "$_/auto/$modpname";
0.000000,0,0.000000,
0.000786,99,0.000008,next unless -d $dir; # skip over uninteresting directories
0.000000,0,0.000000,
0.000000,0,0.000000,# check for common cases to avoid autoload of dl_findfile
0.000023,9,0.000003,my $try = "$dir/$modfname.$dl_dlext";
0.000116,9,0.000013,last if $file = ($do_expand) ? dl_expandspec($try) : ((-f $try) && $try);
0.000000,0,0.000000,
0.000000,0,0.000000,# no luck here, save dir for possible later dl_findfile search
0.000000,0,0.000000,push @dirs, $dir;
0.000000,0,0.000000,}
0.000000,0,0.000000,# last resort, let dl_findfile have a go in all known locations
0.000013,9,0.000001,$file = dl_findfile(map("-L$_",@dirs,@INC), $modfname) unless $file;
0.000000,0,0.000000,
0.000013,9,0.000001,croak("Can't locate loadable object for module $module in \@INC (\@INC contains: @INC)")
0.000000,0,0.000000,unless $file;	# wording similar to error from 'require'
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000019,9,0.000002,my $bootname = "boot_$module";
0.000093,9,0.000010,$bootname =~ s/\W/_/g;
0.000023,9,0.000003,@dl_require_symbols = ($bootname);
0.000000,0,0.000000,
0.000000,0,0.000000,# Execute optional '.bootstrap' perl script for this module.
0.000000,0,0.000000,# The .bs file can be used to configure @dl_resolve_using etc to
0.000000,0,0.000000,# match the needs of the individual module on this architecture.
0.000016,9,0.000002,my $bs = $file;
0.000359,9,0.000040,$bs =~ s/(\.\w+)?(;\d*)?$/\.bs/; # look for .bs 'beside' the library
0.000090,9,0.000010,if (-s $bs) { # only read file if it's not empty
0.000000,0,0.000000,print STDERR "BS: $bs ($^O, $dlsrc)\n" if $dl_debug;
0.000000,0,0.000000,eval { do $bs; };
0.000000,0,0.000000,warn "$bs: $@\n" if $@;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000013,9,0.000002,my $boot_symbol_ref;
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,# Many dynamic extension loading problems will appear to come from
0.000000,0,0.000000,# this section of code: XYZ failed at line 123 of DynaLoader.pm.
0.000000,0,0.000000,# Often these errors are actually occurring in the initialisation
0.000000,0,0.000000,# C code of the extension XS file. Perl reports the error as being
0.000000,0,0.000000,# in this perl code simply because this was the last perl code
0.000000,0,0.000000,# it executed.
0.000000,0,0.000000,
0.000847,9,0.000094,my $libref = dl_load_file($file, $module->dl_load_flags) or
0.000000,0,0.000000,croak("Can't load '$file' for module $module: ".dl_error());
0.000000,0,0.000000,
0.000019,9,0.000002,push(@dl_librefs,$libref);  # record loaded object
0.000000,0,0.000000,
0.000074,9,0.000008,my @unresolved = dl_undef_symbols();
0.000015,9,0.000002,if (@unresolved) {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,Carp::carp("Undefined symbols present after loading $file: @unresolved\n");
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000084,9,0.000009,$boot_symbol_ref = dl_find_symbol($libref, $bootname) or
0.000000,0,0.000000,croak("Can't find '$bootname' symbol in $file\n");
0.000000,0,0.000000,
0.000021,9,0.000002,push(@dl_modules, $module); # record loaded module
0.000000,0,0.000000,
0.000131,9,0.000015,boot:
0.000000,0,0.000000,my $xs = dl_install_xsub("${module}::bootstrap", $boot_symbol_ref, $file);
0.000000,0,0.000000,
0.000000,0,0.000000,# See comment block above
0.000000,0,0.000000,
0.000019,9,0.000002,push(@dl_shared_objects, $file); # record files loaded
0.000000,0,0.000000,
0.001164,9,0.000129,&$xs(@args);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub dl_findfile {
0.000000,0,0.000000,# Read ext/DynaLoader/DynaLoader.doc for detailed information.
0.000000,0,0.000000,# This function does not automatically consider the architecture
0.000000,0,0.000000,# or the perl library auto directories.
0.000000,0,0.000000,my (@args) = @_;
0.000000,0,0.000000,my (@dirs,  $dir);   # which directories to search
0.000000,0,0.000000,my (@found);         # full paths to real files we have found
0.000000,0,0.000000,#my $dl_ext= 'so'; # $Config::Config{'dlext'} suffix for perl extensions
0.000000,0,0.000000,#my $dl_so = 'so'; # $Config::Config{'so'} suffix for shared libraries
0.000000,0,0.000000,
0.000000,0,0.000000,print STDERR "dl_findfile(@args)\n" if $dl_debug;
0.000000,0,0.000000,
0.000000,0,0.000000,# accumulate directories but process files as they appear
0.000000,0,0.000000,arg: foreach(@args) {
0.000000,0,0.000000,#  Special fast case: full filepath requires no search
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,if (m:/: && -f $_) {
0.000000,0,0.000000,push(@found,$_);
0.000000,0,0.000000,last arg unless wantarray;
0.000000,0,0.000000,next;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,# Deal with directories first:
0.000000,0,0.000000,#  Using a -L prefix is the preferred option (faster and more robust)
0.000000,0,0.000000,if (m:^-L:) { s/^-L//; push(@dirs, $_); next; }
0.000000,0,0.000000,
0.000000,0,0.000000,#  Otherwise we try to try to spot directories by a heuristic
0.000000,0,0.000000,#  (this is a more complicated issue than it first appears)
0.000000,0,0.000000,if (m:/: && -d $_) {   push(@dirs, $_); next; }
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,#  Only files should get this far...
0.000000,0,0.000000,my(@names, $name);    # what filenames to look for
0.000000,0,0.000000,if (m:-l: ) {          # convert -lname to appropriate library name
0.000000,0,0.000000,s/-l//;
0.000000,0,0.000000,push(@names,"lib$_.$dl_so");
0.000000,0,0.000000,push(@names,"lib$_.a");
0.000000,0,0.000000,} else {                # Umm, a bare name. Try various alternatives:
0.000000,0,0.000000,# these should be ordered with the most likely first
0.000000,0,0.000000,push(@names,"$_.$dl_dlext")    unless m/\.$dl_dlext$/o;
0.000000,0,0.000000,push(@names,"$_.$dl_so")     unless m/\.$dl_so$/o;
0.000000,0,0.000000,
0.000000,0,0.000000,push(@names,"lib$_.$dl_so")  unless m:/:;
0.000000,0,0.000000,push(@names,"$_.a")          if !m/\.a$/ and $dlsrc eq "dl_dld.xs";
0.000000,0,0.000000,push(@names, $_);
0.000000,0,0.000000,}
0.000000,0,0.000000,my $dirsep = '/';
0.000000,0,0.000000,
0.000000,0,0.000000,foreach $dir (@dirs, @dl_library_path) {
0.000000,0,0.000000,next unless -d $dir;
0.000000,0,0.000000,
0.000000,0,0.000000,foreach $name (@names) {
0.000000,0,0.000000,my($file) = "$dir$dirsep$name";
0.000000,0,0.000000,print STDERR " checking in $dir for $name\n" if $dl_debug;
0.000000,0,0.000000,$file = ($do_expand) ? dl_expandspec($file) : (-f $file && $file);
0.000000,0,0.000000,#$file = _check_file($file);
0.000000,0,0.000000,if ($file) {
0.000000,0,0.000000,push(@found, $file);
0.000000,0,0.000000,next arg; # no need to look any further
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,if ($dl_debug) {
0.000000,0,0.000000,foreach(@dirs) {
0.000000,0,0.000000,print STDERR " dl_findfile ignored non-existent directory: $_\n" unless -d $_;
0.000000,0,0.000000,}
0.000000,0,0.000000,print STDERR "dl_findfile found: @found\n";
0.000000,0,0.000000,}
0.000000,0,0.000000,return $found[0] unless wantarray;
0.000000,0,0.000000,@found;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,sub dl_expandspec {
0.000000,0,0.000000,my($spec) = @_;
0.000000,0,0.000000,# Optional function invoked if DynaLoader.pm sets $do_expand.
0.000000,0,0.000000,# Most systems do not require or use this function.
0.000000,0,0.000000,# Some systems may implement it in the dl_*.xs file in which case
0.000000,0,0.000000,# this Perl version should be excluded at build time.
0.000000,0,0.000000,
0.000000,0,0.000000,# This function is designed to deal with systems which treat some
0.000000,0,0.000000,# 'filenames' in a special way. For example VMS 'Logical Names'
0.000000,0,0.000000,# (something like unix environment variables - but different).
0.000000,0,0.000000,# This function should recognise such names and expand them into
0.000000,0,0.000000,# full file paths.
0.000000,0,0.000000,# Must return undef if $spec is invalid or file does not exist.
0.000000,0,0.000000,
0.000000,0,0.000000,my $file = $spec; # default output to input
0.000000,0,0.000000,
0.000000,0,0.000000,return undef unless -f $file;
0.000000,0,0.000000,print STDERR "dl_expandspec($spec) => $file\n" if $dl_debug;
0.000000,0,0.000000,$file;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub dl_find_symbol_anywhere
0.000000,0,0.000000,{
0.000000,0,0.000000,my $sym = shift;
0.000000,0,0.000000,my $libref;
0.000000,0,0.000000,foreach $libref (@dl_librefs) {
0.000000,0,0.000000,my $symref = dl_find_symbol($libref,$sym);
0.000000,0,0.000000,return $symref if $symref;
0.000000,0,0.000000,}
0.000000,0,0.000000,return undef;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
