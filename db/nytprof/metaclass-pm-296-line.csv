# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,
0.000000,0,0.000000,package metaclass;
0.000000,0,0.000000,BEGIN {
0.000007,1,0.000007,$metaclass::AUTHORITY = 'cpan:STEVAN';
0.000029,1,0.000029,}
0.000000,0,0.000000,{
0.000005,2,0.000003,$metaclass::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000032,2,0.000016,use strict;
0.000036,2,0.000018,use warnings;
0.000000,0,0.000000,
0.000036,2,0.000018,use Carp         'confess';
0.000034,2,0.000017,use Class::Load  'load_class';
0.000037,2,0.000019,use Scalar::Util 'blessed';
0.000033,2,0.000016,use Try::Tiny;
0.000000,0,0.000000,
0.000202,2,0.000101,use Class::MOP;
0.000000,0,0.000000,
0.000000,0,0.000000,sub import {
0.000045,20,0.000002,my ( $class, @args ) = @_;
0.000000,0,0.000000,
0.000039,20,0.000002,unshift @args, "metaclass" if @args % 2 == 1;
0.000039,20,0.000002,my %options = @args;
0.000000,0,0.000000,
0.000042,20,0.000002,my $meta_name = exists $options{meta_name} ? $options{meta_name} : 'meta';
0.000036,20,0.000002,my $metaclass = delete $options{metaclass};
0.000000,0,0.000000,
0.000045,20,0.000002,unless ( defined $metaclass ) {
0.000000,0,0.000000,$metaclass = "Class::MOP::Class";
0.000000,0,0.000000,} else {
0.000006,1,0.000006,load_class($metaclass);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000194,20,0.000010,($metaclass->isa('Class::MOP::Class'))
0.000000,0,0.000000,|| confess "The metaclass ($metaclass) must be derived from Class::MOP::Class";
0.000000,0,0.000000,
0.000000,0,0.000000,# make sure the custom metaclasses get loaded
0.000086,20,0.000004,foreach my $key (grep { /_(?:meta)?class$/ } keys %options) {
0.000000,0,0.000000,unless ( ref( my $class = $options{$key} ) ) {
0.000000,0,0.000000,load_class($class)
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000042,20,0.000002,my $package = caller();
0.000000,0,0.000000,
0.000000,0,0.000000,# create a meta object so we can install &meta
0.000120,20,0.000006,my $meta = $metaclass->initialize($package => %options);
0.000243,20,0.000012,$meta->_add_meta_method($meta_name)
0.000000,0,0.000000,if defined $meta_name;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: a pragma for installing and using Class::MOP metaclasses
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
