# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,
0.000000,0,0.000000,package Class::MOP::Method::Constructor;
0.000000,0,0.000000,BEGIN {
0.000008,1,0.000008,$Class::MOP::Method::Constructor::AUTHORITY = 'cpan:STEVAN';
0.000032,1,0.000032,}
0.000000,0,0.000000,{
0.000005,2,0.000002,$Class::MOP::Method::Constructor::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000034,2,0.000017,use strict;
0.000036,2,0.000018,use warnings;
0.000000,0,0.000000,
0.000036,2,0.000018,use Carp         'confess';
0.000034,2,0.000017,use Scalar::Util 'blessed', 'weaken';
0.000056,2,0.000028,use Try::Tiny;
0.000000,0,0.000000,
0.000476,2,0.000238,use base 'Class::MOP::Method::Inlined';
0.000000,0,0.000000,
0.000000,0,0.000000,sub new {
0.000048,30,0.000002,my $class   = shift;
0.000106,30,0.000004,my %options = @_;
0.000000,0,0.000000,
0.000404,30,0.000013,(blessed $options{metaclass} && $options{metaclass}->isa('Class::MOP::Class'))
0.000000,0,0.000000,|| confess "You must pass a metaclass instance if you want to inline"
0.000000,0,0.000000,if $options{is_inline};
0.000000,0,0.000000,
0.000050,30,0.000002,($options{package_name} && $options{name})
0.000000,0,0.000000,|| confess "You must supply the package_name and name parameters $Class::MOP::Method::UPGRADE_ERROR_TEXT";
0.000000,0,0.000000,
0.000170,30,0.000006,my $self = $class->_new(\%options);
0.000000,0,0.000000,
0.000000,0,0.000000,# we don't want this creating
0.000000,0,0.000000,# a cycle in the code, if not
0.000000,0,0.000000,# needed
0.000433,30,0.000014,weaken($self->{'associated_metaclass'});
0.000000,0,0.000000,
0.000162,30,0.000005,$self->_initialize_body;
0.000000,0,0.000000,
0.000180,30,0.000006,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _new {
0.000050,30,0.000002,my $class = shift;
0.000000,0,0.000000,
0.000050,30,0.000002,return Class::MOP::Class->initialize($class)->new_object(@_)
0.000000,0,0.000000,if $class ne __PACKAGE__;
0.000000,0,0.000000,
0.000055,30,0.000002,my $params = @_ == 1 ? $_[0] : {@_};
0.000000,0,0.000000,
0.000329,30,0.000011,return bless {
0.000000,0,0.000000,# inherited from Class::MOP::Method
0.000000,0,0.000000,body                 => $params->{body},
0.000000,0,0.000000,# associated_metaclass => $params->{associated_metaclass}, # overridden
0.000000,0,0.000000,package_name         => $params->{package_name},
0.000000,0,0.000000,name                 => $params->{name},
0.000000,0,0.000000,original_method      => $params->{original_method},
0.000000,0,0.000000,
0.000000,0,0.000000,# inherited from Class::MOP::Generated
0.000000,0,0.000000,is_inline            => $params->{is_inline} || 0,
0.000000,0,0.000000,definition_context   => $params->{definition_context},
0.000000,0,0.000000,
0.000000,0,0.000000,# inherited from Class::MOP::Inlined
0.000000,0,0.000000,_expected_method_class => $params->{_expected_method_class},
0.000000,0,0.000000,
0.000000,0,0.000000,# defined in this subclass
0.000000,0,0.000000,options              => $params->{options} || {},
0.000000,0,0.000000,associated_metaclass => $params->{metaclass},
0.000000,0,0.000000,}, $class;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,## accessors
0.000000,0,0.000000,
0.000180,31,0.000006,sub options              { (shift)->{'options'}              }
0.000504,90,0.000006,sub associated_metaclass { (shift)->{'associated_metaclass'} }
0.000000,0,0.000000,
0.000000,0,0.000000,## method
0.000000,0,0.000000,
0.000000,0,0.000000,sub _initialize_body {
0.000048,30,0.000002,my $self        = shift;
0.000049,30,0.000002,my $method_name = '_generate_constructor_method';
0.000000,0,0.000000,
0.000214,30,0.000007,$method_name .= '_inline' if $self->is_inline;
0.000000,0,0.000000,
0.000314,30,0.000010,$self->{'body'} = $self->$method_name;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_environment {
0.000055,31,0.000002,my $self = shift;
0.000371,31,0.000012,return $self->associated_metaclass->_eval_environment;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_constructor_method {
0.000000,0,0.000000,return sub { Class::MOP::Class->initialize(shift)->new_object(@_) }
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_constructor_method_inline {
0.000046,31,0.000001,my $self = shift;
0.000000,0,0.000000,
0.000155,31,0.000005,my $meta = $self->associated_metaclass;
0.000000,0,0.000000,
0.000396,31,0.000013,my @source = (
0.000000,0,0.000000,'sub {',
0.000000,0,0.000000,$meta->_inline_new_object,
0.000000,0,0.000000,'}',
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000179,31,0.000006,warn join("\n", @source) if $self->options->{debug};
0.000000,0,0.000000,
0.000000,0,0.000000,my $code = try {
0.000267,31,0.000009,$self->_compile_code(\@source);
0.000000,0,0.000000,}
0.000000,0,0.000000,catch {
0.000000,0,0.000000,my $source = join("\n", @source);
0.000000,0,0.000000,confess "Could not eval the constructor :\n\n$source\n\nbecause :\n\n$_";
0.000498,31,0.000016,};
0.000000,0,0.000000,
0.000245,31,0.000008,return $code;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Method Meta Object for constructors
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
