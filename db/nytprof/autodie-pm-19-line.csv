# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package autodie;
0.000057,2,0.000029,use 5.008;
0.000031,2,0.000016,use strict;
0.000030,2,0.000015,use warnings;
0.000000,0,0.000000,
0.000139,2,0.000070,use Fatal ();
0.000008,1,0.000008,our @ISA = qw(Fatal);
0.000001,1,0.000001,our $VERSION;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Replace functions with ones that succeed or die with lexical scope
0.000000,0,0.000000,
0.000000,0,0.000000,BEGIN {
0.000007,1,0.000007,our $VERSION = '2.20'; # VERSION: Generated by DZP::OurPkg::Version
0.000034,1,0.000034,}
0.000000,0,0.000000,
0.000016,1,0.000016,use constant ERROR_WRONG_FATAL => q{
0.000000,0,0.000000,Incorrect version of Fatal.pm loaded by autodie.
0.000000,0,0.000000,
0.000000,0,0.000000,The autodie pragma uses an updated version of Fatal to do its
0.000000,0,0.000000,heavy lifting.  We seem to have loaded Fatal version %s, which is
0.000000,0,0.000000,probably the version that came with your version of Perl.  However
0.000000,0,0.000000,autodie needs version %s, which would have come bundled with
0.000000,0,0.000000,autodie.
0.000000,0,0.000000,
0.000000,0,0.000000,You may be able to solve this problem by adding the following
0.000000,0,0.000000,line of code to your main program, before any use of Fatal or
0.000000,0,0.000000,autodie.
0.000000,0,0.000000,
0.000000,0,0.000000,use lib "%s";
0.000000,0,0.000000,
0.000081,1,0.000081,};
0.000000,0,0.000000,
0.000000,0,0.000000,# We have to check we've got the right version of Fatal before we
0.000000,0,0.000000,# try to compile the rest of our code, lest we use a constant
0.000000,0,0.000000,# that doesn't exist.
0.000000,0,0.000000,
0.000000,0,0.000000,BEGIN {
0.000000,0,0.000000,
0.000000,0,0.000000,# If we have the wrong Fatal, then we've probably loaded the system
0.000000,0,0.000000,# one, not our own.  Complain, and give a useful hint. ;)
0.000000,0,0.000000,
0.000007,1,0.000007,if ($Fatal::VERSION ne $VERSION) {
0.000000,0,0.000000,my $autodie_path = $INC{'autodie.pm'};
0.000000,0,0.000000,
0.000000,0,0.000000,$autodie_path =~ s/autodie\.pm//;
0.000000,0,0.000000,
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,
0.000000,0,0.000000,Carp::croak sprintf(
0.000000,0,0.000000,ERROR_WRONG_FATAL, $Fatal::VERSION, $VERSION, $autodie_path
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000076,1,0.000076,}
0.000000,0,0.000000,
0.000000,0,0.000000,# When passing args to Fatal we want to keep the first arg
0.000000,0,0.000000,# (our package) in place.  Hence the splice.
0.000000,0,0.000000,
0.000000,0,0.000000,sub import {
0.000006,2,0.000003,splice(@_,1,0,Fatal::LEXICAL_TAG);
0.000022,2,0.000011,goto &Fatal::import;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub unimport {
0.000000,0,0.000000,splice(@_,1,0,Fatal::LEXICAL_TAG);
0.000000,0,0.000000,goto &Fatal::unimport;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
