# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Moose::Meta::Role::Attribute;
0.000000,0,0.000000,BEGIN {
0.000011,1,0.000011,$Moose::Meta::Role::Attribute::AUTHORITY = 'cpan:STEVAN';
0.000031,1,0.000031,}
0.000000,0,0.000000,{
0.000005,2,0.000003,$Moose::Meta::Role::Attribute::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000033,2,0.000016,use strict;
0.000034,2,0.000017,use warnings;
0.000000,0,0.000000,
0.000034,2,0.000017,use Carp 'confess';
0.000034,2,0.000017,use List::MoreUtils 'all';
0.000039,2,0.000020,use Scalar::Util 'blessed', 'weaken';
0.000000,0,0.000000,
0.001019,2,0.000509,use base 'Moose::Meta::Mixin::AttributeCore', 'Class::MOP::Object';
0.000000,0,0.000000,
0.000021,1,0.000021,__PACKAGE__->meta->add_attribute(
0.000000,0,0.000000,'metaclass' => (
0.000000,0,0.000000,reader => 'metaclass',
0.000000,0,0.000000,Class::MOP::_definition_context(),
0.000000,0,0.000000,)
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000013,1,0.000013,__PACKAGE__->meta->add_attribute(
0.000000,0,0.000000,'associated_role' => (
0.000000,0,0.000000,reader => 'associated_role',
0.000000,0,0.000000,Class::MOP::_definition_context(),
0.000000,0,0.000000,)
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000013,1,0.000013,__PACKAGE__->meta->add_attribute(
0.000000,0,0.000000,'_original_role' => (
0.000000,0,0.000000,reader => '_original_role',
0.000000,0,0.000000,Class::MOP::_definition_context(),
0.000000,0,0.000000,)
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000013,1,0.000013,__PACKAGE__->meta->add_attribute(
0.000000,0,0.000000,'is' => (
0.000000,0,0.000000,reader => 'is',
0.000000,0,0.000000,Class::MOP::_definition_context(),
0.000000,0,0.000000,)
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000013,1,0.000013,__PACKAGE__->meta->add_attribute(
0.000000,0,0.000000,'original_options' => (
0.000000,0,0.000000,reader => 'original_options',
0.000000,0,0.000000,Class::MOP::_definition_context(),
0.000000,0,0.000000,)
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,my ( $class, $name, %options ) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,(defined $name)
0.000000,0,0.000000,|| confess "You must provide a name for the attribute";
0.000000,0,0.000000,
0.000000,0,0.000000,my $role = delete $options{_original_role};
0.000000,0,0.000000,
0.000000,0,0.000000,return bless {
0.000000,0,0.000000,name             => $name,
0.000000,0,0.000000,original_options => \%options,
0.000000,0,0.000000,_original_role   => $role,
0.000000,0,0.000000,%options,
0.000000,0,0.000000,}, $class;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub attach_to_role {
0.000000,0,0.000000,my ( $self, $role ) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,( blessed($role) && $role->isa('Moose::Meta::Role') )
0.000000,0,0.000000,|| confess
0.000000,0,0.000000,"You must pass a Moose::Meta::Role instance (or a subclass)";
0.000000,0,0.000000,
0.000000,0,0.000000,weaken( $self->{'associated_role'} = $role );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub original_role {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,return $self->_original_role || $self->associated_role;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub attribute_for_class {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,my $metaclass = $self->original_role->applied_attribute_metaclass;
0.000000,0,0.000000,
0.000000,0,0.000000,return $metaclass->interpolate_class_and_new(
0.000000,0,0.000000,$self->name => %{ $self->original_options } );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub clone {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,my $role = $self->original_role;
0.000000,0,0.000000,
0.000000,0,0.000000,return ( ref $self )->new(
0.000000,0,0.000000,$self->name,
0.000000,0,0.000000,%{ $self->original_options },
0.000000,0,0.000000,_original_role => $role,
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub is_same_as {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,my $attr = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,my $self_options = $self->original_options;
0.000000,0,0.000000,my $other_options = $attr->original_options;
0.000000,0,0.000000,
0.000000,0,0.000000,return 0
0.000000,0,0.000000,unless ( join q{|}, sort keys %{$self_options} ) eq ( join q{|}, sort keys %{$other_options} );
0.000000,0,0.000000,
0.000000,0,0.000000,for my $key ( keys %{$self_options} ) {
0.000000,0,0.000000,return 0 if defined $self_options->{$key} && ! defined $other_options->{$key};
0.000000,0,0.000000,return 0 if ! defined $self_options->{$key} && defined $other_options->{$key};
0.000000,0,0.000000,
0.000000,0,0.000000,next if all { ! defined } $self_options->{$key}, $other_options->{$key};
0.000000,0,0.000000,
0.000000,0,0.000000,return 0 unless $self_options->{$key} eq $other_options->{$key};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000010,1,0.000010,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: The Moose attribute metaclass for Roles
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
