# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,
0.000000,0,0.000000,package Moose::Meta::TypeConstraint::Registry;
0.000000,0,0.000000,BEGIN {
0.000008,1,0.000008,$Moose::Meta::TypeConstraint::Registry::AUTHORITY = 'cpan:STEVAN';
0.000033,1,0.000033,}
0.000000,0,0.000000,{
0.000005,2,0.000003,$Moose::Meta::TypeConstraint::Registry::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000038,2,0.000019,use strict;
0.000038,2,0.000019,use warnings;
0.000039,2,0.000020,use metaclass;
0.000000,0,0.000000,
0.000037,2,0.000018,use Scalar::Util 'blessed';
0.000000,0,0.000000,
0.000299,2,0.000150,use base 'Class::MOP::Object';
0.000000,0,0.000000,
0.000014,1,0.000014,__PACKAGE__->meta->add_attribute('parent_registry' => (
0.000000,0,0.000000,reader    => 'get_parent_registry',
0.000000,0,0.000000,writer    => 'set_parent_registry',
0.000000,0,0.000000,predicate => 'has_parent_registry',
0.000000,0,0.000000,Class::MOP::_definition_context(),
0.000000,0,0.000000,));
0.000000,0,0.000000,
0.000000,0,0.000000,__PACKAGE__->meta->add_attribute('type_constraints' => (
0.000000,0,0.000000,reader  => 'type_constraints',
0.000008,1,0.000008,default => sub { {} },
0.000014,1,0.000014,Class::MOP::_definition_context(),
0.000000,0,0.000000,));
0.000000,0,0.000000,
0.000000,0,0.000000,sub new {
0.000002,1,0.000002,my $class = shift;
0.000009,1,0.000009,my $self  = $class->_new(@_);
0.000007,1,0.000007,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub has_type_constraint {
0.000052,30,0.000002,my ($self, $type_name) = @_;
0.000274,30,0.000009,($type_name and exists $self->type_constraints->{$type_name}) ? 1 : 0
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub get_type_constraint {
0.000089,53,0.000002,my ($self, $type_name) = @_;
0.000077,53,0.000001,return unless defined $type_name;
0.000454,53,0.000009,$self->type_constraints->{$type_name}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub add_type_constraint {
0.000037,23,0.000002,my ($self, $type) = @_;
0.000000,0,0.000000,
0.000403,23,0.000018,unless ( $type && blessed $type && $type->isa('Moose::Meta::TypeConstraint') ) {
0.000000,0,0.000000,require Moose;
0.000000,0,0.000000,Moose->throw_error("No type supplied / type is not a valid type constraint");
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000302,23,0.000013,$self->type_constraints->{$type->name} = $type;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub find_type_constraint {
0.000000,0,0.000000,my ($self, $type_name) = @_;
0.000000,0,0.000000,return $self->get_type_constraint($type_name)
0.000000,0,0.000000,if $self->has_type_constraint($type_name);
0.000000,0,0.000000,return $self->get_parent_registry->find_type_constraint($type_name)
0.000000,0,0.000000,if $self->has_parent_registry;
0.000000,0,0.000000,return;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000007,1,0.000007,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: registry for type constraints
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
