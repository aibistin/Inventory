# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Moose::Meta::TypeConstraint::Parameterizable;
0.000000,0,0.000000,BEGIN {
0.000008,1,0.000008,$Moose::Meta::TypeConstraint::Parameterizable::AUTHORITY = 'cpan:STEVAN';
0.000032,1,0.000032,}
0.000000,0,0.000000,{
0.000005,2,0.000003,$Moose::Meta::TypeConstraint::Parameterizable::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000033,2,0.000016,use strict;
0.000033,2,0.000016,use warnings;
0.000039,2,0.000020,use metaclass;
0.000000,0,0.000000,
0.000035,2,0.000018,use base 'Moose::Meta::TypeConstraint';
0.000036,2,0.000018,use Moose::Meta::TypeConstraint::Parameterized;
0.000030,2,0.000015,use Moose::Util::TypeConstraints ();
0.000000,0,0.000000,
0.000429,2,0.000215,use Carp 'confess';
0.000000,0,0.000000,
0.000016,1,0.000016,__PACKAGE__->meta->add_attribute('constraint_generator' => (
0.000000,0,0.000000,accessor  => 'constraint_generator',
0.000000,0,0.000000,predicate => 'has_constraint_generator',
0.000000,0,0.000000,Class::MOP::_definition_context(),
0.000000,0,0.000000,));
0.000000,0,0.000000,
0.000014,1,0.000014,__PACKAGE__->meta->add_attribute('inline_generator' => (
0.000000,0,0.000000,accessor  => 'inline_generator',
0.000000,0,0.000000,predicate => 'has_inline_generator',
0.000000,0,0.000000,Class::MOP::_definition_context(),
0.000000,0,0.000000,));
0.000000,0,0.000000,
0.000000,0,0.000000,sub generate_constraint_for {
0.000000,0,0.000000,my ($self, $type) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,return unless $self->has_constraint_generator;
0.000000,0,0.000000,
0.000000,0,0.000000,return $self->constraint_generator->($type->type_parameter)
0.000000,0,0.000000,if $type->is_subtype_of($self->name);
0.000000,0,0.000000,
0.000000,0,0.000000,return $self->_can_coerce_constraint_from($type)
0.000000,0,0.000000,if $self->has_coercion
0.000000,0,0.000000,&& $self->coercion->has_coercion_for_type($type->parent->name);
0.000000,0,0.000000,
0.000000,0,0.000000,return;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _can_coerce_constraint_from {
0.000000,0,0.000000,my ($self, $type) = @_;
0.000000,0,0.000000,my $coercion   = $self->coercion;
0.000000,0,0.000000,my $constraint = $self->constraint_generator->($type->type_parameter);
0.000000,0,0.000000,return sub {
0.000000,0,0.000000,local $_ = $coercion->coerce($_);
0.000000,0,0.000000,$constraint->(@_);
0.000000,0,0.000000,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub generate_inline_for {
0.000000,0,0.000000,my ($self, $type, $val) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,confess "Can't generate an inline constraint for $type, since none "
0.000000,0,0.000000,. "was defined"
0.000000,0,0.000000,unless $self->has_inline_generator;
0.000000,0,0.000000,
0.000000,0,0.000000,return '( do { ' . $self->inline_generator->( $self, $type, $val ) . ' } )';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _parse_type_parameter {
0.000000,0,0.000000,my ($self, $type_parameter) = @_;
0.000000,0,0.000000,return Moose::Util::TypeConstraints::find_or_create_isa_type_constraint($type_parameter);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub parameterize {
0.000000,0,0.000000,my ($self, $type_parameter) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my $contained_tc = $self->_parse_type_parameter($type_parameter);
0.000000,0,0.000000,
0.000000,0,0.000000,## The type parameter should be a subtype of the parent's type parameter
0.000000,0,0.000000,## if there is one.
0.000000,0,0.000000,
0.000000,0,0.000000,if(my $parent = $self->parent) {
0.000000,0,0.000000,if($parent->can('type_parameter')) {
0.000000,0,0.000000,unless ( $contained_tc->is_a_type_of($parent->type_parameter) ) {
0.000000,0,0.000000,require Moose;
0.000000,0,0.000000,Moose->throw_error("$type_parameter is not a subtype of ".$parent->type_parameter);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,if ( $contained_tc->isa('Moose::Meta::TypeConstraint') ) {
0.000000,0,0.000000,my $tc_name = $self->name . '[' . $contained_tc->name . ']';
0.000000,0,0.000000,return Moose::Meta::TypeConstraint::Parameterized->new(
0.000000,0,0.000000,name               => $tc_name,
0.000000,0,0.000000,parent             => $self,
0.000000,0,0.000000,type_parameter     => $contained_tc,
0.000000,0,0.000000,parameterized_from => $self,
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,require Moose;
0.000000,0,0.000000,Moose->throw_error("The type parameter must be a Moose meta type");
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000007,1,0.000007,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Type constraints which can take a parameter (ArrayRef)
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
