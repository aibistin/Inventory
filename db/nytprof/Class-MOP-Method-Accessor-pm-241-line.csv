# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,
0.000000,0,0.000000,package Class::MOP::Method::Accessor;
0.000000,0,0.000000,BEGIN {
0.000008,1,0.000008,$Class::MOP::Method::Accessor::AUTHORITY = 'cpan:STEVAN';
0.000032,1,0.000032,}
0.000000,0,0.000000,{
0.000005,2,0.000003,$Class::MOP::Method::Accessor::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000032,2,0.000016,use strict;
0.000033,2,0.000017,use warnings;
0.000000,0,0.000000,
0.000035,2,0.000017,use Carp         'confess';
0.000033,2,0.000016,use Scalar::Util 'blessed', 'weaken';
0.000035,2,0.000017,use Try::Tiny;
0.000000,0,0.000000,
0.001111,2,0.000556,use base 'Class::MOP::Method::Generated';
0.000000,0,0.000000,
0.000000,0,0.000000,sub new {
0.000321,202,0.000002,my $class   = shift;
0.000820,202,0.000004,my %options = @_;
0.000000,0,0.000000,
0.000343,202,0.000002,(exists $options{attribute})
0.000000,0,0.000000,|| confess "You must supply an attribute to construct with";
0.000000,0,0.000000,
0.000313,202,0.000002,(exists $options{accessor_type})
0.000000,0,0.000000,|| confess "You must supply an accessor_type to construct with";
0.000000,0,0.000000,
0.002597,202,0.000013,(blessed($options{attribute}) && $options{attribute}->isa('Class::MOP::Attribute'))
0.000000,0,0.000000,|| confess "You must supply an attribute which is a 'Class::MOP::Attribute' instance";
0.000000,0,0.000000,
0.000350,202,0.000002,($options{package_name} && $options{name})
0.000000,0,0.000000,|| confess "You must supply the package_name and name parameters $Class::MOP::Method::UPGRADE_ERROR_TEXT";
0.000000,0,0.000000,
0.001115,202,0.000006,my $self = $class->_new(\%options);
0.000000,0,0.000000,
0.000000,0,0.000000,# we don't want this creating
0.000000,0,0.000000,# a cycle in the code, if not
0.000000,0,0.000000,# needed
0.001549,202,0.000008,weaken($self->{'attribute'});
0.000000,0,0.000000,
0.001360,202,0.000007,$self->_initialize_body;
0.000000,0,0.000000,
0.001177,202,0.000006,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _new {
0.000399,259,0.000002,my $class = shift;
0.000000,0,0.000000,
0.000590,259,0.000002,return Class::MOP::Class->initialize($class)->new_object(@_)
0.000000,0,0.000000,if $class ne __PACKAGE__;
0.000000,0,0.000000,
0.000430,245,0.000002,my $params = @_ == 1 ? $_[0] : {@_};
0.000000,0,0.000000,
0.002632,245,0.000011,return bless {
0.000000,0,0.000000,# inherited from Class::MOP::Method
0.000000,0,0.000000,body                 => $params->{body},
0.000000,0,0.000000,associated_metaclass => $params->{associated_metaclass},
0.000000,0,0.000000,package_name         => $params->{package_name},
0.000000,0,0.000000,name                 => $params->{name},
0.000000,0,0.000000,original_method      => $params->{original_method},
0.000000,0,0.000000,
0.000000,0,0.000000,# inherit from Class::MOP::Generated
0.000000,0,0.000000,is_inline            => $params->{is_inline} || 0,
0.000000,0,0.000000,definition_context   => $params->{definition_context},
0.000000,0,0.000000,
0.000000,0,0.000000,# defined in this class
0.000000,0,0.000000,attribute            => $params->{attribute},
0.000000,0,0.000000,accessor_type        => $params->{accessor_type},
0.000000,0,0.000000,} => $class;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,## accessors
0.000000,0,0.000000,
0.001406,250,0.000006,sub associated_attribute { (shift)->{'attribute'}     }
0.001089,202,0.000005,sub accessor_type        { (shift)->{'accessor_type'} }
0.000000,0,0.000000,
0.000000,0,0.000000,## factory
0.000000,0,0.000000,
0.000000,0,0.000000,sub _initialize_body {
0.000314,202,0.000002,my $self = shift;
0.000000,0,0.000000,
0.002295,202,0.000011,my $method_name = join "_" => (
0.000000,0,0.000000,'_generate',
0.000000,0,0.000000,$self->accessor_type,
0.000000,0,0.000000,'method',
0.000000,0,0.000000,($self->is_inline ? 'inline' : ())
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.001961,202,0.000010,$self->{'body'} = $self->$method_name();
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,## generators
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_accessor_method {
0.000033,22,0.000002,my $self = shift;
0.000107,22,0.000005,my $attr = $self->associated_attribute;
0.000000,0,0.000000,
0.000000,0,0.000000,return sub {
0.000000,0,0.000000,if (@_ >= 2) {
0.000000,0,0.000000,$attr->set_value($_[0], $_[1]);
0.000000,0,0.000000,}
0.000000,0,0.000000,$attr->get_value($_[0]);
0.000153,22,0.000007,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_accessor_method_inline {
0.000033,22,0.000001,my $self = shift;
0.000106,22,0.000005,my $attr = $self->associated_attribute;
0.000000,0,0.000000,
0.000000,0,0.000000,return try {
0.000387,22,0.000018,$self->_compile_code([
0.000000,0,0.000000,'sub {',
0.000000,0,0.000000,'if (@_ > 1) {',
0.000000,0,0.000000,$attr->_inline_set_value('$_[0]', '$_[1]'),
0.000000,0,0.000000,'}',
0.000000,0,0.000000,$attr->_inline_get_value('$_[0]'),
0.000000,0,0.000000,'}',
0.000000,0,0.000000,]);
0.000000,0,0.000000,}
0.000000,0,0.000000,catch {
0.000000,0,0.000000,confess "Could not generate inline accessor because : $_";
0.000323,22,0.000015,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_reader_method {
0.000078,53,0.000001,my $self = shift;
0.000260,53,0.000005,my $attr = $self->associated_attribute;
0.000000,0,0.000000,
0.000000,0,0.000000,return sub {
0.000020,12,0.000002,confess "Cannot assign a value to a read-only accessor"
0.000000,0,0.000000,if @_ > 1;
0.000120,12,0.000010,$attr->get_value($_[0]);
0.000371,53,0.000007,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_reader_method_inline {
0.000099,63,0.000002,my $self = shift;
0.000315,63,0.000005,my $attr = $self->associated_attribute;
0.000000,0,0.000000,
0.000000,0,0.000000,return try {
0.007594,63,0.000121,$self->_compile_code([
0.000000,0,0.000000,'sub {',
0.000000,0,0.000000,'if (@_ > 1) {',
0.000000,0,0.000000,# XXX: this is a hack, but our error stuff is terrible
0.000000,0,0.000000,$self->_inline_throw_error(
0.000000,0,0.000000,'"Cannot assign a value to a read-only accessor"',
0.000000,0,0.000000,'data => \@_'
0.000000,0,0.000000,) . ';',
0.000000,0,0.000000,'}',
0.000000,0,0.000000,$attr->_inline_get_value('$_[0]'),
0.000000,0,0.000000,'}',
0.000000,0,0.000000,]);
0.000000,0,0.000000,}
0.000000,0,0.000000,catch {
0.000000,0,0.000000,confess "Could not generate inline reader because : $_";
0.000935,63,0.000015,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _inline_throw_error {
0.000081,53,0.000002,my $self = shift;
0.000314,53,0.000006,return 'Carp::confess ' . $_[0];
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_writer_method {
0.000005,3,0.000002,my $self = shift;
0.000015,3,0.000005,my $attr = $self->associated_attribute;
0.000000,0,0.000000,
0.000000,0,0.000000,return sub {
0.000000,0,0.000000,$attr->set_value($_[0], $_[1]);
0.000029,3,0.000010,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_writer_method_inline {
0.000005,3,0.000002,my $self = shift;
0.000015,3,0.000005,my $attr = $self->associated_attribute;
0.000000,0,0.000000,
0.000000,0,0.000000,return try {
0.000040,3,0.000013,$self->_compile_code([
0.000000,0,0.000000,'sub {',
0.000000,0,0.000000,$attr->_inline_set_value('$_[0]', '$_[1]'),
0.000000,0,0.000000,'}',
0.000000,0,0.000000,]);
0.000000,0,0.000000,}
0.000000,0,0.000000,catch {
0.000000,0,0.000000,confess "Could not generate inline writer because : $_";
0.000046,3,0.000015,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_predicate_method {
0.000024,16,0.000001,my $self = shift;
0.000077,16,0.000005,my $attr = $self->associated_attribute;
0.000000,0,0.000000,
0.000000,0,0.000000,return sub {
0.000109,12,0.000009,$attr->has_value($_[0])
0.000108,16,0.000007,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_predicate_method_inline {
0.000031,20,0.000002,my $self = shift;
0.000098,20,0.000005,my $attr = $self->associated_attribute;
0.000000,0,0.000000,
0.000000,0,0.000000,return try {
0.000274,20,0.000014,$self->_compile_code([
0.000000,0,0.000000,'sub {',
0.000000,0,0.000000,$attr->_inline_has_value('$_[0]'),
0.000000,0,0.000000,'}',
0.000000,0,0.000000,]);
0.000000,0,0.000000,}
0.000000,0,0.000000,catch {
0.000000,0,0.000000,confess "Could not generate inline predicate because : $_";
0.000302,20,0.000015,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_clearer_method {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,my $attr = $self->associated_attribute;
0.000000,0,0.000000,
0.000000,0,0.000000,return sub {
0.000000,0,0.000000,$attr->clear_value($_[0])
0.000000,0,0.000000,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_clearer_method_inline {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,my $attr = $self->associated_attribute;
0.000000,0,0.000000,
0.000000,0,0.000000,return try {
0.000000,0,0.000000,$self->_compile_code([
0.000000,0,0.000000,'sub {',
0.000000,0,0.000000,$attr->_inline_clear_value('$_[0]'),
0.000000,0,0.000000,'}',
0.000000,0,0.000000,]);
0.000000,0,0.000000,}
0.000000,0,0.000000,catch {
0.000000,0,0.000000,confess "Could not generate inline clearer because : $_";
0.000000,0,0.000000,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Method Meta Object for accessors
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
