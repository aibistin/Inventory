# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,
0.000000,0,0.000000,package Moose::Meta::Method::Accessor;
0.000000,0,0.000000,BEGIN {
0.000008,1,0.000008,$Moose::Meta::Method::Accessor::AUTHORITY = 'cpan:STEVAN';
0.000031,1,0.000031,}
0.000000,0,0.000000,{
0.000005,2,0.000003,$Moose::Meta::Method::Accessor::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000032,2,0.000016,use strict;
0.000032,2,0.000016,use warnings;
0.000000,0,0.000000,
0.000036,2,0.000018,use Try::Tiny;
0.000000,0,0.000000,
0.000011,1,0.000011,use base 'Moose::Meta::Method',
0.000593,1,0.000593,'Class::MOP::Method::Accessor';
0.000000,0,0.000000,
0.000000,0,0.000000,# multiple inheritance is terrible
0.000000,0,0.000000,sub new {
0.000119,14,0.000008,goto &Class::MOP::Method::Accessor::new;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _new {
0.000109,14,0.000008,goto &Class::MOP::Method::Accessor::_new;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _error_thrower {
0.000016,10,0.000002,my $self = shift;
0.000124,10,0.000012,return $self->associated_attribute
0.000000,0,0.000000,if ref($self) && defined($self->associated_attribute);
0.000000,0,0.000000,return $self->SUPER::_error_thrower;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _compile_code {
0.000022,14,0.000002,my $self = shift;
0.000028,14,0.000002,my @args = @_;
0.000000,0,0.000000,try {
0.000140,14,0.000010,$self->SUPER::_compile_code(@args);
0.000000,0,0.000000,}
0.000000,0,0.000000,catch {
0.000000,0,0.000000,$self->throw_error(
0.000000,0,0.000000,'Could not create writer for '
0.000000,0,0.000000,. "'" . $self->associated_attribute->name . "' "
0.000000,0,0.000000,. 'because ' . $_,
0.000000,0,0.000000,error => $_,
0.000000,0,0.000000,);
0.000237,14,0.000017,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _eval_environment {
0.000023,14,0.000002,my $self = shift;
0.000172,14,0.000012,return $self->associated_attribute->_eval_environment;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _instance_is_inlinable {
0.000020,13,0.000002,my $self = shift;
0.000322,13,0.000025,return $self->associated_attribute->associated_class->instance_metaclass->is_inlinable;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_reader_method {
0.000014,9,0.000002,my $self = shift;
0.000126,9,0.000014,$self->_instance_is_inlinable ? $self->_generate_reader_method_inline(@_)
0.000000,0,0.000000,: $self->SUPER::_generate_reader_method(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_writer_method {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,$self->_instance_is_inlinable ? $self->_generate_writer_method_inline(@_)
0.000000,0,0.000000,: $self->SUPER::_generate_writer_method(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_accessor_method {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,$self->_instance_is_inlinable ? $self->_generate_accessor_method_inline(@_)
0.000000,0,0.000000,: $self->SUPER::_generate_accessor_method(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_predicate_method {
0.000006,4,0.000002,my $self = shift;
0.000059,4,0.000015,$self->_instance_is_inlinable ? $self->_generate_predicate_method_inline(@_)
0.000000,0,0.000000,: $self->SUPER::_generate_predicate_method(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _generate_clearer_method {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,$self->_instance_is_inlinable ? $self->_generate_clearer_method_inline(@_)
0.000000,0,0.000000,: $self->SUPER::_generate_clearer_method(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _writer_value_needs_copy {
0.000000,0,0.000000,shift->associated_attribute->_writer_value_needs_copy(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _inline_tc_code {
0.000000,0,0.000000,shift->associated_attribute->_inline_tc_code(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _inline_check_coercion {
0.000000,0,0.000000,shift->associated_attribute->_inline_check_coercion(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _inline_check_constraint {
0.000000,0,0.000000,shift->associated_attribute->_inline_check_constraint(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _inline_check_lazy {
0.000000,0,0.000000,shift->associated_attribute->_inline_check_lazy(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _inline_store_value {
0.000000,0,0.000000,shift->associated_attribute->_inline_instance_set(@_) . ';';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _inline_get_old_value_for_trigger {
0.000000,0,0.000000,shift->associated_attribute->_inline_get_old_value_for_trigger(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _inline_trigger {
0.000000,0,0.000000,shift->associated_attribute->_inline_trigger(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _get_value {
0.000000,0,0.000000,shift->associated_attribute->_inline_instance_get(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _has_value {
0.000000,0,0.000000,shift->associated_attribute->_inline_instance_has(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: A Moose Method metaclass for accessors
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
