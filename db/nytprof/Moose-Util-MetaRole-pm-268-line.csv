# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Moose::Util::MetaRole;
0.000000,0,0.000000,BEGIN {
0.000008,1,0.000008,$Moose::Util::MetaRole::AUTHORITY = 'cpan:STEVAN';
0.000031,1,0.000031,}
0.000000,0,0.000000,{
0.000005,2,0.000003,$Moose::Util::MetaRole::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000034,2,0.000017,use strict;
0.000035,2,0.000017,use warnings;
0.000036,2,0.000018,use Scalar::Util 'blessed';
0.000000,0,0.000000,
0.000035,2,0.000018,use Carp qw( croak );
0.000034,2,0.000017,use List::MoreUtils qw( all );
0.000034,2,0.000017,use List::Util qw( first );
0.000035,2,0.000018,use Moose::Deprecated;
0.000560,2,0.000280,use Scalar::Util qw( blessed );
0.000000,0,0.000000,
0.000000,0,0.000000,sub apply_metaroles {
0.000000,0,0.000000,my %args = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my $for = _metathing_for( $args{for} );
0.000000,0,0.000000,
0.000000,0,0.000000,if ( $for->isa('Moose::Meta::Role') ) {
0.000000,0,0.000000,return _make_new_metaclass( $for, $args{role_metaroles}, 'role' );
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,return _make_new_metaclass( $for, $args{class_metaroles}, 'class' );
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _metathing_for {
0.000000,0,0.000000,my $passed = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,my $found
0.000000,0,0.000000,= blessed $passed
0.000000,0,0.000000,? $passed
0.000000,0,0.000000,: Class::MOP::class_of($passed);
0.000000,0,0.000000,
0.000000,0,0.000000,return $found
0.000000,0,0.000000,if defined $found
0.000000,0,0.000000,&& blessed $found
0.000000,0,0.000000,&& (   $found->isa('Moose::Meta::Role')
0.000000,0,0.000000,|| $found->isa('Moose::Meta::Class') );
0.000000,0,0.000000,
0.000000,0,0.000000,local $Carp::CarpLevel = $Carp::CarpLevel + 1;
0.000000,0,0.000000,
0.000000,0,0.000000,my $error_start
0.000000,0,0.000000,= 'When using Moose::Util::MetaRole, you must pass a Moose class name,'
0.000000,0,0.000000,. ' role name, metaclass object, or metarole object.';
0.000000,0,0.000000,
0.000000,0,0.000000,if ( defined $found && blessed $found ) {
0.000000,0,0.000000,croak $error_start
0.000000,0,0.000000,. " You passed $passed, and we resolved this to a "
0.000000,0,0.000000,. ( blessed $found )
0.000000,0,0.000000,. ' object.';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,if ( defined $passed && !defined $found ) {
0.000000,0,0.000000,croak $error_start
0.000000,0,0.000000,. " You passed $passed, and this did not resolve to a metaclass or metarole."
0.000000,0,0.000000,. ' Maybe you need to call Moose->init_meta to initialize the metaclass first?';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,if ( !defined $passed ) {
0.000000,0,0.000000,croak $error_start
0.000000,0,0.000000,. " You passed an undef."
0.000000,0,0.000000,. ' Maybe you need to call Moose->init_meta to initialize the metaclass first?';
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _make_new_metaclass {
0.000000,0,0.000000,my $for     = shift;
0.000000,0,0.000000,my $roles   = shift;
0.000000,0,0.000000,my $primary = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,return $for unless keys %{$roles};
0.000000,0,0.000000,
0.000000,0,0.000000,my $new_metaclass
0.000000,0,0.000000,= exists $roles->{$primary}
0.000000,0,0.000000,? _make_new_class( ref $for, $roles->{$primary} )
0.000000,0,0.000000,: blessed $for;
0.000000,0,0.000000,
0.000000,0,0.000000,my %classes;
0.000000,0,0.000000,
0.000000,0,0.000000,for my $key ( grep { $_ ne $primary } keys %{$roles} ) {
0.000000,0,0.000000,my $attr = first {$_}
0.000000,0,0.000000,map { $for->meta->find_attribute_by_name($_) } (
0.000000,0,0.000000,$key . '_metaclass',
0.000000,0,0.000000,$key . '_class'
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,my $reader = $attr->get_read_method;
0.000000,0,0.000000,
0.000000,0,0.000000,$classes{ $attr->init_arg }
0.000000,0,0.000000,= _make_new_class( $for->$reader(), $roles->{$key} );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,my $new_meta = $new_metaclass->reinitialize( $for, %classes );
0.000000,0,0.000000,
0.000000,0,0.000000,return $new_meta;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub apply_base_class_roles {
0.000000,0,0.000000,my %args = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my $meta = _metathing_for( $args{for} || $args{for_class} );
0.000000,0,0.000000,croak 'You can only apply base class roles to a Moose class, not a role.'
0.000000,0,0.000000,if $meta->isa('Moose::Meta::Role');
0.000000,0,0.000000,
0.000000,0,0.000000,my $new_base = _make_new_class(
0.000000,0,0.000000,$meta->name,
0.000000,0,0.000000,$args{roles},
0.000000,0,0.000000,[ $meta->superclasses() ],
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,$meta->superclasses($new_base)
0.000000,0,0.000000,if $new_base ne $meta->name();
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _make_new_class {
0.000000,0,0.000000,my $existing_class = shift;
0.000000,0,0.000000,my $roles          = shift;
0.000000,0,0.000000,my $superclasses   = shift || [$existing_class];
0.000000,0,0.000000,
0.000000,0,0.000000,return $existing_class unless $roles;
0.000000,0,0.000000,
0.000000,0,0.000000,my $meta = Class::MOP::Class->initialize($existing_class);
0.000000,0,0.000000,
0.000000,0,0.000000,return $existing_class
0.000000,0,0.000000,if $meta->can('does_role') && all  { $meta->does_role($_) }
0.000000,0,0.000000,grep { !ref $_ } @{$roles};
0.000000,0,0.000000,
0.000000,0,0.000000,return Moose::Meta::Class->create_anon_class(
0.000000,0,0.000000,superclasses => $superclasses,
0.000000,0,0.000000,roles        => $roles,
0.000000,0,0.000000,cache        => 1,
0.000000,0,0.000000,)->name();
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Apply roles to any metaclass, as well as the object base class
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
