# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000034,2,0.000017,use strict;
0.000054,2,0.000027,use warnings;
0.000000,0,0.000000,
0.000000,0,0.000000,package namespace::autoclean;
0.000000,0,0.000000,BEGIN {
0.000007,1,0.000007,$namespace::autoclean::AUTHORITY = 'cpan:FLORA';
0.000035,1,0.000035,}
0.000000,0,0.000000,{
0.000005,2,0.000002,$namespace::autoclean::VERSION = '0.13';
0.000000,0,0.000000,}
0.000000,0,0.000000,# ABSTRACT: Keep imports out of your namespace
0.000000,0,0.000000,
0.000059,3,0.000020,use Class::MOP 0.80;
0.000042,2,0.000021,use B::Hooks::EndOfScope;
0.000049,2,0.000025,use List::Util qw( first );
0.000486,3,0.000162,use namespace::clean 0.20;
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,sub import {
0.000002,1,0.000002,my ($class, %args) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my $subcast = sub {
0.000000,0,0.000000,my $i = shift;
0.000000,0,0.000000,return $i if ref $i eq 'CODE';
0.000000,0,0.000000,return sub { $_ =~ $i } if ref $i eq 'Regexp';
0.000000,0,0.000000,return sub { $_ eq $i };
0.000003,1,0.000003,};
0.000000,0,0.000000,
0.000000,0,0.000000,my $runtest = sub {
0.000000,0,0.000000,my ($code, $method_name) = @_;
0.000000,0,0.000000,local $_ = $method_name;
0.000000,0,0.000000,return $code->();
0.000005,1,0.000005,};
0.000000,0,0.000000,
0.000002,1,0.000002,my $cleanee = exists $args{-cleanee} ? $args{-cleanee} : scalar caller;
0.000000,0,0.000000,
0.000000,0,0.000000,my @also = map { $subcast->($_) } (
0.000000,0,0.000000,exists $args{-also}
0.000002,1,0.000002,? (ref $args{-also} eq 'ARRAY' ? @{ $args{-also} } : $args{-also})
0.000000,0,0.000000,: ()
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,on_scope_end {
0.000010,1,0.000010,my $meta = Class::MOP::Class->initialize($cleanee);
0.000024,1,0.000024,my %methods = map { ($_ => 1) } $meta->get_method_list;
0.000012,1,0.000012,$methods{meta} = 1 if $meta->isa('Moose::Meta::Role') && Moose->VERSION < 0.90;
0.000002,1,0.000002,my %extra = ();
0.000000,0,0.000000,
0.000009,1,0.000009,for my $method (keys %methods) {
0.000005,3,0.000002,next if exists $extra{$_};
0.000031,3,0.000010,next unless first { $runtest->($_, $method) } @also;
0.000000,0,0.000000,$extra{ $method } = 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000027,1,0.000027,my @symbols = keys %{ $meta->get_all_package_symbols('CODE') };
0.000021,1,0.000021,namespace::clean->clean_subroutines($cleanee, keys %extra, grep { !$methods{$_} } @symbols);
0.000015,1,0.000015,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,1;
0.000000,0,0.000000,
0.000009,1,0.000009,__END__
