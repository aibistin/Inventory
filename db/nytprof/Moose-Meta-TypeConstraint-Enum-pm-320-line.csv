# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Moose::Meta::TypeConstraint::Enum;
0.000000,0,0.000000,BEGIN {
0.000008,1,0.000008,$Moose::Meta::TypeConstraint::Enum::AUTHORITY = 'cpan:STEVAN';
0.000033,1,0.000033,}
0.000000,0,0.000000,{
0.000005,2,0.000003,$Moose::Meta::TypeConstraint::Enum::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000035,2,0.000017,use strict;
0.000034,2,0.000017,use warnings;
0.000047,2,0.000023,use metaclass;
0.000000,0,0.000000,
0.000035,2,0.000017,use B;
0.000031,2,0.000016,use Moose::Util::TypeConstraints ();
0.000000,0,0.000000,
0.000526,2,0.000263,use base 'Moose::Meta::TypeConstraint';
0.000000,0,0.000000,
0.000014,1,0.000014,__PACKAGE__->meta->add_attribute('values' => (
0.000000,0,0.000000,accessor => 'values',
0.000000,0,0.000000,Class::MOP::_definition_context(),
0.000000,0,0.000000,));
0.000000,0,0.000000,
0.000013,1,0.000013,__PACKAGE__->meta->add_attribute('_inline_var_name' => (
0.000000,0,0.000000,accessor => '_inline_var_name',
0.000000,0,0.000000,Class::MOP::_definition_context(),
0.000000,0,0.000000,));
0.000000,0,0.000000,
0.000000,0,0.000000,my $inliner = sub {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,my $val  = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,return 'defined(' . $val . ') '
0.000000,0,0.000000,. '&& !ref(' . $val . ') '
0.000000,0,0.000000,. '&& $' . $self->_inline_var_name . '{' . $val . '}';
0.000003,1,0.000003,};
0.000000,0,0.000000,
0.000002,1,0.000002,my $var_suffix = 0;
0.000000,0,0.000000,
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,my ( $class, %args ) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,$args{parent} = Moose::Util::TypeConstraints::find_type_constraint('Str');
0.000000,0,0.000000,$args{inlined} = $inliner;
0.000000,0,0.000000,
0.000000,0,0.000000,if ( scalar @{ $args{values} } < 1 ) {
0.000000,0,0.000000,require Moose;
0.000000,0,0.000000,Moose->throw_error("You must have at least one value to enumerate through");
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,for (@{ $args{values} }) {
0.000000,0,0.000000,if (!defined($_)) {
0.000000,0,0.000000,require Moose;
0.000000,0,0.000000,Moose->throw_error("Enum values must be strings, not undef");
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif (ref($_)) {
0.000000,0,0.000000,require Moose;
0.000000,0,0.000000,Moose->throw_error("Enum values must be strings, not '$_'");
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,my %values = map { $_ => 1 } @{ $args{values} };
0.000000,0,0.000000,$args{constraint} = sub { $values{ $_[0] } };
0.000000,0,0.000000,
0.000000,0,0.000000,my $var_name = 'enums' . $var_suffix++;;
0.000000,0,0.000000,$args{_inline_var_name} = $var_name;
0.000000,0,0.000000,$args{inline_environment} = { '%' . $var_name => \%values };
0.000000,0,0.000000,
0.000000,0,0.000000,my $self = $class->SUPER::new(\%args);
0.000000,0,0.000000,
0.000000,0,0.000000,$self->compile_type_constraint()
0.000000,0,0.000000,unless $self->_has_compiled_type_constraint;
0.000000,0,0.000000,
0.000000,0,0.000000,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub equals {
0.000000,0,0.000000,my ( $self, $type_or_name ) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my $other = Moose::Util::TypeConstraints::find_type_constraint($type_or_name);
0.000000,0,0.000000,
0.000000,0,0.000000,return unless $other->isa(__PACKAGE__);
0.000000,0,0.000000,
0.000000,0,0.000000,my @self_values  = sort @{ $self->values };
0.000000,0,0.000000,my @other_values = sort @{ $other->values };
0.000000,0,0.000000,
0.000000,0,0.000000,return unless @self_values == @other_values;
0.000000,0,0.000000,
0.000000,0,0.000000,while ( @self_values ) {
0.000000,0,0.000000,my $value = shift @self_values;
0.000000,0,0.000000,my $other_value = shift @other_values;
0.000000,0,0.000000,
0.000000,0,0.000000,return unless $value eq $other_value;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub constraint {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,my %values = map { $_ => undef } @{ $self->values };
0.000000,0,0.000000,
0.000000,0,0.000000,return sub { exists $values{$_[0]} };
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub create_child_type {
0.000000,0,0.000000,my ($self, @args) = @_;
0.000000,0,0.000000,return Moose::Meta::TypeConstraint->new(@args, parent => $self);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000007,1,0.000007,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Type constraint for enumerated values.
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
