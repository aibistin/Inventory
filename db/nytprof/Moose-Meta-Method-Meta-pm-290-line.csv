# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,
0.000000,0,0.000000,package Moose::Meta::Method::Meta;
0.000000,0,0.000000,BEGIN {
0.000008,1,0.000008,$Moose::Meta::Method::Meta::AUTHORITY = 'cpan:STEVAN';
0.000032,1,0.000032,}
0.000000,0,0.000000,{
0.000005,2,0.000002,$Moose::Meta::Method::Meta::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000039,2,0.000019,use strict;
0.000035,2,0.000017,use warnings;
0.000000,0,0.000000,
0.000009,1,0.000009,use base 'Moose::Meta::Method',
0.000123,1,0.000123,'Class::MOP::Method::Meta';
0.000000,0,0.000000,
0.000000,0,0.000000,sub _is_caller_mop_internal {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,my ($caller) = @_;
0.000000,0,0.000000,return 1 if $caller =~ /^Moose(?:::|$)/;
0.000000,0,0.000000,return $self->SUPER::_is_caller_mop_internal($caller);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# XXX: ugh multiple inheritance
0.000000,0,0.000000,sub wrap {
0.000003,2,0.000002,my $class = shift;
0.000025,2,0.000012,return $class->Class::MOP::Method::Meta::wrap(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _make_compatible_with {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,return $self->Class::MOP::Method::Meta::_make_compatible_with(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: A Moose Method metaclass for C<meta> methods
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
