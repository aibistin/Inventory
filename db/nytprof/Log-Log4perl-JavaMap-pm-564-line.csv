# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Log::Log4perl::JavaMap;
0.000000,0,0.000000,
0.000036,2,0.000018,use Carp;
0.000035,2,0.000017,use strict;
0.000000,0,0.000000,
0.000293,2,0.000146,use constant _INTERNAL_DEBUG => 0;
0.000000,0,0.000000,
0.000008,1,0.000008,our %translate = (
0.000000,0,0.000000,'org.apache.log4j.ConsoleAppender' => 
0.000000,0,0.000000,'Log::Log4perl::JavaMap::ConsoleAppender',
0.000000,0,0.000000,'org.apache.log4j.FileAppender'    => 
0.000000,0,0.000000,'Log::Log4perl::JavaMap::FileAppender',
0.000000,0,0.000000,'org.apache.log4j.RollingFileAppender'    => 
0.000000,0,0.000000,'Log::Log4perl::JavaMap::RollingFileAppender',
0.000000,0,0.000000,'org.apache.log4j.TestBuffer'    => 
0.000000,0,0.000000,'Log::Log4perl::JavaMap::TestBuffer',
0.000000,0,0.000000,'org.apache.log4j.jdbc.JDBCAppender'    => 
0.000000,0,0.000000,'Log::Log4perl::JavaMap::JDBCAppender',
0.000000,0,0.000000,'org.apache.log4j.SyslogAppender'    => 
0.000000,0,0.000000,'Log::Log4perl::JavaMap::SyslogAppender',
0.000000,0,0.000000,'org.apache.log4j.NTEventLogAppender'    => 
0.000000,0,0.000000,'Log::Log4perl::JavaMap::NTEventLogAppender',
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000001,1,0.000001,our %user_defined;
0.000000,0,0.000000,
0.000000,0,0.000000,sub get {
0.000000,0,0.000000,my ($appender_name, $appender_data) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,print "Trying to map $appender_name\n" if _INTERNAL_DEBUG;
0.000000,0,0.000000,
0.000000,0,0.000000,$appender_data->{value} ||
0.000000,0,0.000000,die "ERROR: you didn't tell me how to implement your appender " .
0.000000,0,0.000000,"'$appender_name'";
0.000000,0,0.000000,
0.000000,0,0.000000,my $perl_class = $translate{$appender_data->{value}} || 
0.000000,0,0.000000,$user_defined{$appender_data->{value}} ||
0.000000,0,0.000000,die "ERROR:  I don't know how to make a '$appender_data->{value}' " .
0.000000,0,0.000000,"to implement your appender '$appender_name', that's not a " .
0.000000,0,0.000000,"supported class\n";
0.000000,0,0.000000,eval {
0.000000,0,0.000000,eval "require $perl_class";  #see 'perldoc -f require' for why two evals
0.000000,0,0.000000,die $@ if $@;
0.000000,0,0.000000,};
0.000000,0,0.000000,$@ and die "ERROR: trying to set appender for $appender_name to " .
0.000000,0,0.000000,"$appender_data->{value} using $perl_class failed\n$@  \n";
0.000000,0,0.000000,
0.000000,0,0.000000,my $app = $perl_class->new($appender_name, $appender_data);
0.000000,0,0.000000,return $app;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#an external api to the two hashes
0.000000,0,0.000000,sub translate {
0.000000,0,0.000000,my $java_class = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,return $translate{$java_class} || 
0.000000,0,0.000000,$user_defined{$java_class};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000005,1,0.000005,1;
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=encoding utf8
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 NAME
0.000000,0,0.000000,
0.000000,0,0.000000,Log::Log4perl::JavaMap - maps java log4j appenders to Log::Dispatch classes
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SYNOPSIS
0.000000,0,0.000000,
0.000000,0,0.000000,###############################
0.000000,0,0.000000,log4j.appender.FileAppndr1        = org.apache.log4j.FileAppender
0.000000,0,0.000000,log4j.appender.FileAppndr1.File   = /var/log/onetime.log
0.000000,0,0.000000,log4j.appender.FileAppndr1.Append = false
0.000000,0,0.000000,
0.000000,0,0.000000,log4j.appender.FileAppndr1.layout = org.apache.log4j.PatternLayout
0.000000,0,0.000000,log4j.appender.FileAppndr1.layout.ConversionPattern=%d %4r [%t] %-5p %c %x - %m%n
0.000000,0,0.000000,###############################
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 DESCRIPTION
0.000000,0,0.000000,
0.000000,0,0.000000,If somebody wants to create an appender called C<org.apache.log4j.ConsoleAppender>,
0.000000,0,0.000000,we want to translate it to Log::Dispatch::Screen, and then translate
0.000000,0,0.000000,the log4j options into Log::Dispatch parameters..
0.000000,0,0.000000,
0.000000,0,0.000000,=head2 What's Implemented
0.000000,0,0.000000,
0.000000,0,0.000000,(Note that you can always use the Log::Dispatch::* module.  By 'implemented'
0.000000,0,0.000000,I mean having a translation class that translates log4j options into
0.000000,0,0.000000,the Log::Dispatch options so you can use log4j rather than log4perl 
0.000000,0,0.000000,syntax in your config file.)
0.000000,0,0.000000,
0.000000,0,0.000000,Here's the list of appenders I see on the current (6/2002) log4j site.
0.000000,0,0.000000,
0.000000,0,0.000000,These are implemented
0.000000,0,0.000000,
0.000000,0,0.000000,ConsoleAppender     - Log::Dispatch::Screen
0.000000,0,0.000000,FileAppender        - Log::Dispatch::File
0.000000,0,0.000000,RollingFileAppender - Log::Dispatch::FileRotate (by Mark Pfeiffer)
0.000000,0,0.000000,JDBCAppender        - Log::Log4perl::Appender::DBI
0.000000,0,0.000000,SyslogAppender      - Log::Dispatch::Syslog
0.000000,0,0.000000,NTEventLogAppender  - Log::Dispatch::Win32EventLog
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,These should/will/might be implemented
0.000000,0,0.000000,
0.000000,0,0.000000,DailyRollingFileAppender - 
0.000000,0,0.000000,SMTPAppender     - Log::Dispatch::Email::MailSender
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,These might be implemented but they don't have corresponding classes
0.000000,0,0.000000,in Log::Dispatch (yet):
0.000000,0,0.000000,
0.000000,0,0.000000,NullAppender
0.000000,0,0.000000,TelnetAppender
0.000000,0,0.000000,
0.000000,0,0.000000,These might be simulated
0.000000,0,0.000000,
0.000000,0,0.000000,LF5Appender - use Tk?
0.000000,0,0.000000,ExternallyRolledFileAppender - catch a HUP instead?
0.000000,0,0.000000,
0.000000,0,0.000000,These will probably not be implemented
0.000000,0,0.000000,
0.000000,0,0.000000,AsyncAppender
0.000000,0,0.000000,JMSAppender
0.000000,0,0.000000,SocketAppender - (ships a serialized LoggingEvent to the server side)
0.000000,0,0.000000,SocketHubAppender
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 ROLL YOUR OWN
0.000000,0,0.000000,
0.000000,0,0.000000,Let's say you've in a mixed Java/Perl enviroment and you've
0.000000,0,0.000000,come up with some custom Java appender with behavior you want to 
0.000000,0,0.000000,use in both worlds, C<myorg.customAppender>.  You write a
0.000000,0,0.000000,Perl appender with the same behavior C<Myorg::CustomAppender>. You
0.000000,0,0.000000,want to use one config file accross both applications, so the
0.000000,0,0.000000,config file will have to say 'myorg.customAppender'.  But
0.000000,0,0.000000,the mapping from C<myorg.customAppender> to C<Myorg::CustomAppender>
0.000000,0,0.000000,isn't in this JavaMap class, so what do you do?
0.000000,0,0.000000,
0.000000,0,0.000000,In  your Perl code, before you call Log::Log4perl::init(), do this:
0.000000,0,0.000000,
0.000000,0,0.000000,$Log::Log4perl::JavaMap::user_defined{'myorg.customAppender'} = 
0.000000,0,0.000000,'Myorg::CustomAppender';
0.000000,0,0.000000,
0.000000,0,0.000000,and you can use 'myorg.customAppender' in your config file with
0.000000,0,0.000000,impunity.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SEE ALSO
0.000000,0,0.000000,
0.000000,0,0.000000,http://jakarta.apache.org/log4j/docs/
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 LICENSE
0.000000,0,0.000000,
0.000000,0,0.000000,Copyright 2002-2013 by Mike Schilli E<lt>m@perlmeister.comE<gt> 
0.000000,0,0.000000,and Kevin Goess E<lt>cpan@goess.orgE<gt>.
0.000000,0,0.000000,
0.000000,0,0.000000,This library is free software; you can redistribute it and/or modify
0.000000,0,0.000000,it under the same terms as Perl itself. 
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 AUTHOR
0.000000,0,0.000000,
0.000000,0,0.000000,Please contribute patches to the project on Github:
0.000000,0,0.000000,
0.000000,0,0.000000,http://github.com/mschilli/log4perl
0.000000,0,0.000000,
0.000000,0,0.000000,Send bug reports or requests for enhancements to the authors via our
0.000000,0,0.000000,
0.000000,0,0.000000,MAILING LIST (questions, bug reports, suggestions/patches): 
0.000000,0,0.000000,log4perl-devel@lists.sourceforge.net
0.000000,0,0.000000,
0.000000,0,0.000000,Authors (please contact them via the list above, not directly):
0.000000,0,0.000000,Mike Schilli <m@perlmeister.com>,
0.000000,0,0.000000,Kevin Goess <cpan@goess.org>
0.000000,0,0.000000,
0.000000,0,0.000000,Contributors (in alphabetical order):
0.000000,0,0.000000,Ateeq Altaf, Cory Bennett, Jens Berthold, Jeremy Bopp, Hutton
0.000000,0,0.000000,Davidson, Chris R. Donnelly, Matisse Enzer, Hugh Esco, Anthony
0.000000,0,0.000000,Foiani, James FitzGibbon, Carl Franks, Dennis Gregorovic, Andy
0.000000,0,0.000000,Grundman, Paul Harrington, Alexander Hartmaier  David Hull, 
0.000000,0,0.000000,Robert Jacobson, Jason Kohles, Jeff Macdonald, Markus Peter, 
0.000000,0,0.000000,Brett Rann, Peter Rabbitson, Erik Selberg, Aaron Straup Cope, 
0.000000,0,0.000000,Lars Thegler, David Viner, Mac Yang.
0.000000,0,0.000000,
