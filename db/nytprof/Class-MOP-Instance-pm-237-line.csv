# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,
0.000000,0,0.000000,package Class::MOP::Instance;
0.000000,0,0.000000,BEGIN {
0.000007,1,0.000007,$Class::MOP::Instance::AUTHORITY = 'cpan:STEVAN';
0.000034,1,0.000034,}
0.000000,0,0.000000,{
0.000005,2,0.000003,$Class::MOP::Instance::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000032,2,0.000016,use strict;
0.000039,2,0.000019,use warnings;
0.000000,0,0.000000,
0.000035,2,0.000017,use Scalar::Util 'isweak', 'weaken', 'blessed';
0.000000,0,0.000000,
0.001348,2,0.000674,use base 'Class::MOP::Object';
0.000000,0,0.000000,
0.000000,0,0.000000,# make this not a valid method name, to avoid (most) attribute conflicts
0.000002,1,0.000002,my $RESERVED_MOP_SLOT = '<<MOP>>';
0.000000,0,0.000000,
0.000000,0,0.000000,sub BUILDARGS {
0.000145,55,0.000003,my ($class, @args) = @_;
0.000000,0,0.000000,
0.000435,55,0.000008,if ( @args == 1 ) {
0.000000,0,0.000000,unshift @args, "associated_metaclass";
0.000000,0,0.000000,} elsif ( @args >= 2 && blessed($args[0]) && $args[0]->isa("Class::MOP::Class") ) {
0.000000,0,0.000000,# compat mode
0.000000,0,0.000000,my ( $meta, @attrs ) = @args;
0.000000,0,0.000000,@args = ( associated_metaclass => $meta, attributes => \@attrs );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000154,55,0.000003,my %options = @args;
0.000000,0,0.000000,# FIXME lazy_build
0.003240,509,0.000006,$options{slots} ||= [ map { $_->slots } @{ $options{attributes} || [] } ];
0.000441,55,0.000008,$options{slot_hash} = { map { $_ => undef } @{ $options{slots} } }; # FIXME lazy_build
0.000000,0,0.000000,
0.000314,55,0.000006,return \%options;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub new {
0.000093,55,0.000002,my $class = shift;
0.000316,55,0.000006,my $options = $class->BUILDARGS(@_);
0.000000,0,0.000000,
0.000000,0,0.000000,# FIXME replace with a proper constructor
0.000386,55,0.000007,my $instance = $class->_new(%$options);
0.000000,0,0.000000,
0.000000,0,0.000000,# FIXME weak_ref => 1,
0.000403,55,0.000007,weaken($instance->{'associated_metaclass'});
0.000000,0,0.000000,
0.000311,55,0.000006,return $instance;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _new {
0.000076,47,0.000002,my $class = shift;
0.000078,47,0.000002,return Class::MOP::Class->initialize($class)->new_object(@_)
0.000000,0,0.000000,if $class ne __PACKAGE__;
0.000000,0,0.000000,
0.000130,47,0.000003,my $params = @_ == 1 ? $_[0] : {@_};
0.000404,47,0.000009,return bless {
0.000000,0,0.000000,# NOTE:
0.000000,0,0.000000,# I am not sure that it makes
0.000000,0,0.000000,# sense to pass in the meta
0.000000,0,0.000000,# The ideal would be to just
0.000000,0,0.000000,# pass in the class name, but
0.000000,0,0.000000,# that is placing too much of
0.000000,0,0.000000,# an assumption on bless(),
0.000000,0,0.000000,# which is *probably* a safe
0.000000,0,0.000000,# assumption,.. but you can
0.000000,0,0.000000,# never tell <:)
0.000000,0,0.000000,'associated_metaclass' => $params->{associated_metaclass},
0.000000,0,0.000000,'attributes'           => $params->{attributes},
0.000000,0,0.000000,'slots'                => $params->{slots},
0.000000,0,0.000000,'slot_hash'            => $params->{slot_hash},
0.000000,0,0.000000,} => $class;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000332,43,0.000008,sub _class_name { $_[0]->{_class_name} ||= $_[0]->associated_metaclass->name }
0.000000,0,0.000000,
0.000000,0,0.000000,sub create_instance {
0.000073,43,0.000002,my $self = shift;
0.000404,43,0.000009,bless {}, $self->_class_name;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub clone_instance {
0.000000,0,0.000000,my ($self, $instance) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my $clone = $self->create_instance;
0.000000,0,0.000000,for my $attr ($self->get_all_attributes) {
0.000000,0,0.000000,next unless $attr->has_value($instance);
0.000000,0,0.000000,for my $slot ($attr->slots) {
0.000000,0,0.000000,my $val = $self->get_slot_value($instance, $slot);
0.000000,0,0.000000,$self->set_slot_value($clone, $slot, $val);
0.000000,0,0.000000,$self->weaken_slot_value($clone, $slot)
0.000000,0,0.000000,if $self->slot_value_is_weak($instance, $slot);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,$self->_set_mop_slot($clone, $self->_get_mop_slot($instance))
0.000000,0,0.000000,if $self->_has_mop_slot($instance);
0.000000,0,0.000000,
0.000000,0,0.000000,return $clone;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# operations on meta instance
0.000000,0,0.000000,
0.000000,0,0.000000,sub get_all_slots {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,return @{$self->{'slots'}};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub get_all_attributes {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,return @{$self->{attributes}};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub is_valid_slot {
0.000000,0,0.000000,my ($self, $slot_name) = @_;
0.000000,0,0.000000,exists $self->{'slot_hash'}->{$slot_name};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# operations on created instances
0.000000,0,0.000000,
0.000000,0,0.000000,sub get_slot_value {
0.000022,12,0.000002,my ($self, $instance, $slot_name) = @_;
0.000062,12,0.000005,$instance->{$slot_name};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub set_slot_value {
0.000432,241,0.000002,my ($self, $instance, $slot_name, $value) = @_;
0.002505,241,0.000010,$instance->{$slot_name} = $value;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub initialize_slot {
0.000000,0,0.000000,my ($self, $instance, $slot_name) = @_;
0.000000,0,0.000000,return;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub deinitialize_slot {
0.000000,0,0.000000,my ( $self, $instance, $slot_name ) = @_;
0.000000,0,0.000000,delete $instance->{$slot_name};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub initialize_all_slots {
0.000000,0,0.000000,my ($self, $instance) = @_;
0.000000,0,0.000000,foreach my $slot_name ($self->get_all_slots) {
0.000000,0,0.000000,$self->initialize_slot($instance, $slot_name);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub deinitialize_all_slots {
0.000000,0,0.000000,my ($self, $instance) = @_;
0.000000,0,0.000000,foreach my $slot_name ($self->get_all_slots) {
0.000000,0,0.000000,$self->deinitialize_slot($instance, $slot_name);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub is_slot_initialized {
0.000024,12,0.000002,my ($self, $instance, $slot_name, $value) = @_;
0.000064,12,0.000005,exists $instance->{$slot_name};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub weaken_slot_value {
0.000000,0,0.000000,my ($self, $instance, $slot_name) = @_;
0.000000,0,0.000000,weaken $instance->{$slot_name};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub slot_value_is_weak {
0.000000,0,0.000000,my ($self, $instance, $slot_name) = @_;
0.000000,0,0.000000,isweak $instance->{$slot_name};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub strengthen_slot_value {
0.000000,0,0.000000,my ($self, $instance, $slot_name) = @_;
0.000000,0,0.000000,$self->set_slot_value($instance, $slot_name, $self->get_slot_value($instance, $slot_name));
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub rebless_instance_structure {
0.000000,0,0.000000,my ($self, $instance, $metaclass) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,# we use $_[1] here because of t/cmop/rebless_overload.t regressions
0.000000,0,0.000000,# on 5.8.8
0.000000,0,0.000000,bless $_[1], $metaclass->name;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub is_dependent_on_superclasses {
0.000289,55,0.000005,return; # for meta instances that require updates on inherited slot changes
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _get_mop_slot {
0.000000,0,0.000000,my ($self, $instance) = @_;
0.000000,0,0.000000,$self->get_slot_value($instance, $RESERVED_MOP_SLOT);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _has_mop_slot {
0.000000,0,0.000000,my ($self, $instance) = @_;
0.000000,0,0.000000,$self->is_slot_initialized($instance, $RESERVED_MOP_SLOT);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _set_mop_slot {
0.000000,0,0.000000,my ($self, $instance, $value) = @_;
0.000000,0,0.000000,$self->set_slot_value($instance, $RESERVED_MOP_SLOT, $value);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _clear_mop_slot {
0.000000,0,0.000000,my ($self, $instance) = @_;
0.000000,0,0.000000,$self->deinitialize_slot($instance, $RESERVED_MOP_SLOT);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# inlinable operation snippets
0.000000,0,0.000000,
0.000512,108,0.000005,sub is_inlinable { 1 }
0.000000,0,0.000000,
0.000000,0,0.000000,sub inline_create_instance {
0.000053,31,0.000002,my ($self, $class_variable) = @_;
0.000163,31,0.000005,'bless {} => ' . $class_variable;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub inline_slot_access {
0.000823,519,0.000002,my ($self, $instance, $slot_name) = @_;
0.003243,519,0.000006,sprintf q[%s->{"%s"}], $instance, quotemeta($slot_name);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub inline_get_is_lvalue { 1 }
0.000000,0,0.000000,
0.000000,0,0.000000,sub inline_get_slot_value {
0.000156,85,0.000002,my ($self, $instance, $slot_name) = @_;
0.000669,85,0.000008,$self->inline_slot_access($instance, $slot_name);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub inline_set_slot_value {
0.000767,410,0.000002,my ($self, $instance, $slot_name, $value) = @_;
0.010693,410,0.000026,$self->inline_slot_access($instance, $slot_name) . " = $value",
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub inline_initialize_slot {
0.000000,0,0.000000,my ($self, $instance, $slot_name) = @_;
0.000000,0,0.000000,return '';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub inline_deinitialize_slot {
0.000000,0,0.000000,my ($self, $instance, $slot_name) = @_;
0.000000,0,0.000000,"delete " . $self->inline_slot_access($instance, $slot_name);
0.000000,0,0.000000,}
0.000000,0,0.000000,sub inline_is_slot_initialized {
0.000043,22,0.000002,my ($self, $instance, $slot_name) = @_;
0.000195,22,0.000009,"exists " . $self->inline_slot_access($instance, $slot_name);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub inline_weaken_slot_value {
0.000004,2,0.000002,my ($self, $instance, $slot_name) = @_;
0.000020,2,0.000010,sprintf "Scalar::Util::weaken( %s )", $self->inline_slot_access($instance, $slot_name);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub inline_strengthen_slot_value {
0.000000,0,0.000000,my ($self, $instance, $slot_name) = @_;
0.000000,0,0.000000,$self->inline_set_slot_value($instance, $slot_name, $self->inline_slot_access($instance, $slot_name));
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub inline_rebless_instance_structure {
0.000000,0,0.000000,my ($self, $instance, $class_variable) = @_;
0.000000,0,0.000000,"bless $instance => $class_variable";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _inline_get_mop_slot {
0.000000,0,0.000000,my ($self, $instance) = @_;
0.000000,0,0.000000,$self->inline_get_slot_value($instance, $RESERVED_MOP_SLOT);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _inline_set_mop_slot {
0.000000,0,0.000000,my ($self, $instance, $value) = @_;
0.000000,0,0.000000,$self->inline_set_slot_value($instance, $RESERVED_MOP_SLOT, $value);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _inline_clear_mop_slot {
0.000000,0,0.000000,my ($self, $instance) = @_;
0.000000,0,0.000000,$self->inline_deinitialize_slot($instance, $RESERVED_MOP_SLOT);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Instance Meta Object
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
