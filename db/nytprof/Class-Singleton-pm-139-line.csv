# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,#============================================================================
0.000000,0,0.000000,#
0.000000,0,0.000000,# Class::Singleton.pm
0.000000,0,0.000000,#
0.000000,0,0.000000,# Implementation of a "singleton" module which ensures that a class has
0.000000,0,0.000000,# only one instance and provides global access to it.  For a description 
0.000000,0,0.000000,# of the Singleton class, see "Design Patterns", Gamma et al, Addison-
0.000000,0,0.000000,# Wesley, 1995, ISBN 0-201-63361-2
0.000000,0,0.000000,#
0.000000,0,0.000000,# Written by Andy Wardley <abw@wardley.org>
0.000000,0,0.000000,#
0.000000,0,0.000000,# Copyright (C) 1998-2008 Andy Wardley.  All Rights Reserved.
0.000000,0,0.000000,# Copyright (C) 1998 Canon Research Centre Europe Ltd.
0.000000,0,0.000000,#
0.000000,0,0.000000,#============================================================================
0.000000,0,0.000000,
0.000000,0,0.000000,package Class::Singleton;
0.000011,1,0.000011,require 5.004;
0.000032,2,0.000016,use strict;
0.000066,2,0.000033,use warnings;
0.000000,0,0.000000,
0.000001,1,0.000001,our $VERSION = 1.4;
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,#========================================================================
0.000000,0,0.000000,#
0.000000,0,0.000000,# instance()
0.000000,0,0.000000,#
0.000000,0,0.000000,# Module constructor.  Creates an Class::Singleton (or derived) instance 
0.000000,0,0.000000,# if one doesn't already exist.  The instance reference is stored in the
0.000000,0,0.000000,# _instance variable of the $class package.  This means that classes 
0.000000,0,0.000000,# derived from Class::Singleton will have the variables defined in *THEIR*
0.000000,0,0.000000,# package, rather than the Class::Singleton package.  The impact of this is
0.000000,0,0.000000,# that you can create any number of classes derived from Class::Singleton
0.000000,0,0.000000,# and create a single instance of each one.  If the _instance variable
0.000000,0,0.000000,# was stored in the Class::Singleton package, you could only instantiate 
0.000000,0,0.000000,# *ONE* object of *ANY* class derived from Class::Singleton.  The first
0.000000,0,0.000000,# time the instance is created, the _new_instance() constructor is called 
0.000000,0,0.000000,# which simply returns a reference to a blessed hash.  This can be 
0.000000,0,0.000000,# overloaded for custom constructors.  Any addtional parameters passed to 
0.000000,0,0.000000,# instance() are forwarded to _new_instance().
0.000000,0,0.000000,#
0.000000,0,0.000000,# Returns a reference to the existing, or a newly created Class::Singleton
0.000000,0,0.000000,# object.  If the _new_instance() method returns an undefined value
0.000000,0,0.000000,# then the constructer is deemed to have failed.
0.000000,0,0.000000,#
0.000000,0,0.000000,#========================================================================
0.000000,0,0.000000,
0.000000,0,0.000000,sub instance {
0.000003,2,0.000002,my $class = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,# already got an object
0.000003,2,0.000001,return $class if ref $class;
0.000000,0,0.000000,
0.000000,0,0.000000,# we store the instance in the _instance variable in the $class package.
0.000085,2,0.000043,no strict 'refs';
0.000009,2,0.000004,my $instance = \${ "$class\::_instance" };
0.000017,2,0.000009,defined $$instance
0.000000,0,0.000000,? $$instance
0.000000,0,0.000000,: ($$instance = $class->_new_instance(@_));
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,#=======================================================================
0.000000,0,0.000000,# has_instance()
0.000000,0,0.000000,#
0.000000,0,0.000000,# Public method to return the current instance if it exists.
0.000000,0,0.000000,#=======================================================================
0.000000,0,0.000000,
0.000000,0,0.000000,sub has_instance {
0.000000,0,0.000000,my $class = shift;
0.000000,0,0.000000,$class = ref $class || $class;
0.000091,2,0.000046,no strict 'refs';
0.000000,0,0.000000,return ${"$class\::_instance"};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,#========================================================================
0.000000,0,0.000000,# _new_instance(...)
0.000000,0,0.000000,#
0.000000,0,0.000000,# Simple constructor which returns a hash reference blessed into the 
0.000000,0,0.000000,# current class.  May be overloaded to create non-hash objects or 
0.000000,0,0.000000,# handle any specific initialisation required.
0.000000,0,0.000000,#========================================================================
0.000000,0,0.000000,
0.000000,0,0.000000,sub _new_instance {
0.000000,0,0.000000,my $class = shift;
0.000000,0,0.000000,my %args  = @_ && ref $_[0] eq 'HASH' ? %{ $_[0] } : @_;
0.000000,0,0.000000,bless { %args }, $class;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
