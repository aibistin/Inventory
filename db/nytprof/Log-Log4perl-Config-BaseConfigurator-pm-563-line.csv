# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Log::Log4perl::Config::BaseConfigurator;
0.000000,0,0.000000,
0.000038,2,0.000019,use warnings;
0.000043,2,0.000021,use strict;
0.000603,2,0.000302,use constant _INTERNAL_DEBUG => 0;
0.000000,0,0.000000,
0.000003,1,0.000003,*eval_if_perl      = \&Log::Log4perl::Config::eval_if_perl;
0.000002,1,0.000002,*compile_if_perl   = \&Log::Log4perl::Config::compile_if_perl;
0.000002,1,0.000002,*leaf_path_to_hash = \&Log::Log4perl::Config::leaf_path_to_hash;
0.000000,0,0.000000,
0.000000,0,0.000000,################################################
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,################################################
0.000000,0,0.000000,my($class, %options) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my $self = { 
0.000000,0,0.000000,utf8 => 0,
0.000000,0,0.000000,%options,
0.000000,0,0.000000,};
0.000000,0,0.000000,
0.000000,0,0.000000,bless $self, $class;
0.000000,0,0.000000,
0.000000,0,0.000000,$self->file($self->{file}) if exists $self->{file};
0.000000,0,0.000000,$self->text($self->{text}) if exists $self->{text};
0.000000,0,0.000000,
0.000000,0,0.000000,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,################################################
0.000000,0,0.000000,sub text {
0.000000,0,0.000000,################################################
0.000000,0,0.000000,my($self, $text) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,# $text is an array of scalars (lines)
0.000000,0,0.000000,if(defined $text) {
0.000000,0,0.000000,if(ref $text eq "ARRAY") {
0.000000,0,0.000000,$self->{text} = $text;
0.000000,0,0.000000,} else {
0.000000,0,0.000000,$self->{text} = [split "\n", $text];
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return $self->{text};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,################################################
0.000000,0,0.000000,sub file {
0.000000,0,0.000000,################################################
0.000000,0,0.000000,my($self, $filename) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,open my $fh, "$filename" or die "Cannot open $filename ($!)";
0.000000,0,0.000000,
0.000000,0,0.000000,if( $self->{ utf8 } ) {
0.000000,0,0.000000,binmode $fh, ":utf8";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,$self->file_h_read( $fh );
0.000000,0,0.000000,close $fh;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,################################################
0.000000,0,0.000000,sub file_h_read {
0.000000,0,0.000000,################################################
0.000000,0,0.000000,my($self, $fh) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,# Dennis Gregorovic <dgregor@redhat.com> added this
0.000000,0,0.000000,# to protect apps which are tinkering with $/ globally.
0.000000,0,0.000000,local $/ = "\n";
0.000000,0,0.000000,
0.000000,0,0.000000,$self->{text} = [<$fh>];
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,################################################
0.000000,0,0.000000,sub parse {
0.000000,0,0.000000,################################################
0.000000,0,0.000000,die __PACKAGE__ . "::parse() is a virtual method. " .
0.000000,0,0.000000,"It must be implemented " .
0.000000,0,0.000000,"in a derived class (currently: ", ref(shift), ")";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,################################################
0.000000,0,0.000000,sub parse_post_process {
0.000000,0,0.000000,################################################
0.000000,0,0.000000,my($self, $data, $leaf_paths) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,#   [
0.000000,0,0.000000,#     'category',
0.000000,0,0.000000,#     'value',
0.000000,0,0.000000,#     'WARN, Logfile'
0.000000,0,0.000000,#   ],
0.000000,0,0.000000,#   [
0.000000,0,0.000000,#     'appender',
0.000000,0,0.000000,#     'Logfile',
0.000000,0,0.000000,#     'value',
0.000000,0,0.000000,#     'Log::Log4perl::Appender::File'
0.000000,0,0.000000,#   ],
0.000000,0,0.000000,#   [
0.000000,0,0.000000,#     'appender',
0.000000,0,0.000000,#     'Logfile',
0.000000,0,0.000000,#     'filename',
0.000000,0,0.000000,#     'value',
0.000000,0,0.000000,#     'test.log'
0.000000,0,0.000000,#   ],
0.000000,0,0.000000,#   [
0.000000,0,0.000000,#     'appender',
0.000000,0,0.000000,#     'Logfile',
0.000000,0,0.000000,#     'layout',
0.000000,0,0.000000,#     'value',
0.000000,0,0.000000,#     'Log::Log4perl::Layout::PatternLayout'
0.000000,0,0.000000,#   ],
0.000000,0,0.000000,#   [
0.000000,0,0.000000,#     'appender',
0.000000,0,0.000000,#     'Logfile',
0.000000,0,0.000000,#     'layout',
0.000000,0,0.000000,#     'ConversionPattern',
0.000000,0,0.000000,#     'value',
0.000000,0,0.000000,#     '%d %F{1} %L> %m %n'
0.000000,0,0.000000,#   ]
0.000000,0,0.000000,
0.000000,0,0.000000,for my $path ( @{ Log::Log4perl::Config::leaf_paths( $data )} ) {
0.000000,0,0.000000,
0.000000,0,0.000000,print "path=@$path\n" if _INTERNAL_DEBUG;
0.000000,0,0.000000,
0.000000,0,0.000000,if(0) {
0.000000,0,0.000000,} elsif( 
0.000000,0,0.000000,$path->[0] eq "appender" and
0.000000,0,0.000000,$path->[2] eq "trigger"
0.000000,0,0.000000,) {
0.000000,0,0.000000,my $ref = leaf_path_to_hash( $path, $data );
0.000000,0,0.000000,my $code = compile_if_perl( $$ref );
0.000000,0,0.000000,
0.000000,0,0.000000,if(_INTERNAL_DEBUG) {
0.000000,0,0.000000,if($code) {
0.000000,0,0.000000,print "Code compiled: $$ref\n";
0.000000,0,0.000000,} else {
0.000000,0,0.000000,print "Not compiled: $$ref\n";
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,$$ref = $code if defined $code;
0.000000,0,0.000000,} elsif (
0.000000,0,0.000000,$path->[0] eq "filter"
0.000000,0,0.000000,) {
0.000000,0,0.000000,# do nothing
0.000000,0,0.000000,} elsif (
0.000000,0,0.000000,$path->[0] eq "appender" and
0.000000,0,0.000000,$path->[2] eq "warp_message"
0.000000,0,0.000000,) {
0.000000,0,0.000000,# do nothing
0.000000,0,0.000000,} elsif (
0.000000,0,0.000000,$path->[0] eq "appender" and
0.000000,0,0.000000,$path->[3] eq "cspec" or
0.000000,0,0.000000,$path->[1] eq "cspec"
0.000000,0,0.000000,) {
0.000000,0,0.000000,# could be either
0.000000,0,0.000000,#    appender appndr layout cspec
0.000000,0,0.000000,# or 
0.000000,0,0.000000,#    PatternLayout cspec U value ...
0.000000,0,0.000000,#
0.000000,0,0.000000,# do nothing
0.000000,0,0.000000,} else {
0.000000,0,0.000000,my $ref = leaf_path_to_hash( $path, $data );
0.000000,0,0.000000,
0.000000,0,0.000000,if(_INTERNAL_DEBUG) {
0.000000,0,0.000000,print "Calling eval_if_perl on $$ref\n";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,$$ref = eval_if_perl( $$ref );
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return $data;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000005,1,0.000005,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
