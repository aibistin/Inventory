# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Eval::Closure::Sandbox_77;
0.000000,0,0.000000,sub {
0.000002,1,0.000002,my $defaults = ${$_[0]};
0.000000,0,0.000000,sub {
0.000000,0,0.000000,my $class = shift;
0.000000,0,0.000000,$class = Scalar::Util::blessed($class) || $class;
0.000000,0,0.000000,return Class::MOP::Class->initialize($class)->new_object(@_)
0.000000,0,0.000000,if $class ne 'Moose::Meta::Class';
0.000000,0,0.000000,my $params = @_ == 1 ? $_[0] : {@_};
0.000000,0,0.000000,my $instance = bless {} => $class;
0.000000,0,0.000000,if (exists $params->{'_methods'}) {
0.000000,0,0.000000,$instance->{"_methods"} = $params->{'_methods'};
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$instance->{"_methods"} = $defaults->[0]->($instance);
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'attribute_metaclass'}) {
0.000000,0,0.000000,$instance->{"attribute_metaclass"} = $params->{'attribute_metaclass'};
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$instance->{"attribute_metaclass"} = $defaults->[1];
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'attributes'}) {
0.000000,0,0.000000,$instance->{"attributes"} = $params->{'attributes'};
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$instance->{"attributes"} = $defaults->[2]->($instance);
0.000000,0,0.000000,}
0.000000,0,0.000000,{
0.000000,0,0.000000,$instance->{"authority"} = $defaults->[3]->($instance);
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'constructor_class'}) {
0.000000,0,0.000000,$instance->{"constructor_class"} = $params->{'constructor_class'};
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$instance->{"constructor_class"} = $defaults->[4];
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'constructor_name'}) {
0.000000,0,0.000000,$instance->{"constructor_name"} = $params->{'constructor_name'};
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$instance->{"constructor_name"} = $defaults->[5];
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'destructor_class'}) {
0.000000,0,0.000000,$instance->{"destructor_class"} = $params->{'destructor_class'};
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$instance->{"destructor_class"} = $defaults->[6];
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'error_class'}) {
0.000000,0,0.000000,$instance->{"error_class"} = $params->{'error_class'};
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$instance->{"error_class"} = $defaults->[7];
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'immutable_trait'}) {
0.000000,0,0.000000,$instance->{"immutable_trait"} = $params->{'immutable_trait'};
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$instance->{"immutable_trait"} = $defaults->[8];
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'instance_metaclass'}) {
0.000000,0,0.000000,$instance->{"instance_metaclass"} = $params->{'instance_metaclass'};
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$instance->{"instance_metaclass"} = $defaults->[9];
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'method_metaclass'}) {
0.000000,0,0.000000,$instance->{"method_metaclass"} = $params->{'method_metaclass'};
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$instance->{"method_metaclass"} = $defaults->[10];
0.000000,0,0.000000,}
0.000000,0,0.000000,{
0.000000,0,0.000000,$instance->{"namespace"} = $defaults->[11]->($instance);
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'package'}) {
0.000000,0,0.000000,$instance->{"package"} = $params->{'package'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'role_applications'}) {
0.000000,0,0.000000,$instance->{"role_applications"} = $params->{'role_applications'};
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$instance->{"role_applications"} = $defaults->[13]->($instance);
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'roles'}) {
0.000000,0,0.000000,$instance->{"roles"} = $params->{'roles'};
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$instance->{"roles"} = $defaults->[14]->($instance);
0.000000,0,0.000000,}
0.000000,0,0.000000,{
0.000000,0,0.000000,$instance->{"superclasses"} = $defaults->[15]->($instance);
0.000000,0,0.000000,}
0.000000,0,0.000000,{
0.000000,0,0.000000,$instance->{"version"} = $defaults->[16]->($instance);
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'wrapped_method_metaclass'}) {
0.000000,0,0.000000,$instance->{"wrapped_method_metaclass"} = $params->{'wrapped_method_metaclass'};
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$instance->{"wrapped_method_metaclass"} = $defaults->[17];
0.000000,0,0.000000,}
0.000000,0,0.000000,return $instance
0.000000,0,0.000000,}
0.000015,2,0.000008,}
0.000000,0,0.000000,;
