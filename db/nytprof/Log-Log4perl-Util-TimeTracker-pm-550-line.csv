# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,package Log::Log4perl::Util::TimeTracker;
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,
0.000052,2,0.000026,use 5.006;
0.000032,2,0.000016,use strict;
0.000036,2,0.000018,use warnings;
0.000033,2,0.000016,use Log::Log4perl::Util;
0.000076,2,0.000038,use Carp;
0.000000,0,0.000000,
0.000001,1,0.000001,our $TIME_HIRES_AVAILABLE;
0.000000,0,0.000000,
0.000000,0,0.000000,BEGIN {
0.000000,0,0.000000,# Check if we've got Time::HiRes. If not, don't make a big fuss,
0.000000,0,0.000000,# just set a flag so we know later on that we can't have fine-grained
0.000000,0,0.000000,# time stamps
0.000002,1,0.000002,$TIME_HIRES_AVAILABLE = 0;
0.000012,1,0.000012,if(Log::Log4perl::Util::module_available("Time::HiRes")) {
0.000002,1,0.000002,require Time::HiRes;
0.000001,1,0.000001,$TIME_HIRES_AVAILABLE = 1;
0.000000,0,0.000000,}
0.000404,1,0.000404,}
0.000000,0,0.000000,
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,##################################################
0.000003,2,0.000002,my $class = shift;
0.000003,2,0.000002,$class = ref ($class) || $class;
0.000000,0,0.000000,
0.000008,2,0.000004,my $self = {
0.000000,0,0.000000,reset_time            => undef,
0.000000,0,0.000000,@_,
0.000000,0,0.000000,};
0.000000,0,0.000000,
0.000005,2,0.000003,$self->{time_function} = \&_gettimeofday unless 
0.000000,0,0.000000,defined $self->{time_function};
0.000000,0,0.000000,
0.000005,2,0.000002,bless $self, $class;
0.000000,0,0.000000,
0.000012,2,0.000006,$self->reset();
0.000000,0,0.000000,
0.000011,2,0.000006,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,sub hires_available {
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,return $TIME_HIRES_AVAILABLE;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,sub _gettimeofday {
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,# Return secs and optionally msecs if we have Time::HiRes
0.000078,4,0.000019,if($TIME_HIRES_AVAILABLE) {
0.000000,0,0.000000,return (Time::HiRes::gettimeofday());
0.000000,0,0.000000,} else {
0.000000,0,0.000000,return (time(), 0);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,sub gettimeofday {
0.000000,0,0.000000,##################################################
0.000006,4,0.000002,my($self) = @_;
0.000000,0,0.000000,
0.000029,4,0.000007,my($seconds, $microseconds) = $self->{time_function}->();
0.000000,0,0.000000,
0.000006,4,0.000002,$microseconds = 0 if ! defined $microseconds;
0.000027,4,0.000007,return($seconds, $microseconds);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,sub reset {
0.000000,0,0.000000,##################################################
0.000004,2,0.000002,my($self) = @_;
0.000000,0,0.000000,
0.000014,2,0.000007,my $current_time = [$self->gettimeofday()];
0.000003,2,0.000002,$self->{reset_time} = $current_time;
0.000004,2,0.000002,$self->{last_call_time} = $current_time;
0.000000,0,0.000000,
0.000012,2,0.000006,return $current_time;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,sub time_diff {
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,my($time_from, $time_to) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my $seconds = $time_to->[0] -
0.000000,0,0.000000,$time_from->[0];
0.000000,0,0.000000,
0.000000,0,0.000000,my $milliseconds = int(( $time_to->[1] -
0.000000,0,0.000000,$time_from->[1] ) / 1000);
0.000000,0,0.000000,
0.000000,0,0.000000,if($milliseconds < 0) {
0.000000,0,0.000000,$milliseconds = 1000 + $milliseconds;
0.000000,0,0.000000,$seconds--;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return($seconds, $milliseconds);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,sub milliseconds {
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,my($self, $current_time) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,$current_time = [ $self->gettimeofday() ] unless
0.000000,0,0.000000,defined $current_time;
0.000000,0,0.000000,
0.000000,0,0.000000,my($seconds, $milliseconds) = time_diff(
0.000000,0,0.000000,$self->{reset_time}, 
0.000000,0,0.000000,$current_time);
0.000000,0,0.000000,
0.000000,0,0.000000,return $seconds*1000 + $milliseconds;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,sub delta_milliseconds {
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,my($self, $current_time) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,$current_time = [ $self->gettimeofday() ] unless
0.000000,0,0.000000,defined $current_time;
0.000000,0,0.000000,
0.000000,0,0.000000,my($seconds, $milliseconds) = time_diff(
0.000000,0,0.000000,$self->{last_call_time}, 
0.000000,0,0.000000,$current_time);
0.000000,0,0.000000,
0.000000,0,0.000000,$self->{last_call_time} = $current_time;
0.000000,0,0.000000,
0.000000,0,0.000000,return $seconds*1000 + $milliseconds;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
