# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package locale;
0.000000,0,0.000000,
0.000002,1,0.000002,our $VERSION = '1.02';
0.000178,2,0.000089,use Config;
0.000000,0,0.000000,
0.000002,1,0.000002,$Carp::Internal{ (__PACKAGE__) } = 1;
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 NAME
0.000000,0,0.000000,
0.000000,0,0.000000,locale - Perl pragma to use or avoid POSIX locales for built-in operations
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SYNOPSIS
0.000000,0,0.000000,
0.000000,0,0.000000,@x = sort @y;	# Unicode sorting order
0.000000,0,0.000000,{
0.000000,0,0.000000,use locale;
0.000000,0,0.000000,@x = sort @y;   # Locale-defined sorting order
0.000000,0,0.000000,}
0.000000,0,0.000000,@x = sort @y;	# Unicode sorting order again
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 DESCRIPTION
0.000000,0,0.000000,
0.000000,0,0.000000,This pragma tells the compiler to enable (or disable) the use of POSIX
0.000000,0,0.000000,locales for built-in operations (for example, LC_CTYPE for regular
0.000000,0,0.000000,expressions, LC_COLLATE for string comparison, and LC_NUMERIC for number
0.000000,0,0.000000,formatting).  Each "use locale" or "no locale"
0.000000,0,0.000000,affects statements to the end of the enclosing BLOCK.
0.000000,0,0.000000,
0.000000,0,0.000000,Starting in Perl 5.16, a hybrid mode for this pragma is available,
0.000000,0,0.000000,
0.000000,0,0.000000,use locale ':not_characters';
0.000000,0,0.000000,
0.000000,0,0.000000,which enables only the portions of locales that don't affect the character
0.000000,0,0.000000,set (that is, all except LC_COLLATE and LC_CTYPE).  This is useful when mixing
0.000000,0,0.000000,Unicode and locales, including UTF-8 locales.
0.000000,0,0.000000,
0.000000,0,0.000000,use locale ':not_characters';
0.000000,0,0.000000,use open ":locale";           # Convert I/O to/from Unicode
0.000000,0,0.000000,use POSIX qw(locale_h);       # Import the LC_ALL constant
0.000000,0,0.000000,setlocale(LC_ALL, "");        # Required for the next statement
0.000000,0,0.000000,# to take effect
0.000000,0,0.000000,printf "%.2f\n", 12345.67'    # Locale-defined formatting
0.000000,0,0.000000,@x = sort @y;                 # Unicode-defined sorting order.
0.000000,0,0.000000,# (Note that you will get better
0.000000,0,0.000000,# results using Unicode::Collate.)
0.000000,0,0.000000,
0.000000,0,0.000000,See L<perllocale> for more detailed information on how Perl supports
0.000000,0,0.000000,locales.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 NOTE
0.000000,0,0.000000,
0.000000,0,0.000000,If your system does not support locales, then loading this module will
0.000000,0,0.000000,cause the program to die with a message:
0.000000,0,0.000000,
0.000000,0,0.000000,"Your vendor does not support locales, you cannot use the locale
0.000000,0,0.000000,module."
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
0.000000,0,0.000000,
0.000000,0,0.000000,# A separate bit is used for each of the two forms of the pragma, as they are
0.000000,0,0.000000,# mostly independent, and interact with each other and the unicode_strings
0.000000,0,0.000000,# feature.  This allows for fast determination of which one(s) of the three
0.000000,0,0.000000,# are to be used at any given point, and no code has to be written to deal
0.000000,0,0.000000,# with coming in and out of scopes--it falls automatically out from the hint
0.000000,0,0.000000,# handling
0.000000,0,0.000000,
0.000001,1,0.000001,$locale::hint_bits = 0x4;
0.000001,1,0.000001,$locale::not_chars_hint_bits = 0x10;
0.000000,0,0.000000,
0.000000,0,0.000000,sub import {
0.000003,2,0.000001,shift;  # should be 'locale'; not checked
0.000000,0,0.000000,
0.000018,2,0.000009,if(!$Config{d_setlocale}) {
0.000000,0,0.000000,## No locale support found on this Perl, giving up:
0.000000,0,0.000000,die('Your vendor does not support locales, you cannot use the locale module.');
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,2,0.000001,my $found_not_chars = 0;
0.000007,2,0.000003,while (defined (my $arg = shift)) {
0.000000,0,0.000000,if ($arg eq ":not_characters") {
0.000000,0,0.000000,$^H |= $locale::not_chars_hint_bits;
0.000000,0,0.000000,
0.000000,0,0.000000,# This form of the pragma overrides the other
0.000000,0,0.000000,$^H &= ~$locale::hint_bits;
0.000000,0,0.000000,$found_not_chars = 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,Carp::croak("Unknown parameter '$arg' to 'use locale'");
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# Use the plain form if not doing the :not_characters one.
0.000013,2,0.000007,$^H |= $locale::hint_bits unless $found_not_chars;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub unimport {
0.000000,0,0.000000,$^H &= ~($locale::hint_bits|$locale::not_chars_hint_bits);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,1;
