# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,package Log::Log4perl::Filter;
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,
0.000053,2,0.000026,use 5.006;
0.000033,2,0.000016,use strict;
0.000033,2,0.000017,use warnings;
0.000000,0,0.000000,
0.000033,2,0.000017,use Log::Log4perl::Level;
0.000040,2,0.000020,use Log::Log4perl::Config;
0.000000,0,0.000000,
0.000407,2,0.000204,use constant _INTERNAL_DEBUG => 0;
0.000000,0,0.000000,
0.000002,1,0.000002,our %FILTERS_DEFINED = ();
0.000000,0,0.000000,
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,my($class, $name, $action) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,print "Creating filter $name\n" if _INTERNAL_DEBUG;
0.000000,0,0.000000,
0.000000,0,0.000000,my $self = { name => $name };
0.000000,0,0.000000,bless $self, $class;
0.000000,0,0.000000,
0.000000,0,0.000000,if(ref($action) eq "CODE") {
0.000000,0,0.000000,# it's a code ref
0.000000,0,0.000000,$self->{ok} = $action;
0.000000,0,0.000000,} else {
0.000000,0,0.000000,# it's something else
0.000000,0,0.000000,die "Code for ($name/$action) not properly defined";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,sub register {         # Register a filter by name
0.000000,0,0.000000,# (Passed on to subclasses)
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,my($self) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,by_name($self->{name}, $self);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,sub by_name {        # Get/Set a filter object by name
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,my($name, $value) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,if(defined $value) {
0.000000,0,0.000000,$FILTERS_DEFINED{$name} = $value;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,if(exists $FILTERS_DEFINED{$name}) {
0.000000,0,0.000000,return $FILTERS_DEFINED{$name};
0.000000,0,0.000000,} else {
0.000000,0,0.000000,return undef;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,sub reset {
0.000000,0,0.000000,##################################################
0.000013,2,0.000007,%FILTERS_DEFINED = ();
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,sub ok {
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,my($self, %p) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,print "Calling $self->{name}'s ok method\n" if _INTERNAL_DEBUG;
0.000000,0,0.000000,
0.000000,0,0.000000,# Force filter classes to define their own
0.000000,0,0.000000,# ok(). Exempt are only sub {..} ok functions,
0.000000,0,0.000000,# defined in the conf file.
0.000000,0,0.000000,die "This is to be overridden by the filter" unless
0.000000,0,0.000000,defined $self->{ok};
0.000000,0,0.000000,
0.000000,0,0.000000,# What should we set the message in $_ to? The most logical
0.000000,0,0.000000,# approach seems to be to concat all parts together. If some
0.000000,0,0.000000,# filter wants to dissect the parts, it still can examine %p,
0.000000,0,0.000000,# which gets passed to the subroutine and contains the chunks
0.000000,0,0.000000,# in $p{message}.
0.000000,0,0.000000,# Split because of CVS
0.000000,0,0.000000,local($_) = join $
0.000000,0,0.000000,Log::Log4perl::JOIN_MSG_ARRAY_CHAR, @{$p{message}};
0.000000,0,0.000000,print "\$_ is '$_'\n" if _INTERNAL_DEBUG;
0.000000,0,0.000000,
0.000000,0,0.000000,my $decision = $self->{ok}->(%p);
0.000000,0,0.000000,
0.000000,0,0.000000,print "$self->{name}'s ok'ed: ", 
0.000000,0,0.000000,($decision ? "yes" : "no"), "\n" if _INTERNAL_DEBUG;
0.000000,0,0.000000,
0.000000,0,0.000000,return $decision;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
