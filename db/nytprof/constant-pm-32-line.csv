# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package constant;
0.000052,2,0.000026,use 5.008;
0.000031,2,0.000016,use strict;
0.000035,2,0.000017,use warnings::register;
0.000000,0,0.000000,
0.000168,2,0.000084,use vars qw($VERSION %declared);
0.000002,1,0.000002,$VERSION = '1.27';
0.000000,0,0.000000,
0.000000,0,0.000000,#=======================================================================
0.000000,0,0.000000,
0.000000,0,0.000000,# Some names are evil choices.
0.000007,1,0.000007,my %keywords = map +($_, 1), qw{ BEGIN INIT CHECK END DESTROY AUTOLOAD };
0.000002,1,0.000002,$keywords{UNITCHECK}++ if $] > 5.009;
0.000000,0,0.000000,
0.000009,1,0.000009,my %forced_into_main = map +($_, 1),
0.000000,0,0.000000,qw{ STDIN STDOUT STDERR ARGV ARGVOUT ENV INC SIG };
0.000000,0,0.000000,
0.000006,1,0.000006,my %forbidden = (%keywords, %forced_into_main);
0.000000,0,0.000000,
0.000012,1,0.000012,my $normal_constant_name = qr/^_?[^\W_0-9]\w*\z/;
0.000018,1,0.000018,my $tolerable = qr/^[A-Za-z_]\w*\z/;
0.000007,1,0.000007,my $boolean = qr/^[01]?\z/;
0.000000,0,0.000000,
0.000000,0,0.000000,BEGIN {
0.000000,0,0.000000,# We'd like to do use constant _CAN_PCS => $] > 5.009002
0.000000,0,0.000000,# but that's a bit tricky before we load the constant module :-)
0.000000,0,0.000000,# By doing this, we save 1 run time check for *every* call to import.
0.000098,2,0.000049,no strict 'refs';
0.000003,1,0.000003,my $const = $] > 5.009002;
0.000014,1,0.000014,*_CAN_PCS = sub () {$const};
0.000000,0,0.000000,
0.000002,1,0.000002,my $downgrade = $] < 5.015004; # && $] >= 5.008
0.000010,1,0.000010,*_DOWNGRADE = sub () { $downgrade };
0.000070,1,0.000070,}
0.000000,0,0.000000,
0.000000,0,0.000000,#=======================================================================
0.000000,0,0.000000,# import() - import symbols into user's namespace
0.000000,0,0.000000,#
0.000000,0,0.000000,# What we actually do is define a function in the caller's namespace
0.000000,0,0.000000,# which returns the value. The function we create will normally
0.000000,0,0.000000,# be inlined as a constant, thereby avoiding further sub calling 
0.000000,0,0.000000,# overhead.
0.000000,0,0.000000,#=======================================================================
0.000000,0,0.000000,sub import {
0.000136,80,0.000002,my $class = shift;
0.000126,80,0.000002,return unless @_;			# Ignore 'use constant;'
0.000110,80,0.000001,my $constants;
0.000131,80,0.000002,my $multiple  = ref $_[0];
0.000142,80,0.000002,my $pkg = caller;
0.000108,80,0.000001,my $flush_mro;
0.000106,80,0.000001,my $symtab;
0.000000,0,0.000000,
0.000229,80,0.000003,if (_CAN_PCS) {
0.000271,2,0.000135,no strict 'refs';
0.000201,80,0.000003,$symtab = \%{$pkg . '::'};
0.000000,0,0.000000,};
0.000000,0,0.000000,
0.000228,80,0.000003,if ( $multiple ) {
0.000000,0,0.000000,if (ref $_[0] ne 'HASH') {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,Carp::croak("Invalid reference type '".ref(shift)."' not 'HASH'");
0.000000,0,0.000000,}
0.000000,0,0.000000,$constants = shift;
0.000000,0,0.000000,} else {
0.000119,80,0.000001,unless (defined $_[0]) {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,Carp::croak("Can't use undef as constant name");
0.000000,0,0.000000,}
0.000194,80,0.000002,$constants->{+shift} = undef;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000316,80,0.000004,foreach my $name ( keys %$constants ) {
0.000000,0,0.000000,# Normal constant name
0.001183,80,0.000015,if ($name =~ $normal_constant_name and !$forbidden{$name}) {
0.000000,0,0.000000,# Everything is okay
0.000000,0,0.000000,
0.000000,0,0.000000,# Name forced into main, but we're not in main. Fatal.
0.000000,0,0.000000,} elsif ($forced_into_main{$name} and $pkg ne 'main') {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,Carp::croak("Constant name '$name' is forced into main::");
0.000000,0,0.000000,
0.000000,0,0.000000,# Starts with double underscore. Fatal.
0.000000,0,0.000000,} elsif ($name =~ /^__/) {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,Carp::croak("Constant name '$name' begins with '__'");
0.000000,0,0.000000,
0.000000,0,0.000000,# Maybe the name is tolerable
0.000000,0,0.000000,} elsif ($name =~ $tolerable) {
0.000000,0,0.000000,# Then we'll warn only if you've asked for warnings
0.000000,0,0.000000,if (warnings::enabled()) {
0.000000,0,0.000000,if ($keywords{$name}) {
0.000000,0,0.000000,warnings::warn("Constant name '$name' is a Perl keyword");
0.000000,0,0.000000,} elsif ($forced_into_main{$name}) {
0.000000,0,0.000000,warnings::warn("Constant name '$name' is " .
0.000000,0,0.000000,"forced into package main::");
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# Looks like a boolean
0.000000,0,0.000000,# use constant FRED == fred;
0.000000,0,0.000000,} elsif ($name =~ $boolean) {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,if (@_) {
0.000000,0,0.000000,Carp::croak("Constant name '$name' is invalid");
0.000000,0,0.000000,} else {
0.000000,0,0.000000,Carp::croak("Constant name looks like boolean value");
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,} else {
0.000000,0,0.000000,# Must have bad characters
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,Carp::croak("Constant name '$name' has invalid characters");
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,{
0.000631,82,0.000008,no strict 'refs';
0.000168,80,0.000002,my $full_name = "${pkg}::$name";
0.000200,80,0.000002,$declared{$full_name}++;
0.000261,80,0.000003,if ($multiple || @_ == 1) {
0.000135,80,0.000002,my $scalar = $multiple ? $constants->{$name} : $_[0];
0.000000,0,0.000000,
0.000000,0,0.000000,if (_DOWNGRADE) { # for 5.8 to 5.14
0.000000,0,0.000000,# Work around perl bug #31991: Sub names (actually glob
0.000000,0,0.000000,# names in general) ignore the UTF8 flag. So we have to
0.000000,0,0.000000,# turn it off to get the "right" symbol table entry.
0.000000,0,0.000000,utf8::is_utf8 $name and utf8::encode $name;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# The constant serves to optimise this entire block out on
0.000000,0,0.000000,# 5.8 and earlier.
0.000260,80,0.000003,if (_CAN_PCS && $symtab && !exists $symtab->{$name}) {
0.000000,0,0.000000,# No typeglob yet, so we can use a reference as space-
0.000000,0,0.000000,# efficient proxy for a constant subroutine
0.000000,0,0.000000,# The check in Perl_ck_rvconst knows that inlinable
0.000000,0,0.000000,# constants from cv_const_sv are read only. So we have to:
0.000540,77,0.000007,Internals::SvREADONLY($scalar, 1);
0.000151,77,0.000002,$symtab->{$name} = \$scalar;
0.000129,77,0.000002,++$flush_mro;
0.000000,0,0.000000,} else {
0.000023,3,0.000008,*$full_name = sub () { $scalar };
0.000000,0,0.000000,}
0.000000,0,0.000000,} elsif (@_) {
0.000000,0,0.000000,my @list = @_;
0.000000,0,0.000000,*$full_name = sub () { @list };
0.000000,0,0.000000,} else {
0.000000,0,0.000000,*$full_name = sub () { };
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,# Flush the cache exactly once if we make any direct symbol table changes.
0.001057,80,0.000013,mro::method_changed_in($pkg) if _CAN_PCS && $flush_mro;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000009,1,0.000009,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
