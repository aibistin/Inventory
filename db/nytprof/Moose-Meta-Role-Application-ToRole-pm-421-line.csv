# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Moose::Meta::Role::Application::ToRole;
0.000000,0,0.000000,BEGIN {
0.000009,1,0.000009,$Moose::Meta::Role::Application::ToRole::AUTHORITY = 'cpan:STEVAN';
0.000036,1,0.000036,}
0.000000,0,0.000000,{
0.000005,2,0.000003,$Moose::Meta::Role::Application::ToRole::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000041,2,0.000021,use strict;
0.000033,2,0.000017,use warnings;
0.000040,2,0.000020,use metaclass;
0.000000,0,0.000000,
0.000037,2,0.000018,use Scalar::Util    'blessed';
0.000000,0,0.000000,
0.000675,2,0.000338,use base 'Moose::Meta::Role::Application';
0.000000,0,0.000000,
0.000000,0,0.000000,sub apply {
0.000000,0,0.000000,my ($self, $role1, $role2) = @_;
0.000000,0,0.000000,$self->SUPER::apply($role1, $role2);
0.000000,0,0.000000,$role2->add_role($role1);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub check_role_exclusions {
0.000000,0,0.000000,my ($self, $role1, $role2) = @_;
0.000000,0,0.000000,if ( $role2->excludes_role($role1->name) ) {
0.000000,0,0.000000,require Moose;
0.000000,0,0.000000,Moose->throw_error("Conflict detected: " . $role2->name . " excludes role '" . $role1->name . "'");
0.000000,0,0.000000,}
0.000000,0,0.000000,foreach my $excluded_role_name ($role1->get_excluded_roles_list) {
0.000000,0,0.000000,if ( $role2->does_role($excluded_role_name) ) {
0.000000,0,0.000000,require Moose;
0.000000,0,0.000000,Moose->throw_error("The role " . $role2->name . " does the excluded role '$excluded_role_name'");
0.000000,0,0.000000,}
0.000000,0,0.000000,$role2->add_excluded_roles($excluded_role_name);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub check_required_methods {
0.000000,0,0.000000,my ($self, $role1, $role2) = @_;
0.000000,0,0.000000,foreach my $required_method ($role1->get_required_method_list) {
0.000000,0,0.000000,my $required_method_name = $required_method->name;
0.000000,0,0.000000,
0.000000,0,0.000000,next if $self->is_aliased_method($required_method_name);
0.000000,0,0.000000,
0.000000,0,0.000000,$role2->add_required_methods($required_method)
0.000000,0,0.000000,unless $role2->find_method_by_name($required_method_name);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub check_required_attributes {
0.000000,0,0.000000,
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub apply_attributes {
0.000000,0,0.000000,my ($self, $role1, $role2) = @_;
0.000000,0,0.000000,foreach my $attribute_name ($role1->get_attribute_list) {
0.000000,0,0.000000,# it if it has one already
0.000000,0,0.000000,if ($role2->has_attribute($attribute_name) &&
0.000000,0,0.000000,# make sure we haven't seen this one already too
0.000000,0,0.000000,$role2->get_attribute($attribute_name) != $role1->get_attribute($attribute_name)) {
0.000000,0,0.000000,
0.000000,0,0.000000,my $role2_name = $role2->name;
0.000000,0,0.000000,
0.000000,0,0.000000,require Moose;
0.000000,0,0.000000,Moose->throw_error( "Role '"
0.000000,0,0.000000,. $role1->name
0.000000,0,0.000000,. "' has encountered an attribute conflict"
0.000000,0,0.000000,. " while being composed into '$role2_name'."
0.000000,0,0.000000,. " This is a fatal error and cannot be disambiguated."
0.000000,0,0.000000,. " The conflicting attribute is named '$attribute_name'." );
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$role2->add_attribute(
0.000000,0,0.000000,$role1->get_attribute($attribute_name)->clone
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub apply_methods {
0.000000,0,0.000000,my ( $self, $role1, $role2 ) = @_;
0.000000,0,0.000000,foreach my $method ( $role1->_get_local_methods ) {
0.000000,0,0.000000,
0.000000,0,0.000000,my $method_name = $method->name;
0.000000,0,0.000000,
0.000000,0,0.000000,next if $method->isa('Class::MOP::Method::Meta');
0.000000,0,0.000000,
0.000000,0,0.000000,unless ( $self->is_method_excluded($method_name) ) {
0.000000,0,0.000000,
0.000000,0,0.000000,my $role2_method = $role2->get_method($method_name);
0.000000,0,0.000000,if (   $role2_method
0.000000,0,0.000000,&& $role2_method->body != $method->body ) {
0.000000,0,0.000000,
0.000000,0,0.000000,# method conflicts between roles used to result in the method
0.000000,0,0.000000,# becoming a requirement but now are permitted just like
0.000000,0,0.000000,# for classes, hence no code in this branch anymore.
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$role2->add_method(
0.000000,0,0.000000,$method_name,
0.000000,0,0.000000,$method,
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,next unless $self->is_method_aliased($method_name);
0.000000,0,0.000000,
0.000000,0,0.000000,my $aliased_method_name = $self->get_method_aliases->{$method_name};
0.000000,0,0.000000,
0.000000,0,0.000000,my $role2_method = $role2->get_method($aliased_method_name);
0.000000,0,0.000000,
0.000000,0,0.000000,if (   $role2_method
0.000000,0,0.000000,&& $role2_method->body != $method->body ) {
0.000000,0,0.000000,
0.000000,0,0.000000,require Moose;
0.000000,0,0.000000,Moose->throw_error(
0.000000,0,0.000000,"Cannot create a method alias if a local method of the same name exists"
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,$role2->add_method(
0.000000,0,0.000000,$aliased_method_name,
0.000000,0,0.000000,$role1->get_method($method_name)
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,if ( !$role2->has_method($method_name) ) {
0.000000,0,0.000000,$role2->add_required_methods($method_name)
0.000000,0,0.000000,unless $self->is_method_excluded($method_name);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub apply_override_method_modifiers {
0.000000,0,0.000000,my ($self, $role1, $role2) = @_;
0.000000,0,0.000000,foreach my $method_name ($role1->get_method_modifier_list('override')) {
0.000000,0,0.000000,# it if it has one already then ...
0.000000,0,0.000000,if ($role2->has_method($method_name)) {
0.000000,0,0.000000,# if it is being composed into another role
0.000000,0,0.000000,# we have a conflict here, because you cannot
0.000000,0,0.000000,# combine an overridden method with a locally
0.000000,0,0.000000,# defined one
0.000000,0,0.000000,require Moose;
0.000000,0,0.000000,Moose->throw_error("Role '" . $role1->name . "' has encountered an 'override' method conflict " .
0.000000,0,0.000000,"during composition (A local method of the same name as been found). This " .
0.000000,0,0.000000,"is fatal error.");
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,# if we are a role, we need to make sure
0.000000,0,0.000000,# we don't have a conflict with the role
0.000000,0,0.000000,# we are composing into
0.000000,0,0.000000,if ($role2->has_override_method_modifier($method_name) &&
0.000000,0,0.000000,$role2->get_override_method_modifier($method_name) != $role2->get_override_method_modifier($method_name)) {
0.000000,0,0.000000,
0.000000,0,0.000000,require Moose;
0.000000,0,0.000000,Moose->throw_error("Role '" . $role1->name . "' has encountered an 'override' method conflict " .
0.000000,0,0.000000,"during composition (Two 'override' methods of the same name encountered). " .
0.000000,0,0.000000,"This is fatal error.");
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,# if there is no conflict,
0.000000,0,0.000000,# just add it to the role
0.000000,0,0.000000,$role2->add_override_method_modifier(
0.000000,0,0.000000,$method_name,
0.000000,0,0.000000,$role1->get_override_method_modifier($method_name)
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub apply_method_modifiers {
0.000000,0,0.000000,my ($self, $modifier_type, $role1, $role2) = @_;
0.000000,0,0.000000,my $add = "add_${modifier_type}_method_modifier";
0.000000,0,0.000000,my $get = "get_${modifier_type}_method_modifiers";
0.000000,0,0.000000,foreach my $method_name ($role1->get_method_modifier_list($modifier_type)) {
0.000000,0,0.000000,$role2->$add(
0.000000,0,0.000000,$method_name,
0.000000,0,0.000000,$_
0.000000,0,0.000000,) foreach $role1->$get($method_name);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Compose a role into another role
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
