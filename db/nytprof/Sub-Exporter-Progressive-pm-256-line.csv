# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Sub::Exporter::Progressive;
0.000000,0,0.000000,
0.000032,2,0.000016,use strict;
0.000042,2,0.000021,use warnings;
0.000000,0,0.000000,
0.000002,1,0.000002,our $VERSION = '0.001010';
0.000000,0,0.000000,
0.000034,2,0.000017,use Carp 'croak';
0.000078,2,0.000039,use List::Util 'first';
0.000000,0,0.000000,
0.000000,0,0.000000,sub import {
0.000007,3,0.000002,my ($self, @args) = @_;
0.000000,0,0.000000,
0.000006,3,0.000002,my $inner_target = caller;
0.000017,3,0.000006,my $export_data = sub_export_options($inner_target, @args);
0.000000,0,0.000000,
0.000004,3,0.000001,my $full_exporter;
0.000081,2,0.000041,no strict 'refs';
0.000019,3,0.000006,@{"${inner_target}::EXPORT_OK"} = @{$export_data->{exports}};
0.000020,3,0.000007,@{"${inner_target}::EXPORT"} = @{$export_data->{defaults}};
0.000015,3,0.000005,%{"${inner_target}::EXPORT_TAGS"} = %{$export_data->{tags}};
0.000000,0,0.000000,*{"${inner_target}::import"} = sub {
0.000582,2,0.000291,use strict;
0.000012,5,0.000002,my ($self, @args) = @_;
0.000000,0,0.000000,
0.000117,8,0.000015,if (first { ref || !m/ \A [:-]? \w+ \z /xm } @args) {
0.000000,0,0.000000,croak 'your usage of Sub::Exporter::Progressive requires Sub::Exporter to be installed'
0.000000,0,0.000000,unless eval { require Sub::Exporter };
0.000000,0,0.000000,$full_exporter ||= Sub::Exporter::build_exporter($export_data->{original});
0.000000,0,0.000000,
0.000000,0,0.000000,goto $full_exporter;
0.000040,3,0.000013,} elsif (defined(my $num = first { !ref and m/^\d/ } @args)) {
0.000000,0,0.000000,die "cannot export symbols with a leading digit: '$num'";
0.000000,0,0.000000,} else {
0.000010,5,0.000002,require Exporter;
0.000044,5,0.000009,s/ \A - /:/xm for @args;
0.000013,5,0.000003,@_ = ($self, @args);
0.000055,5,0.000011,goto \&Exporter::import;
0.000000,0,0.000000,}
0.000019,3,0.000006,};
0.000022,3,0.000007,return;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000002,1,0.000002,my $too_complicated = <<'DEATH';
0.000000,0,0.000000,You are using Sub::Exporter::Progressive, but the features your program uses from
0.000000,0,0.000000,Sub::Exporter cannot be implemented without Sub::Exporter, so you might as well
0.000000,0,0.000000,just use vanilla Sub::Exporter
0.000000,0,0.000000,DEATH
0.000000,0,0.000000,
0.000000,0,0.000000,sub sub_export_options {
0.000005,3,0.000002,my ($inner_target, $setup, $options) = @_;
0.000000,0,0.000000,
0.000004,3,0.000001,my @exports;
0.000004,3,0.000001,my @defaults;
0.000004,3,0.000001,my %tags;
0.000000,0,0.000000,
0.000010,3,0.000003,if ($setup eq '-setup') {
0.000010,3,0.000003,my %options = %$options;
0.000000,0,0.000000,
0.000000,0,0.000000,OPTIONS:
0.000011,3,0.000004,for my $opt (keys %options) {
0.000031,6,0.000005,if ($opt eq 'exports') {
0.000000,0,0.000000,
0.000006,3,0.000002,croak $too_complicated if ref $options{exports} ne 'ARRAY';
0.000006,3,0.000002,@exports = @{$options{exports}};
0.000041,6,0.000007,croak $too_complicated if first { ref } @exports;
0.000000,0,0.000000,
0.000000,0,0.000000,} elsif ($opt eq 'groups') {
0.000008,3,0.000003,%tags = %{$options{groups}};
0.000010,3,0.000003,for my $tagset (values %tags) {
0.000087,6,0.000014,croak $too_complicated if first { / \A - (?! all \b ) /x || ref } @{$tagset};
0.000000,0,0.000000,}
0.000008,3,0.000003,@defaults = @{$tags{default} || [] };
0.000000,0,0.000000,} else {
0.000000,0,0.000000,croak $too_complicated;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000083,9,0.000009,@{$_} = map { / \A  [:-] all \z /x ? @exports : $_ } @{$_} for \@defaults, values %tags;
0.000008,3,0.000003,$tags{all} ||= [ @exports ];
0.000010,3,0.000003,my %exports = map { $_ => 1 } @exports;
0.000007,3,0.000002,my @errors = grep { not $exports{$_} } @defaults;
0.000007,3,0.000002,croak join(', ', @errors) . " is not exported by the $inner_target module\n" if @errors;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return {
0.000023,3,0.000008,exports => \@exports,
0.000000,0,0.000000,defaults => \@defaults,
0.000000,0,0.000000,original => $options,
0.000000,0,0.000000,tags => \%tags,
0.000000,0,0.000000,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,=encoding utf8
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 NAME
0.000000,0,0.000000,
0.000000,0,0.000000,Sub::Exporter::Progressive - Only use Sub::Exporter if you need it
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 SYNOPSIS
0.000000,0,0.000000,
0.000000,0,0.000000,package Syntax::Keyword::Gather;
0.000000,0,0.000000,
0.000000,0,0.000000,use Sub::Exporter::Progressive -setup => {
0.000000,0,0.000000,exports => [qw( break gather gathered take )],
0.000000,0,0.000000,groups => {
0.000000,0,0.000000,defaults => [qw( break gather gathered take )],
0.000000,0,0.000000,},
0.000000,0,0.000000,};
0.000000,0,0.000000,
0.000000,0,0.000000,# elsewhere
0.000000,0,0.000000,
0.000000,0,0.000000,# uses Exporter for speed
0.000000,0,0.000000,use Syntax::Keyword::Gather;
0.000000,0,0.000000,
0.000000,0,0.000000,# somewhere else
0.000000,0,0.000000,
0.000000,0,0.000000,# uses Sub::Exporter for features
0.000000,0,0.000000,use Syntax::Keyword::Gather 'gather', take => { -as => 'grab' };
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 DESCRIPTION
0.000000,0,0.000000,
0.000000,0,0.000000,L<Sub::Exporter> is an incredibly powerful module, but with that power comes
0.000000,0,0.000000,great responsibility, er- as well as some runtime penalties.  This module
0.000000,0,0.000000,is a C<Sub::Exporter> wrapper that will let your users just use L<Exporter>
0.000000,0,0.000000,if all they are doing is picking exports, but use C<Sub::Exporter> if your
0.000000,0,0.000000,users try to use C<Sub::Exporter>'s more advanced features features, like
0.000000,0,0.000000,renaming exports, if they try to use them.
0.000000,0,0.000000,
0.000000,0,0.000000,Note that this module will export C<@EXPORT>, C<@EXPORT_OK> and
0.000000,0,0.000000,C<%EXPORT_TAGS> package variables for C<Exporter> to work.  Additionally, if
0.000000,0,0.000000,your package uses advanced C<Sub::Exporter> features like currying, this module
0.000000,0,0.000000,will only ever use C<Sub::Exporter>, so you might as well use it directly.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 AUTHOR
0.000000,0,0.000000,
0.000000,0,0.000000,frew - Arthur Axel Schmidt (cpan:FREW) <frioux+cpan@gmail.com>
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 CONTRIBUTORS
0.000000,0,0.000000,
0.000000,0,0.000000,ilmari - Dagfinn Ilmari Manns√•ker (cpan:ILMARI) <ilmari@ilmari.org>
0.000000,0,0.000000,
0.000000,0,0.000000,mst - Matt S. Trout (cpan:MSTROUT) <mst@shadowcat.co.uk>
0.000000,0,0.000000,
0.000000,0,0.000000,leont - Leon Timmermans (cpan:LEONT) <leont@cpan.org>
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 COPYRIGHT
0.000000,0,0.000000,
0.000000,0,0.000000,Copyright (c) 2012 the Sub::Exporter::Progressive L</AUTHOR> and
0.000000,0,0.000000,L</CONTRIBUTORS> as listed above.
0.000000,0,0.000000,
0.000000,0,0.000000,=head1 LICENSE
0.000000,0,0.000000,
0.000000,0,0.000000,This library is free software and may be distributed under the same terms
0.000000,0,0.000000,as perl itself.
0.000000,0,0.000000,
0.000000,0,0.000000,=cut
