# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Moose::Error::Default;
0.000000,0,0.000000,BEGIN {
0.000008,1,0.000008,$Moose::Error::Default::AUTHORITY = 'cpan:STEVAN';
0.000049,1,0.000049,}
0.000000,0,0.000000,{
0.000005,2,0.000002,$Moose::Error::Default::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000036,2,0.000018,use strict;
0.000032,2,0.000016,use warnings;
0.000000,0,0.000000,
0.000100,2,0.000050,use Carp::Heavy;
0.000030,2,0.000015,use Class::MOP::MiniTrait;
0.000000,0,0.000000,
0.000099,2,0.000050,use Moose::Error::Util;
0.000000,0,0.000000,
0.000185,2,0.000092,use base 'Class::MOP::Object';
0.000000,0,0.000000,
0.000006,1,0.000006,Class::MOP::MiniTrait::apply(__PACKAGE__, 'Moose::Meta::Object::Trait');
0.000000,0,0.000000,
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,my ( $self, @args ) = @_;
0.000000,0,0.000000,# can't use Moose::Error::Util::create_error here because that would break
0.000000,0,0.000000,# inheritance. we don't care about that for the inlined version, because
0.000000,0,0.000000,# the inlined versions are explicitly not inherited.
0.000000,0,0.000000,if (defined $ENV{MOOSE_ERROR_STYLE} && $ENV{MOOSE_ERROR_STYLE} eq 'croak') {
0.000000,0,0.000000,$self->create_error_croak( @args );
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$self->create_error_confess( @args );
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _inline_new {
0.000078,26,0.000003,my ( $self, %args ) = @_;
0.000000,0,0.000000,
0.000054,26,0.000002,my $depth = ($args{depth} || 0) - 1;
0.000197,26,0.000008,return 'Moose::Error::Util::create_error('
0.000000,0,0.000000,. 'message => ' . $args{message} . ', '
0.000000,0,0.000000,. 'depth   => ' . $depth         . ', '
0.000000,0,0.000000,. ')';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub create_error_croak {
0.000000,0,0.000000,my ( $self, @args ) = @_;
0.000000,0,0.000000,return Moose::Error::Util::create_error_croak(@args);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub create_error_confess {
0.000000,0,0.000000,my ( $self, @args ) = @_;
0.000000,0,0.000000,return Moose::Error::Util::create_error_confess(@args);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000005,1,0.000005,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: L<Carp> based error generation for Moose.
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
