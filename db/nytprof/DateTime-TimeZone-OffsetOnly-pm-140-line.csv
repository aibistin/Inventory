# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package DateTime::TimeZone::OffsetOnly;
0.000000,0,0.000000,{
0.000005,2,0.000003,$DateTime::TimeZone::OffsetOnly::VERSION = '1.60';
0.000000,0,0.000000,}
0.000000,0,0.000000,BEGIN {
0.000008,1,0.000008,$DateTime::TimeZone::OffsetOnly::AUTHORITY = 'cpan:DROLSKY';
0.000022,1,0.000022,}
0.000000,0,0.000000,
0.000034,2,0.000017,use strict;
0.000033,2,0.000016,use warnings;
0.000000,0,0.000000,
0.000035,2,0.000018,use parent 'DateTime::TimeZone';
0.000000,0,0.000000,
0.000115,2,0.000057,use DateTime::TimeZone::UTC;
0.000294,2,0.000147,use Params::Validate qw( validate SCALAR );
0.000000,0,0.000000,
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,my $class = shift;
0.000000,0,0.000000,my %p     = validate(
0.000000,0,0.000000,@_, {
0.000000,0,0.000000,offset => { type => SCALAR },
0.000000,0,0.000000,}
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,my $offset = DateTime::TimeZone::offset_as_seconds( $p{offset} );
0.000000,0,0.000000,
0.000000,0,0.000000,die "Invalid offset: $p{offset}\n" unless defined $offset;
0.000000,0,0.000000,
0.000000,0,0.000000,return DateTime::TimeZone::UTC->new unless $offset;
0.000000,0,0.000000,
0.000000,0,0.000000,my $self = {
0.000000,0,0.000000,name   => DateTime::TimeZone::offset_as_string($offset),
0.000000,0,0.000000,offset => $offset,
0.000000,0,0.000000,};
0.000000,0,0.000000,
0.000000,0,0.000000,return bless $self, $class;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub is_dst_for_datetime {0}
0.000000,0,0.000000,
0.000000,0,0.000000,sub offset_for_datetime       { $_[0]->{offset} }
0.000000,0,0.000000,sub offset_for_local_datetime { $_[0]->{offset} }
0.000000,0,0.000000,
0.000025,4,0.000006,sub is_utc {0}
0.000000,0,0.000000,
0.000000,0,0.000000,sub short_name_for_datetime { $_[0]->name }
0.000000,0,0.000000,
0.000000,0,0.000000,sub category {undef}
0.000000,0,0.000000,
0.000000,0,0.000000,sub STORABLE_freeze {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,return $self->name;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub STORABLE_thaw {
0.000000,0,0.000000,my $self       = shift;
0.000000,0,0.000000,my $cloning    = shift;
0.000000,0,0.000000,my $serialized = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,my $class = ref $self || $self;
0.000000,0,0.000000,
0.000000,0,0.000000,my $obj;
0.000000,0,0.000000,if ( $class->isa(__PACKAGE__) ) {
0.000000,0,0.000000,$obj = __PACKAGE__->new( offset => $serialized );
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,$obj = $class->new( offset => $serialized );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,%$self = %$obj;
0.000000,0,0.000000,
0.000000,0,0.000000,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: A DateTime::TimeZone object that just contains an offset
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
