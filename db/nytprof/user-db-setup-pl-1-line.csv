# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,Profile data that couldn't be associated with a specific line:
0.000047,1,0.000047,#!/usr/bin/env perl 
0.000000,0,0.000000,#===============================================================================
0.000000,0,0.000000,#
0.000000,0,0.000000,#
0.000000,0,0.000000,#  USAGE: ./user-db-setup.pl --verbose --debug debug --database_file user.db
0.000000,0,0.000000,#
0.000000,0,0.000000,#  DESCRIPTION:
0.000000,0,0.000000,#      Drop and create a SQLite User database  tables;
0.000000,0,0.000000,#      user,role,user_role, user_log.
0.000000,0,0.000000,#
0.000000,0,0.000000,#  CREATED: 11/09/2013
0.000000,0,0.000000,#===============================================================================
0.000337,2,0.000168,use Modern::Perl;
0.000135,2,0.000068,use autodie;
0.000265,2,0.000133,use Getopt::Long;
0.000125,2,0.000063,use Pod::Usage;
0.000145,2,0.000073,use DBI;
0.000117,2,0.000058,use DBD::SQLite;
0.000132,2,0.000066,use DateTime;
0.000123,2,0.000062,use Data::Dump qw{dump};
0.000235,2,0.000118,use InventoryDbUtil qw{db_handle commit_and_disconnect};
0.000177,2,0.000089,use Log::Log4perl qw(:easy);
0.001106,2,0.000553,use diagnostics -verbose;
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Default Options
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000003,1,0.000003,my $verbose = q//;
0.000002,1,0.000002,my $quiet   = q//;
0.000000,0,0.000000,
0.000000,0,0.000000,#--
0.000002,1,0.000002,my $log_level = q/$ERROR/;
0.000000,0,0.000000,
0.000002,1,0.000002,my $man  = 0;
0.000002,1,0.000002,my $help = 0;
0.000000,0,0.000000,
0.000000,0,0.000000,#------ SQLite databse name
0.000002,1,0.000002,my $db_file = q(user.db);
0.000000,0,0.000000,
0.000006,1,0.000006,process_options();
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Globals
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,
0.000000,0,0.000000,#------ Tables
0.000003,1,0.000003,my @tables = qw/user role user_role user_log/;
0.000000,0,0.000000,
0.000011,1,0.000011,my $dbh = db_handle( $db_file,
0.000000,0,0.000000,{ RaiseError => 1, PrintError => 0, AutoCommit => 0, sqlite_unicode => 1, }
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000015,1,0.000015,DEBUG( 'Database handle created for database ' . $db_file . ': ' . dump $dbh );
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Main
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#------ Drop All Tables starting at the last so as to
0.000000,0,0.000000,#       Keep Referential Integrity
0.000004,1,0.000004,my @last_to_first = reverse @tables;
0.000008,1,0.000008,drop_tables( \@last_to_first );
0.000002,1,0.000002,undef @last_to_first;
0.000000,0,0.000000,
0.000000,0,0.000000,#------ Create Tables
0.000007,1,0.000007,create_user_table();
0.000006,1,0.000006,create_role_table();
0.000007,1,0.000007,create_user_role_table();
0.000000,0,0.000000,
0.000000,0,0.000000,#------ Create Views
0.000006,1,0.000006,create_view_user_name_asc();
0.000000,0,0.000000,
0.000000,0,0.000000,#------ Finished
0.000011,1,0.000011,commit_and_disconnect($dbh);
0.000011,1,0.000011,DEBUG( "$0: has finished creating $db_file  database.");
0.000053,1,0.000053,exit;
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Drop All Tables
0.000000,0,0.000000,#  Pass an ArrayRef of tables.
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,sub drop_tables {
0.000002,1,0.000002,my $tables = shift;
0.000002,1,0.000002,croak('drop_tables() needs an array of Tables to drop!') unless $tables;
0.000008,1,0.000008,for my $tbl (@$tables) {
0.000000,0,0.000000,
0.000028,4,0.000007,drop_table($tbl);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Drop a given table
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,sub drop_table {
0.000007,4,0.000002,my $table = shift;
0.000006,4,0.000001,FATAL('drop_table() needs a Table to drop!') unless $table;
0.000005,4,0.000001,croak('drop_table() needs a Table to drop!') unless $table;
0.000000,0,0.000000,
0.000006,4,0.000001,say 'Dropping table: ' . $table if $verbose;
0.000008,4,0.000002,my $drop_table_sql = <<"DROP_TBL";
0.000000,0,0.000000,DROP TABLE if EXISTS $table;
0.000000,0,0.000000,DROP_TBL
0.000000,0,0.000000,
0.000044,4,0.000011,$dbh->do($drop_table_sql);
0.000019,4,0.000005,say '....dropped table: ' . $table if $verbose;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Create an user Table
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,sub create_user_table {
0.000000,0,0.000000,
0.000002,1,0.000002,my $drop_user_sql = <<"DROP_USER";
0.000000,0,0.000000,DROP TABLE if EXISTS user;
0.000000,0,0.000000,DROP_USER
0.000000,0,0.000000,
0.000013,1,0.000013,$dbh->do($drop_user_sql);
0.000000,0,0.000000,
0.000002,1,0.000002,my $create_user_sql = <<"CREATE_USER_SQL";
0.000000,0,0.000000,CREATE TABLE IF NOT EXISTS user (
0.000000,0,0.000000,id             INTEGER PRIMARY KEY,
0.000000,0,0.000000,name           varchar(80) NOT NULL, 
0.000000,0,0.000000,password       varchar(80) NOT NULL, 
0.000000,0,0.000000,employee       INTEGER, 
0.000000,0,0.000000,customer       INTEGER, 
0.000000,0,0.000000,status         INTEGER, 
0.000000,0,0.000000,comments       VARCHAR (260), 
0.000000,0,0.000000,created        TIMESTAMP, 
0.000000,0,0.000000,updated        TIMESTAMP 
0.000000,0,0.000000,);
0.000000,0,0.000000,CREATE_USER_SQL
0.000000,0,0.000000,
0.000000,0,0.000000,#            FOREIGN KEY (employee) REFERENCES employee(id) ON DELETE RESTRICT,
0.000000,0,0.000000,#            FOREIGN KEY (customer) REFERENCES customer(id) ON DELETE RESTRICT
0.000000,0,0.000000,
0.000012,1,0.000012,$dbh->do($create_user_sql);
0.000006,1,0.000006,say '......created user table' if $verbose;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Create an role Table
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,sub create_role_table {
0.000000,0,0.000000,
0.000002,1,0.000002,my $drop_role_sql = <<"DROP_ROLE";
0.000000,0,0.000000,DROP TABLE if EXISTS role;
0.000000,0,0.000000,DROP_ROLE
0.000000,0,0.000000,
0.000012,1,0.000012,$dbh->do($drop_role_sql);
0.000000,0,0.000000,
0.000002,1,0.000002,my $create_role_sql = <<"CREATE_ROLE_SQL";
0.000000,0,0.000000,CREATE TABLE IF NOT EXISTS role (
0.000000,0,0.000000,id             INTEGER PRIMARY KEY,
0.000000,0,0.000000,role           varchar(80) NOT NULL 
0.000000,0,0.000000,);
0.000000,0,0.000000,CREATE_ROLE_SQL
0.000000,0,0.000000,
0.000012,1,0.000012,$dbh->do($create_role_sql);
0.000006,1,0.000006,say '......created role table' if $verbose;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Create an user_role Table
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,sub create_user_role_table {
0.000000,0,0.000000,
0.000002,1,0.000002,my $drop_user_role_sql = <<"DROP_USER_ROLE";
0.000000,0,0.000000,DROP TABLE if EXISTS user_role;
0.000000,0,0.000000,DROP_USER_ROLE
0.000000,0,0.000000,
0.000014,1,0.000014,$dbh->do($drop_user_role_sql);
0.000000,0,0.000000,
0.000002,1,0.000002,my $create_user_role_sql = <<"CREATE_USER_ROLE_SQL";
0.000000,0,0.000000,CREATE TABLE IF NOT EXISTS user_role (
0.000000,0,0.000000,user           INTEGER,
0.000000,0,0.000000,role           INTEGER, 
0.000000,0,0.000000,PRIMARY KEY(user, role), 
0.000000,0,0.000000,FOREIGN KEY (user) REFERENCES  user(id) ON DELETE RESTRICT, 
0.000000,0,0.000000,FOREIGN KEY (role) REFERENCES  role(id) ON DELETE RESTRICT
0.000000,0,0.000000,);
0.000000,0,0.000000,CREATE_USER_ROLE_SQL
0.000000,0,0.000000,
0.000034,1,0.000034,$dbh->do($create_user_role_sql);
0.000007,1,0.000007,say '......created user_role table' if $verbose;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,##-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Create a view of USERS sorted by Names ASC
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,sub create_view_user_name_asc {
0.000002,1,0.000002,my $drop_all_users_view = <<"DROP_USER_VIEW";
0.000000,0,0.000000,DROP VIEW if EXISTS all_users;
0.000000,0,0.000000,DROP_USER_VIEW
0.000000,0,0.000000,
0.000012,1,0.000012,$dbh->do($drop_all_users_view);
0.000000,0,0.000000,
0.000002,1,0.000002,my $create_all_users_view = <<"CREATE_ALL_USERS_VIEW";
0.000000,0,0.000000,CREATE VIEW IF NOT EXISTS  all_users 
0.000000,0,0.000000,AS  SELECT id , name, password, employee, customer, status, comments,
0.000000,0,0.000000,created,  updated
0.000000,0,0.000000,FROM user 
0.000000,0,0.000000,ORDER BY name ASC ;
0.000000,0,0.000000,CREATE_ALL_USERS_VIEW
0.000000,0,0.000000,
0.000013,1,0.000013,$dbh->do($create_all_users_view);
0.000000,0,0.000000,
0.254871,1,0.254871,$dbh->commit;
0.000000,0,0.000000,
0.000013,1,0.000013,say 'Created a new All Users View!' if $verbose;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Options Processing
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,sub process_options {
0.000000,0,0.000000,
0.000007,1,0.000007,my %log_levels = (
0.000000,0,0.000000,fatal => $FATAL,
0.000000,0,0.000000,error => $ERROR,
0.000000,0,0.000000,warn  => $WARN,
0.000000,0,0.000000,info  => $INFO,
0.000000,0,0.000000,debug => $DEBUG,
0.000000,0,0.000000,trace => $TRACE
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,GetOptions(
0.000000,0,0.000000,'database_file=s' => \$db_file,
0.000000,0,0.000000,verbose       => \$verbose,
0.000000,0,0.000000,quiet         => sub { $verbose = 0 },
0.000014,1,0.000014,'debug=s'     => \$log_level,
0.000000,0,0.000000,'help|?'      => \$help,
0.000000,0,0.000000,man           => \$man,
0.000000,0,0.000000,) or pod2usage(2);
0.000000,0,0.000000,
0.000001,1,0.000001,pod2usage(1) if $help;
0.000000,0,0.000000,
0.000001,1,0.000001,pod2usage(
0.000000,0,0.000000,-exitval => 1,
0.000000,0,0.000000,-verbose => 2,
0.000000,0,0.000000,) if $man;
0.000000,0,0.000000,
0.000000,0,0.000000,#--- Check for correct log level
0.000002,1,0.000002,pod2usage(
0.000000,0,0.000000,-verbose => 2,
0.000000,0,0.000000,-message => "Incorrect debug option.  Must be: \n
0.000000,0,0.000000,$0 --debug fatal( or error, warning, info, debug, trace).\n"
0.000000,0,0.000000,) unless $log_levels{$log_level};
0.000000,0,0.000000,
0.000015,1,0.000015,Log::Log4perl->easy_init( $log_levels{$log_level} );
0.000000,0,0.000000,
0.000000,0,0.000000,}
0.001477,1,0.001477,__END__
