# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Encode::Encoding;
0.000000,0,0.000000,
0.000000,0,0.000000,# Base class for classes which implement encodings
0.000037,2,0.000018,use strict;
0.000406,2,0.000203,use warnings;
0.000022,3,0.000007,our $VERSION = do { my @r = ( q$Revision: 2.5 $ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @r };
0.000000,0,0.000000,
0.000002,1,0.000002,require Encode;
0.000000,0,0.000000,
0.000018,3,0.000006,sub DEBUG { 0 }
0.000000,0,0.000000,
0.000000,0,0.000000,sub Define {
0.000000,0,0.000000,my $obj       = shift;
0.000000,0,0.000000,my $canonical = shift;
0.000000,0,0.000000,$obj = bless { Name => $canonical }, $obj unless ref $obj;
0.000000,0,0.000000,
0.000000,0,0.000000,# warn "$canonical => $obj\n";
0.000000,0,0.000000,Encode::define_encoding( $obj, $canonical, @_ );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub name { return shift->{'Name'} }
0.000000,0,0.000000,
0.000000,0,0.000000,sub mime_name{
0.000000,0,0.000000,require Encode::MIME::Name;
0.000000,0,0.000000,return Encode::MIME::Name::get_mime_name(shift->name);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# sub renew { return $_[0] }
0.000000,0,0.000000,
0.000000,0,0.000000,sub renew {
0.000005,3,0.000002,my $self = shift;
0.000013,3,0.000004,my $clone = bless {%$self} => ref($self);
0.000006,3,0.000002,$clone->{renewed}++;    # so the caller can see it
0.000016,3,0.000005,DEBUG and warn $clone->{renewed};
0.000017,3,0.000006,return $clone;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000014,2,0.000007,sub renewed { return $_[0]->{renewed} || 0 }
0.000000,0,0.000000,
0.000002,1,0.000002,*new_sequence = \&renew;
0.000000,0,0.000000,
0.000018,3,0.000006,sub needs_lines { 0 }
0.000000,0,0.000000,
0.000000,0,0.000000,sub perlio_ok {
0.000000,0,0.000000,eval { require PerlIO::encoding };
0.000000,0,0.000000,return $@ ? 0 : 1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# (Temporary|legacy) methods
0.000000,0,0.000000,
0.000000,0,0.000000,sub toUnicode   { shift->decode(@_) }
0.000000,0,0.000000,sub fromUnicode { shift->encode(@_) }
0.000000,0,0.000000,
0.000000,0,0.000000,#
0.000000,0,0.000000,# Needs to be overloaded or just croak
0.000000,0,0.000000,#
0.000000,0,0.000000,
0.000000,0,0.000000,sub encode {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,my $obj = shift;
0.000000,0,0.000000,my $class = ref($obj) ? ref($obj) : $obj;
0.000000,0,0.000000,Carp::croak( $class . "->encode() not defined!" );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub decode {
0.000000,0,0.000000,require Carp;
0.000000,0,0.000000,my $obj = shift;
0.000000,0,0.000000,my $class = ref($obj) ? ref($obj) : $obj;
0.000000,0,0.000000,Carp::croak( $class . "->encode() not defined!" );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub DESTROY { }
0.000000,0,0.000000,
0.000006,1,0.000006,1;
0.000000,0,0.000000,__END__
