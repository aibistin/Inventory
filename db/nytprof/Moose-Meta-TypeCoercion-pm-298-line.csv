# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,
0.000000,0,0.000000,package Moose::Meta::TypeCoercion;
0.000000,0,0.000000,BEGIN {
0.000008,1,0.000008,$Moose::Meta::TypeCoercion::AUTHORITY = 'cpan:STEVAN';
0.000032,1,0.000032,}
0.000000,0,0.000000,{
0.000005,2,0.000002,$Moose::Meta::TypeCoercion::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000033,2,0.000016,use strict;
0.000032,2,0.000016,use warnings;
0.000038,2,0.000019,use metaclass;
0.000000,0,0.000000,
0.000137,2,0.000068,use Moose::Meta::Attribute;
0.000461,2,0.000230,use Moose::Util::TypeConstraints ();
0.000000,0,0.000000,
0.000000,0,0.000000,__PACKAGE__->meta->add_attribute('type_coercion_map' => (
0.000000,0,0.000000,reader  => 'type_coercion_map',
0.000000,0,0.000000,default => sub { [] },
0.000015,1,0.000015,Class::MOP::_definition_context(),
0.000000,0,0.000000,));
0.000000,0,0.000000,
0.000019,1,0.000019,__PACKAGE__->meta->add_attribute(
0.000000,0,0.000000,Moose::Meta::Attribute->new('type_constraint' => (
0.000000,0,0.000000,reader   => 'type_constraint',
0.000000,0,0.000000,weak_ref => 1,
0.000000,0,0.000000,Class::MOP::_definition_context(),
0.000000,0,0.000000,))
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,# private accessor
0.000014,1,0.000014,__PACKAGE__->meta->add_attribute('compiled_type_coercion' => (
0.000000,0,0.000000,accessor => '_compiled_type_coercion',
0.000000,0,0.000000,Class::MOP::_definition_context(),
0.000000,0,0.000000,));
0.000000,0,0.000000,
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,my $class = shift;
0.000000,0,0.000000,my $self  = Class::MOP::class_of($class)->new_object(@_);
0.000000,0,0.000000,$self->compile_type_coercion;
0.000000,0,0.000000,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub compile_type_coercion {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,my @coercion_map = @{$self->type_coercion_map};
0.000000,0,0.000000,my @coercions;
0.000000,0,0.000000,while (@coercion_map) {
0.000000,0,0.000000,my ($constraint_name, $action) = splice(@coercion_map, 0, 2);
0.000000,0,0.000000,my $type_constraint = ref $constraint_name ? $constraint_name : Moose::Util::TypeConstraints::find_or_parse_type_constraint($constraint_name);
0.000000,0,0.000000,
0.000000,0,0.000000,unless ( defined $type_constraint ) {
0.000000,0,0.000000,require Moose;
0.000000,0,0.000000,Moose->throw_error("Could not find the type constraint ($constraint_name) to coerce from");
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,push @coercions => [
0.000000,0,0.000000,$type_constraint->_compiled_type_constraint,
0.000000,0,0.000000,$action
0.000000,0,0.000000,];
0.000000,0,0.000000,}
0.000000,0,0.000000,$self->_compiled_type_coercion(sub {
0.000000,0,0.000000,my $thing = shift;
0.000000,0,0.000000,foreach my $coercion (@coercions) {
0.000000,0,0.000000,my ($constraint, $converter) = @$coercion;
0.000000,0,0.000000,if ($constraint->($thing)) {
0.000000,0,0.000000,local $_ = $thing;
0.000000,0,0.000000,return $converter->($thing);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,return $thing;
0.000000,0,0.000000,});
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub has_coercion_for_type {
0.000000,0,0.000000,my ($self, $type_name) = @_;
0.000000,0,0.000000,my %coercion_map = @{$self->type_coercion_map};
0.000000,0,0.000000,exists $coercion_map{$type_name} ? 1 : 0;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub add_type_coercions {
0.000000,0,0.000000,my ($self, @new_coercion_map) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my $coercion_map = $self->type_coercion_map;
0.000000,0,0.000000,my %has_coercion = @$coercion_map;
0.000000,0,0.000000,
0.000000,0,0.000000,while (@new_coercion_map) {
0.000000,0,0.000000,my ($constraint_name, $action) = splice(@new_coercion_map, 0, 2);
0.000000,0,0.000000,
0.000000,0,0.000000,if ( exists $has_coercion{$constraint_name} ) {
0.000000,0,0.000000,require Moose;
0.000000,0,0.000000,Moose->throw_error("A coercion action already exists for '$constraint_name'")
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,push @{$coercion_map} => ($constraint_name, $action);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# and re-compile ...
0.000000,0,0.000000,$self->compile_type_coercion;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub coerce { $_[0]->_compiled_type_coercion->($_[1]) }
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000011,1,0.000011,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: The Moose Type Coercion metaclass
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
