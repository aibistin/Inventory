# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,package Log::Log4perl::Filter::Boolean;
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,
0.000057,2,0.000028,use 5.006;
0.000000,0,0.000000,
0.000034,2,0.000017,use strict;
0.000055,2,0.000028,use warnings;
0.000000,0,0.000000,
0.000050,2,0.000025,use Log::Log4perl::Level;
0.000033,2,0.000017,use Log::Log4perl::Config;
0.000000,0,0.000000,
0.000040,2,0.000020,use constant _INTERNAL_DEBUG => 0;
0.000000,0,0.000000,
0.000429,2,0.000215,use base qw(Log::Log4perl::Filter);
0.000000,0,0.000000,
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,my ($class, %options) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my $self = { params => {},
0.000000,0,0.000000,%options,
0.000000,0,0.000000,};
0.000000,0,0.000000,
0.000000,0,0.000000,bless $self, $class;
0.000000,0,0.000000,
0.000000,0,0.000000,print "Compiling '$options{logic}'\n" if _INTERNAL_DEBUG;
0.000000,0,0.000000,
0.000000,0,0.000000,# Set up meta-decider for later
0.000000,0,0.000000,$self->compile_logic($options{logic});
0.000000,0,0.000000,
0.000000,0,0.000000,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,sub ok {
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,my ($self, %p) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,return $self->eval_logic(\%p);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,sub compile_logic {
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,my ($self, $logic) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,# Extract Filter placeholders in logic as defined
0.000000,0,0.000000,# in configuration file.
0.000000,0,0.000000,while($logic =~ /([\w_-]+)/g) {
0.000000,0,0.000000,# Get the corresponding filter object
0.000000,0,0.000000,my $filter = Log::Log4perl::Filter::by_name($1);
0.000000,0,0.000000,die "Filter $filter required by Boolean filter, but not defined" 
0.000000,0,0.000000,unless $filter;
0.000000,0,0.000000,
0.000000,0,0.000000,$self->{params}->{$1} = $filter;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# Fabricate a parameter list: A1/A2/A3 => $A1, $A2, $A3
0.000000,0,0.000000,my $plist = join ', ', map { '$' . $_ } keys %{$self->{params}};
0.000000,0,0.000000,
0.000000,0,0.000000,# Replace all the (dollar-less) placeholders in the code 
0.000000,0,0.000000,# by scalars (basically just put dollars in front of them)
0.000000,0,0.000000,$logic =~ s/([\w_-]+)/\$$1/g;
0.000000,0,0.000000,
0.000000,0,0.000000,# Set up the meta decider, which transforms the config file
0.000000,0,0.000000,# logic into compiled perl code
0.000000,0,0.000000,my $func = <<EOT;
0.000000,0,0.000000,sub { 
0.000000,0,0.000000,my($plist) = \@_;
0.000000,0,0.000000,$logic;
0.000000,0,0.000000,}
0.000000,0,0.000000,EOT
0.000000,0,0.000000,
0.000000,0,0.000000,print "func=$func\n" if _INTERNAL_DEBUG;
0.000000,0,0.000000,
0.000000,0,0.000000,my $eval_func = eval $func;
0.000000,0,0.000000,
0.000000,0,0.000000,if(! $eval_func) {
0.000000,0,0.000000,die "Syntax error in Boolean filter logic: $eval_func";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,$self->{eval_func} = $eval_func;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,sub eval_logic {
0.000000,0,0.000000,##################################################
0.000000,0,0.000000,my($self, $p) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my @plist = ();
0.000000,0,0.000000,
0.000000,0,0.000000,# Eval the results of all filters referenced
0.000000,0,0.000000,# in the code (although the order of keys is
0.000000,0,0.000000,# not predictable, it is consistent :)
0.000000,0,0.000000,for my $param (keys %{$self->{params}}) {
0.000000,0,0.000000,# Call ok() and map the result to 1 or 0
0.000000,0,0.000000,print "Calling filter $param\n" if _INTERNAL_DEBUG;
0.000000,0,0.000000,push @plist, ($self->{params}->{$param}->ok(%$p) ? 1 : 0);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# Now pipe the parameters into the canned function,
0.000000,0,0.000000,# have it evaluate the logic and return the final
0.000000,0,0.000000,# decision
0.000000,0,0.000000,print "Passing in (", join(', ', @plist), ")\n" if _INTERNAL_DEBUG;
0.000000,0,0.000000,return $self->{eval_func}->(@plist);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
