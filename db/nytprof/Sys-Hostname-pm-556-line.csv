# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Sys::Hostname;
0.000000,0,0.000000,
0.000034,2,0.000017,use strict;
0.000000,0,0.000000,
0.000109,2,0.000054,use Carp;
0.000000,0,0.000000,
0.000002,1,0.000002,require Exporter;
0.000000,0,0.000000,
0.000012,1,0.000012,our @ISA     = qw/ Exporter /;
0.000002,1,0.000002,our @EXPORT  = qw/ hostname /;
0.000000,0,0.000000,
0.000001,1,0.000001,our $VERSION;
0.000000,0,0.000000,
0.000001,1,0.000001,our $host;
0.000000,0,0.000000,
0.000000,0,0.000000,BEGIN {
0.000002,1,0.000002,$VERSION = '1.17';
0.000000,0,0.000000,{
0.000012,2,0.000006,local $SIG{__DIE__};
0.000004,1,0.000004,eval {
0.000002,1,0.000002,require XSLoader;
0.000173,1,0.000173,XSLoader::load();
0.000000,0,0.000000,};
0.000003,1,0.000003,warn $@ if $@;
0.000000,0,0.000000,}
0.000407,1,0.000407,}
0.000000,0,0.000000,
0.000000,0,0.000000,
0.000000,0,0.000000,sub hostname {
0.000000,0,0.000000,
0.000000,0,0.000000,# method 1 - we already know it
0.000002,1,0.000002,return $host if defined $host;
0.000000,0,0.000000,
0.000000,0,0.000000,# method 1' - try to ask the system
0.000014,1,0.000014,$host = ghname() if defined &ghname;
0.000006,1,0.000006,return $host if defined $host;
0.000000,0,0.000000,
0.000000,0,0.000000,if ($^O eq 'VMS') {
0.000000,0,0.000000,
0.000000,0,0.000000,# method 2 - no sockets ==> return DECnet node name
0.000000,0,0.000000,eval { local $SIG{__DIE__}; $host = (gethostbyname('me'))[0] };
0.000000,0,0.000000,if ($@) { return $host = $ENV{'SYS$NODE'}; }
0.000000,0,0.000000,
0.000000,0,0.000000,# method 3 - has someone else done the job already?  It's common for the
0.000000,0,0.000000,#    TCP/IP stack to advertise the hostname via a logical name.  (Are
0.000000,0,0.000000,#    there any other logicals which TCP/IP stacks use for the host name?)
0.000000,0,0.000000,$host = $ENV{'ARPANET_HOST_NAME'}  || $ENV{'INTERNET_HOST_NAME'} ||
0.000000,0,0.000000,$ENV{'MULTINET_HOST_NAME'} || $ENV{'UCX$INET_HOST'}      ||
0.000000,0,0.000000,$ENV{'TCPWARE_DOMAINNAME'} || $ENV{'NEWS_ADDRESS'};
0.000000,0,0.000000,return $host if $host;
0.000000,0,0.000000,
0.000000,0,0.000000,# method 4 - does hostname happen to work?
0.000000,0,0.000000,my($rslt) = `hostname`;
0.000000,0,0.000000,if ($rslt !~ /IVVERB/) { ($host) = $rslt =~ /^(\S+)/; }
0.000000,0,0.000000,return $host if $host;
0.000000,0,0.000000,
0.000000,0,0.000000,# rats!
0.000000,0,0.000000,$host = '';
0.000000,0,0.000000,croak "Cannot get host name of local machine";  
0.000000,0,0.000000,
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($^O eq 'MSWin32') {
0.000000,0,0.000000,($host) = gethostbyname('localhost');
0.000000,0,0.000000,chomp($host = `hostname 2> NUL`) unless defined $host;
0.000000,0,0.000000,return $host;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {  # Unix
0.000000,0,0.000000,# is anyone going to make it here?
0.000000,0,0.000000,
0.000000,0,0.000000,local $ENV{PATH} = '/usr/bin:/bin:/usr/sbin:/sbin'; # Paranoia.
0.000000,0,0.000000,
0.000000,0,0.000000,# method 2 - syscall is preferred since it avoids tainting problems
0.000000,0,0.000000,# XXX: is it such a good idea to return hostname untainted?
0.000000,0,0.000000,eval {
0.000000,0,0.000000,local $SIG{__DIE__};
0.000000,0,0.000000,require "syscall.ph";
0.000000,0,0.000000,$host = "\0" x 65; ## preload scalar
0.000000,0,0.000000,syscall(&SYS_gethostname, $host, 65) == 0;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# method 2a - syscall using systeminfo instead of gethostname
0.000000,0,0.000000,#           -- needed on systems like Solaris
0.000000,0,0.000000,|| eval {
0.000000,0,0.000000,local $SIG{__DIE__};
0.000000,0,0.000000,require "sys/syscall.ph";
0.000000,0,0.000000,require "sys/systeminfo.ph";
0.000000,0,0.000000,$host = "\0" x 65; ## preload scalar
0.000000,0,0.000000,syscall(&SYS_systeminfo, &SI_HOSTNAME, $host, 65) != -1;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# method 3 - trusty old hostname command
0.000000,0,0.000000,|| eval {
0.000000,0,0.000000,local $SIG{__DIE__};
0.000000,0,0.000000,local $SIG{CHLD};
0.000000,0,0.000000,$host = `(hostname) 2>/dev/null`; # bsdish
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# method 4 - use POSIX::uname(), which strictly can't be expected to be
0.000000,0,0.000000,# correct
0.000000,0,0.000000,|| eval {
0.000000,0,0.000000,local $SIG{__DIE__};
0.000000,0,0.000000,require POSIX;
0.000000,0,0.000000,$host = (POSIX::uname())[1];
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# method 5 - sysV uname command (may truncate)
0.000000,0,0.000000,|| eval {
0.000000,0,0.000000,local $SIG{__DIE__};
0.000000,0,0.000000,$host = `uname -n 2>/dev/null`; ## sysVish
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# bummer
0.000000,0,0.000000,|| croak "Cannot get host name of local machine";  
0.000000,0,0.000000,
0.000000,0,0.000000,# remove garbage 
0.000000,0,0.000000,$host =~ tr/\0\r\n//d;
0.000000,0,0.000000,$host;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000005,1,0.000005,1;
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
