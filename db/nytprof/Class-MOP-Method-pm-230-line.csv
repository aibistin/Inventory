# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,
0.000000,0,0.000000,package Class::MOP::Method;
0.000000,0,0.000000,BEGIN {
0.000008,1,0.000008,$Class::MOP::Method::AUTHORITY = 'cpan:STEVAN';
0.000033,1,0.000033,}
0.000000,0,0.000000,{
0.000005,2,0.000002,$Class::MOP::Method::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000033,2,0.000016,use strict;
0.000032,2,0.000016,use warnings;
0.000000,0,0.000000,
0.000036,2,0.000018,use Carp         'confess';
0.000034,2,0.000017,use Scalar::Util 'weaken', 'reftype', 'blessed';
0.000000,0,0.000000,
0.000058,2,0.000029,use base 'Class::MOP::Object';
0.000000,0,0.000000,
0.000000,0,0.000000,# NOTE:
0.000000,0,0.000000,# if poked in the right way,
0.000000,0,0.000000,# they should act like CODE refs.
0.000545,2,0.000272,use overload '&{}' => sub { $_[0]->body }, fallback => 1;
0.000000,0,0.000000,
0.000000,0,0.000000,# construction
0.000000,0,0.000000,
0.000000,0,0.000000,sub wrap {
0.000622,194,0.000003,my ( $class, @args ) = @_;
0.000000,0,0.000000,
0.000398,194,0.000002,unshift @args, 'body' if @args % 2 == 1;
0.000000,0,0.000000,
0.000580,194,0.000003,my %params = @args;
0.000317,194,0.000002,my $code = $params{body};
0.000000,0,0.000000,
0.002354,194,0.000012,if (blessed($code) && $code->isa(__PACKAGE__)) {
0.000000,0,0.000000,my $method = $code->clone;
0.000000,0,0.000000,delete $params{body};
0.000000,0,0.000000,Class::MOP::class_of($class)->rebless_instance($method, %params);
0.000000,0,0.000000,return $method;
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif (!ref $code || 'CODE' ne reftype($code)) {
0.000000,0,0.000000,confess "You must supply a CODE reference to bless, not (" . ($code || 'undef') . ")";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000316,194,0.000002,($params{package_name} && $params{name})
0.000000,0,0.000000,|| confess "You must supply the package_name and name parameters";
0.000000,0,0.000000,
0.001113,194,0.000006,my $self = $class->_new(\%params);
0.000000,0,0.000000,
0.003202,194,0.000017,weaken($self->{associated_metaclass}) if $self->{associated_metaclass};
0.000000,0,0.000000,
0.001204,194,0.000006,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _new {
0.000134,85,0.000002,my $class = shift;
0.000000,0,0.000000,
0.000396,85,0.000005,return Class::MOP::Class->initialize($class)->new_object(@_)
0.000000,0,0.000000,if $class ne __PACKAGE__;
0.000000,0,0.000000,
0.000105,61,0.000002,my $params = @_ == 1 ? $_[0] : {@_};
0.000000,0,0.000000,
0.000495,61,0.000008,return bless {
0.000000,0,0.000000,'body'                 => $params->{body},
0.000000,0,0.000000,'associated_metaclass' => $params->{associated_metaclass},
0.000000,0,0.000000,'package_name'         => $params->{package_name},
0.000000,0,0.000000,'name'                 => $params->{name},
0.000000,0,0.000000,'original_method'      => $params->{original_method},
0.000000,0,0.000000,} => $class;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,## accessors
0.000000,0,0.000000,
0.000105,16,0.000007,sub associated_metaclass { shift->{'associated_metaclass'} }
0.000000,0,0.000000,
0.000000,0,0.000000,sub attach_to_class {
0.000618,374,0.000002,my ( $self, $class ) = @_;
0.000747,374,0.000002,$self->{associated_metaclass} = $class;
0.003741,374,0.000010,weaken($self->{associated_metaclass});
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub detach_from_class {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,delete $self->{associated_metaclass};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub fully_qualified_name {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,$self->package_name . '::' . $self->name;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub original_method { (shift)->{'original_method'} }
0.000000,0,0.000000,
0.000153,28,0.000005,sub _set_original_method { $_[0]->{'original_method'} = $_[1] }
0.000000,0,0.000000,
0.000000,0,0.000000,# It's possible that this could cause a loop if there is a circular
0.000000,0,0.000000,# reference in here. That shouldn't ever happen in normal
0.000000,0,0.000000,# circumstances, since original method only gets set when clone is
0.000000,0,0.000000,# called. We _could_ check for such a loop, but it'd involve some sort
0.000000,0,0.000000,# of package-lexical variable, and wouldn't be terribly subclassable.
0.000000,0,0.000000,sub original_package_name {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,$self->original_method
0.000000,0,0.000000,? $self->original_method->original_package_name
0.000000,0,0.000000,: $self->package_name;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub original_name {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,$self->original_method
0.000000,0,0.000000,? $self->original_method->original_name
0.000000,0,0.000000,: $self->name;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub original_fully_qualified_name {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,$self->original_method
0.000000,0,0.000000,? $self->original_method->original_fully_qualified_name
0.000000,0,0.000000,: $self->fully_qualified_name;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub execute {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,$self->body->(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# We used to go through use Class::MOP::Class->clone_instance to do this, but
0.000000,0,0.000000,# this was awfully slow. This method may be called a number of times when
0.000000,0,0.000000,# classes are loaded (especially during Moose role application), so it is
0.000000,0,0.000000,# worth optimizing. - DR
0.000000,0,0.000000,sub clone {
0.000044,28,0.000002,my $self = shift;
0.000000,0,0.000000,
0.000338,28,0.000012,my $clone = bless { %{$self}, @_ }, blessed($self);
0.000210,28,0.000008,weaken($clone->{associated_metaclass}) if $clone->{associated_metaclass};
0.000000,0,0.000000,
0.000144,28,0.000005,$clone->_set_original_method($self);
0.000000,0,0.000000,
0.000137,28,0.000005,return $clone;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Method Meta Object
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
