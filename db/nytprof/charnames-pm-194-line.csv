# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package charnames;
0.000032,2,0.000016,use strict;
0.000041,2,0.000021,use warnings;
0.000002,1,0.000002,our $VERSION = '1.36';
0.000971,2,0.000485,use unicore::Name;    # mktables-generated algorithmically-defined names
0.000183,2,0.000092,use _charnames ();    # The submodule for this where most of the work gets done
0.000000,0,0.000000,
0.000030,2,0.000015,use bytes ();          # for $bytes::hint_bits
0.000313,2,0.000157,use re "/aa";          # Everything in here should be ASCII
0.000000,0,0.000000,
0.000000,0,0.000000,# Translate between Unicode character names and their code points.
0.000000,0,0.000000,# This is a wrapper around the submodule C<_charnames>.  This design allows
0.000000,0,0.000000,# C<_charnames> to be autoloaded to enable use of \N{...}, but requires this
0.000000,0,0.000000,# module to be explicitly requested for the functions API.
0.000000,0,0.000000,
0.000002,1,0.000002,$Carp::Internal{ (__PACKAGE__) } = 1;
0.000000,0,0.000000,
0.000000,0,0.000000,sub import
0.000000,0,0.000000,{
0.000001,1,0.000001,shift; ## ignore class name
0.000012,1,0.000012,_charnames->import(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# Cache of already looked-up values.  This is set to only contain
0.000000,0,0.000000,# official values, and user aliases can't override them, so scoping is
0.000000,0,0.000000,# not an issue.
0.000001,1,0.000001,my %viacode;
0.000000,0,0.000000,
0.000000,0,0.000000,sub viacode {
0.000000,0,0.000000,return _charnames::viacode(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub vianame
0.000000,0,0.000000,{
0.000000,0,0.000000,if (@_ != 1) {
0.000000,0,0.000000,_charnames::carp "charnames::vianame() expects one name argument";
0.000000,0,0.000000,return ()
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# Looks up the character name and returns its ordinal if
0.000000,0,0.000000,# found, undef otherwise.
0.000000,0,0.000000,
0.000000,0,0.000000,my $arg = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,if ($arg =~ /^U\+([0-9a-fA-F]+)$/) {
0.000000,0,0.000000,
0.000000,0,0.000000,# khw claims that this is poor interface design.  The function should
0.000000,0,0.000000,# return either a an ord or a chr for all inputs; not be bipolar.  But
0.000000,0,0.000000,# can't change it because of backward compatibility.  New code can use
0.000000,0,0.000000,# string_vianame() instead.
0.000000,0,0.000000,my $ord = CORE::hex $1;
0.000000,0,0.000000,return chr $ord if $ord <= 255 || ! ((caller 0)[8] & $bytes::hint_bits);
0.000000,0,0.000000,_charnames::carp _charnames::not_legal_use_bytes_msg($arg, chr $ord);
0.000000,0,0.000000,return;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# The first 1 arg means wants an ord returned; the second that we are in
0.000000,0,0.000000,# runtime, and this is the first level routine called from the user
0.000000,0,0.000000,return _charnames::lookup_name($arg, 1, 1);
0.000000,0,0.000000,} # vianame
0.000000,0,0.000000,
0.000000,0,0.000000,sub string_vianame {
0.000000,0,0.000000,
0.000000,0,0.000000,# Looks up the character name and returns its string representation if
0.000000,0,0.000000,# found, undef otherwise.
0.000000,0,0.000000,
0.000000,0,0.000000,if (@_ != 1) {
0.000000,0,0.000000,_charnames::carp "charnames::string_vianame() expects one name argument";
0.000000,0,0.000000,return;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,my $arg = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,if ($arg =~ /^U\+([0-9a-fA-F]+)$/) {
0.000000,0,0.000000,
0.000000,0,0.000000,my $ord = CORE::hex $1;
0.000000,0,0.000000,return chr $ord if $ord <= 255 || ! ((caller 0)[8] & $bytes::hint_bits);
0.000000,0,0.000000,
0.000000,0,0.000000,_charnames::carp _charnames::not_legal_use_bytes_msg($arg, chr $ord);
0.000000,0,0.000000,return;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# The 0 arg means wants a string returned; the 1 arg means that we are in
0.000000,0,0.000000,# runtime, and this is the first level routine called from the user
0.000000,0,0.000000,return _charnames::lookup_name($arg, 0, 1);
0.000000,0,0.000000,} # string_vianame
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,__END__
