# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,
0.000000,0,0.000000,package Class::MOP::Object;
0.000000,0,0.000000,BEGIN {
0.000012,1,0.000012,$Class::MOP::Object::AUTHORITY = 'cpan:STEVAN';
0.000030,1,0.000030,}
0.000000,0,0.000000,{
0.000005,2,0.000003,$Class::MOP::Object::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000059,2,0.000029,use strict;
0.000037,2,0.000019,use warnings;
0.000000,0,0.000000,
0.000034,2,0.000017,use Carp qw(confess);
0.000379,2,0.000190,use Scalar::Util 'blessed';
0.000000,0,0.000000,
0.000000,0,0.000000,# introspection
0.000000,0,0.000000,
0.000000,0,0.000000,sub meta {
0.000053,33,0.000002,require Class::MOP::Class;
0.000511,33,0.000015,Class::MOP::Class->initialize(blessed($_[0]) || $_[0]);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _new {
0.000015,1,0.000015,Class::MOP::class_of(shift)->new_object(@_);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# RANT:
0.000000,0,0.000000,# Cmon, how many times have you written
0.000000,0,0.000000,# the following code while debugging:
0.000000,0,0.000000,#
0.000000,0,0.000000,#  use Data::Dumper;
0.000000,0,0.000000,#  warn Dumper $obj;
0.000000,0,0.000000,#
0.000000,0,0.000000,# It can get seriously annoying, so why
0.000000,0,0.000000,# not just do this ...
0.000000,0,0.000000,sub dump {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,require Data::Dumper;
0.000000,0,0.000000,local $Data::Dumper::Maxdepth = shift || 1;
0.000000,0,0.000000,Data::Dumper::Dumper $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _real_ref_name {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,return blessed($self);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _is_compatible_with {
0.000446,292,0.000002,my $self = shift;
0.000457,292,0.000002,my ($other_name) = @_;
0.000000,0,0.000000,
0.003336,292,0.000011,return $self->isa($other_name);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _can_be_made_compatible_with {
0.000446,284,0.000002,my $self = shift;
0.002487,284,0.000009,return !$self->_is_compatible_with(@_)
0.000000,0,0.000000,&& defined($self->_get_compatible_metaclass(@_));
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _make_compatible_with {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,my ($other_name) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my $new_metaclass = $self->_get_compatible_metaclass($other_name);
0.000000,0,0.000000,
0.000000,0,0.000000,confess "Can't make $self compatible with metaclass $other_name"
0.000000,0,0.000000,unless defined $new_metaclass;
0.000000,0,0.000000,
0.000000,0,0.000000,# can't use rebless_instance here, because it might not be an actual
0.000000,0,0.000000,# subclass in the case of, e.g. moose role reconciliation
0.000000,0,0.000000,$new_metaclass->meta->_force_rebless_instance($self)
0.000000,0,0.000000,if blessed($self) ne $new_metaclass;
0.000000,0,0.000000,
0.000000,0,0.000000,return $self;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _get_compatible_metaclass {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,my ($other_name) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,return $self->_get_compatible_metaclass_by_subclassing($other_name);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _get_compatible_metaclass_by_subclassing {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,my ($other_name) = @_;
0.000000,0,0.000000,my $meta_name = blessed($self) ? $self->_real_ref_name : $self;
0.000000,0,0.000000,
0.000000,0,0.000000,if ($meta_name->isa($other_name)) {
0.000000,0,0.000000,return $meta_name;
0.000000,0,0.000000,}
0.000000,0,0.000000,elsif ($other_name->isa($meta_name)) {
0.000000,0,0.000000,return $other_name;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000003,1,0.000003,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Base class for metaclasses
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
