# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package DateTime::TimeZone::Local;
0.000000,0,0.000000,{
0.000005,2,0.000003,$DateTime::TimeZone::Local::VERSION = '1.60';
0.000000,0,0.000000,}
0.000000,0,0.000000,BEGIN {
0.000008,1,0.000008,$DateTime::TimeZone::Local::AUTHORITY = 'cpan:DROLSKY';
0.000022,1,0.000022,}
0.000000,0,0.000000,
0.000033,2,0.000017,use strict;
0.000035,2,0.000017,use warnings;
0.000000,0,0.000000,
0.000119,2,0.000059,use Class::Load qw( is_class_loaded load_class try_load_class );
0.000036,2,0.000018,use DateTime::TimeZone;
0.000314,2,0.000157,use File::Spec;
0.000000,0,0.000000,
0.000000,0,0.000000,sub TimeZone {
0.000000,0,0.000000,my $class = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,my $subclass = $class->_load_subclass();
0.000000,0,0.000000,
0.000000,0,0.000000,for my $meth ( $subclass->Methods() ) {
0.000000,0,0.000000,my $tz = $subclass->$meth();
0.000000,0,0.000000,
0.000000,0,0.000000,return $tz if $tz;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,die "Cannot determine local time zone\n";
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,{
0.000000,0,0.000000,# Stolen from File::Spec. My theory is that other folks can write
0.000000,0,0.000000,# the non-existent modules if they feel a need, and release them
0.000000,0,0.000000,# to CPAN separately.
0.000010,2,0.000005,my %subclass = (
0.000000,0,0.000000,MSWin32 => 'Win32',
0.000000,0,0.000000,VMS     => 'VMS',
0.000000,0,0.000000,MacOS   => 'Mac',
0.000000,0,0.000000,os2     => 'OS2',
0.000000,0,0.000000,epoc    => 'Epoc',
0.000000,0,0.000000,NetWare => 'Win32',
0.000000,0,0.000000,symbian => 'Win32',
0.000000,0,0.000000,dos     => 'OS2',
0.000000,0,0.000000,cygwin  => 'Unix',
0.000000,0,0.000000,);
0.000000,0,0.000000,
0.000000,0,0.000000,sub _load_subclass {
0.000000,0,0.000000,my $class = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,my $os_name = $subclass{$^O} || $^O;
0.000000,0,0.000000,my $subclass = $class . '::' . $os_name;
0.000000,0,0.000000,
0.000000,0,0.000000,return $subclass if is_class_loaded($subclass);
0.000000,0,0.000000,
0.000000,0,0.000000,return $subclass if try_load_class($subclass);
0.000000,0,0.000000,
0.000000,0,0.000000,$subclass = $class . '::Unix';
0.000000,0,0.000000,
0.000000,0,0.000000,load_class($subclass);
0.000000,0,0.000000,
0.000000,0,0.000000,return $subclass;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub FromEnv {
0.000000,0,0.000000,my $class = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,foreach my $var ( $class->EnvVars() ) {
0.000000,0,0.000000,if ( $class->_IsValidName( $ENV{$var} ) ) {
0.000000,0,0.000000,my $tz;
0.000000,0,0.000000,{
0.000000,0,0.000000,local $@;
0.000000,0,0.000000,local $SIG{__DIE__};
0.000000,0,0.000000,$tz = eval { DateTime::TimeZone->new( name => $ENV{$var} ) };
0.000000,0,0.000000,}
0.000000,0,0.000000,return $tz if $tz;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,return;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _IsValidName {
0.000000,0,0.000000,shift;
0.000000,0,0.000000,
0.000000,0,0.000000,return 0 unless defined $_[0];
0.000000,0,0.000000,return 0 if $_[0] eq 'local';
0.000000,0,0.000000,
0.000000,0,0.000000,return $_[0] =~ m{^[\w/\-\+]+$};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000005,1,0.000005,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Determine the local system's time zone
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
