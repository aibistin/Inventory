# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Moose::Meta::Method::Augmented;
0.000000,0,0.000000,BEGIN {
0.000008,1,0.000008,$Moose::Meta::Method::Augmented::AUTHORITY = 'cpan:STEVAN';
0.000041,1,0.000041,}
0.000000,0,0.000000,{
0.000005,2,0.000002,$Moose::Meta::Method::Augmented::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000042,2,0.000021,use strict;
0.000035,2,0.000017,use warnings;
0.000000,0,0.000000,
0.000196,2,0.000098,use base 'Moose::Meta::Method';
0.000000,0,0.000000,
0.000000,0,0.000000,sub new {
0.000000,0,0.000000,my ( $class, %args ) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,# the package can be overridden by roles
0.000000,0,0.000000,# it is really more like body's compilation stash
0.000000,0,0.000000,# this is where we need to override the definition of super() so that the
0.000000,0,0.000000,# body of the code can call the right overridden version
0.000000,0,0.000000,my $name = $args{name};
0.000000,0,0.000000,my $meta = $args{class};
0.000000,0,0.000000,
0.000000,0,0.000000,my $super = $meta->find_next_method_by_name($name);
0.000000,0,0.000000,
0.000000,0,0.000000,(defined $super)
0.000000,0,0.000000,|| $meta->throw_error("You cannot augment '$name' because it has no super method", data => $name);
0.000000,0,0.000000,
0.000000,0,0.000000,my $_super_package = $super->package_name;
0.000000,0,0.000000,# BUT!,... if this is an overridden method ....
0.000000,0,0.000000,if ($super->isa('Moose::Meta::Method::Overridden')) {
0.000000,0,0.000000,# we need to be sure that we actually
0.000000,0,0.000000,# find the next method, which is not
0.000000,0,0.000000,# an 'override' method, the reason is
0.000000,0,0.000000,# that an 'override' method will not
0.000000,0,0.000000,# be the one calling inner()
0.000000,0,0.000000,my $real_super = $meta->_find_next_method_by_name_which_is_not_overridden($name);
0.000000,0,0.000000,$_super_package = $real_super->package_name;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,my $super_body = $super->body;
0.000000,0,0.000000,
0.000000,0,0.000000,my $method = $args{method};
0.000000,0,0.000000,
0.000000,0,0.000000,my $body = sub {
0.000000,0,0.000000,local $Moose::INNER_ARGS{$_super_package} = [ @_ ];
0.000000,0,0.000000,local $Moose::INNER_BODY{$_super_package} = $method;
0.000000,0,0.000000,$super_body->(@_);
0.000000,0,0.000000,};
0.000000,0,0.000000,
0.000000,0,0.000000,# FIXME store additional attrs
0.000000,0,0.000000,$class->wrap(
0.000000,0,0.000000,$body,
0.000000,0,0.000000,package_name => $meta->name,
0.000000,0,0.000000,name         => $name
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: A Moose Method metaclass for augmented methods
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
