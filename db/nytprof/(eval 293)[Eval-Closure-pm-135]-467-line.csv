# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Eval::Closure::Sandbox_109;
0.000000,0,0.000000,sub {
0.000002,1,0.000002,my $defaults = ${$_[0]};
0.000000,0,0.000000,sub {
0.000000,0,0.000000,my $class = shift;
0.000000,0,0.000000,$class = Scalar::Util::blessed($class) || $class;
0.000000,0,0.000000,return Class::MOP::Class->initialize($class)->new_object(@_)
0.000000,0,0.000000,if $class ne 'Moose::Meta::Role::Attribute';
0.000000,0,0.000000,my $params = @_ == 1 ? $_[0] : {@_};
0.000000,0,0.000000,my $instance = bless {} => $class;
0.000000,0,0.000000,if (exists $params->{'_original_role'}) {
0.000000,0,0.000000,$instance->{"_original_role"} = $params->{'_original_role'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'accessor'}) {
0.000000,0,0.000000,$instance->{"accessor"} = $params->{'accessor'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'associated_role'}) {
0.000000,0,0.000000,$instance->{"associated_role"} = $params->{'associated_role'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'auto_deref'}) {
0.000000,0,0.000000,$instance->{"auto_deref"} = $params->{'auto_deref'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'builder'}) {
0.000000,0,0.000000,$instance->{"builder"} = $params->{'builder'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'clearer'}) {
0.000000,0,0.000000,$instance->{"clearer"} = $params->{'clearer'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'coerce'}) {
0.000000,0,0.000000,$instance->{"coerce"} = $params->{'coerce'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'default'}) {
0.000000,0,0.000000,$instance->{"default"} = $params->{'default'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'definition_context'}) {
0.000000,0,0.000000,$instance->{"definition_context"} = $params->{'definition_context'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'documentation'}) {
0.000000,0,0.000000,$instance->{"documentation"} = $params->{'documentation'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'does'}) {
0.000000,0,0.000000,$instance->{"does"} = $params->{'does'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'handles'}) {
0.000000,0,0.000000,$instance->{"handles"} = $params->{'handles'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'init_arg'}) {
0.000000,0,0.000000,$instance->{"init_arg"} = $params->{'init_arg'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'initializer'}) {
0.000000,0,0.000000,$instance->{"initializer"} = $params->{'initializer'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'insertion_order'}) {
0.000000,0,0.000000,$instance->{"insertion_order"} = $params->{'insertion_order'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'is'}) {
0.000000,0,0.000000,$instance->{"is"} = $params->{'is'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'isa'}) {
0.000000,0,0.000000,$instance->{"isa"} = $params->{'isa'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'lazy'}) {
0.000000,0,0.000000,$instance->{"lazy"} = $params->{'lazy'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'lazy_build'}) {
0.000000,0,0.000000,$instance->{"lazy_build"} = $params->{'lazy_build'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'metaclass'}) {
0.000000,0,0.000000,$instance->{"metaclass"} = $params->{'metaclass'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'name'}) {
0.000000,0,0.000000,$instance->{"name"} = $params->{'name'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'original_options'}) {
0.000000,0,0.000000,$instance->{"original_options"} = $params->{'original_options'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'predicate'}) {
0.000000,0,0.000000,$instance->{"predicate"} = $params->{'predicate'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'reader'}) {
0.000000,0,0.000000,$instance->{"reader"} = $params->{'reader'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'required'}) {
0.000000,0,0.000000,$instance->{"required"} = $params->{'required'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'trigger'}) {
0.000000,0,0.000000,$instance->{"trigger"} = $params->{'trigger'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'type_constraint'}) {
0.000000,0,0.000000,$instance->{"type_constraint"} = $params->{'type_constraint'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'weak_ref'}) {
0.000000,0,0.000000,$instance->{"weak_ref"} = $params->{'weak_ref'};
0.000000,0,0.000000,}
0.000000,0,0.000000,if (exists $params->{'writer'}) {
0.000000,0,0.000000,$instance->{"writer"} = $params->{'writer'};
0.000000,0,0.000000,}
0.000000,0,0.000000,return $instance
0.000000,0,0.000000,}
0.000015,2,0.000008,}
0.000000,0,0.000000,;
