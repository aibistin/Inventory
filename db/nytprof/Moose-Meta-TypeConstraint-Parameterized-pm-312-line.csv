# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Moose::Meta::TypeConstraint::Parameterized;
0.000000,0,0.000000,BEGIN {
0.000009,1,0.000009,$Moose::Meta::TypeConstraint::Parameterized::AUTHORITY = 'cpan:STEVAN';
0.000041,1,0.000041,}
0.000000,0,0.000000,{
0.000005,2,0.000002,$Moose::Meta::TypeConstraint::Parameterized::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000039,2,0.000019,use strict;
0.000033,2,0.000017,use warnings;
0.000040,2,0.000020,use metaclass;
0.000000,0,0.000000,
0.000036,2,0.000018,use Scalar::Util 'blessed';
0.000039,2,0.000019,use Moose::Util::TypeConstraints;
0.000132,2,0.000066,use Moose::Meta::TypeConstraint::Parameterizable;
0.000000,0,0.000000,
0.000414,2,0.000207,use base 'Moose::Meta::TypeConstraint';
0.000000,0,0.000000,
0.000014,1,0.000014,__PACKAGE__->meta->add_attribute('type_parameter' => (
0.000000,0,0.000000,accessor  => 'type_parameter',
0.000000,0,0.000000,predicate => 'has_type_parameter',
0.000000,0,0.000000,Class::MOP::_definition_context(),
0.000000,0,0.000000,));
0.000000,0,0.000000,
0.000013,1,0.000013,__PACKAGE__->meta->add_attribute('parameterized_from' => (
0.000000,0,0.000000,accessor   => 'parameterized_from',
0.000000,0,0.000000,predicate  => 'has_parameterized_from',
0.000000,0,0.000000,Class::MOP::_definition_context(),
0.000000,0,0.000000,));
0.000000,0,0.000000,
0.000000,0,0.000000,sub equals {
0.000000,0,0.000000,my ( $self, $type_or_name ) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,my $other = Moose::Util::TypeConstraints::find_type_constraint($type_or_name);
0.000000,0,0.000000,
0.000000,0,0.000000,return unless $other->isa(__PACKAGE__);
0.000000,0,0.000000,
0.000000,0,0.000000,return (
0.000000,0,0.000000,$self->type_parameter->equals( $other->type_parameter )
0.000000,0,0.000000,and
0.000000,0,0.000000,$self->parent->equals( $other->parent )
0.000000,0,0.000000,);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub compile_type_constraint {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,unless ( $self->has_type_parameter ) {
0.000000,0,0.000000,require Moose;
0.000000,0,0.000000,Moose->throw_error("You cannot create a Higher Order type without a type parameter");
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,my $type_parameter = $self->type_parameter;
0.000000,0,0.000000,
0.000000,0,0.000000,unless ( blessed $type_parameter && $type_parameter->isa('Moose::Meta::TypeConstraint') ) {
0.000000,0,0.000000,require Moose;
0.000000,0,0.000000,Moose->throw_error("The type parameter must be a Moose meta type");
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,foreach my $type (Moose::Util::TypeConstraints::get_all_parameterizable_types()) {
0.000000,0,0.000000,if (my $constraint = $type->generate_constraint_for($self)) {
0.000000,0,0.000000,$self->_set_constraint($constraint);
0.000000,0,0.000000,return $self->SUPER::compile_type_constraint;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,# if we get here, then we couldn't
0.000000,0,0.000000,# find a way to parameterize this type
0.000000,0,0.000000,require Moose;
0.000000,0,0.000000,Moose->throw_error("The " . $self->name . " constraint cannot be used, because "
0.000000,0,0.000000,. $self->parent->name . " doesn't subtype or coerce from a parameterizable type.");
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub can_be_inlined {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,return
0.000000,0,0.000000,$self->has_parameterized_from
0.000000,0,0.000000,&& $self->parameterized_from->has_inline_generator
0.000000,0,0.000000,&& $self->type_parameter->can_be_inlined;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub inline_environment {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,return {
0.000000,0,0.000000,($self->has_parameterized_from
0.000000,0,0.000000,? (%{ $self->parameterized_from->inline_environment })
0.000000,0,0.000000,: ()),
0.000000,0,0.000000,($self->has_type_parameter
0.000000,0,0.000000,? (%{ $self->type_parameter->inline_environment })
0.000000,0,0.000000,: ()),
0.000000,0,0.000000,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _inline_check {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,
0.000000,0,0.000000,return unless $self->can_be_inlined;
0.000000,0,0.000000,
0.000000,0,0.000000,return $self->parameterized_from->generate_inline_for( $self->type_parameter, @_ );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub create_child_type {
0.000000,0,0.000000,my ($self, %opts) = @_;
0.000000,0,0.000000,return Moose::Meta::TypeConstraint::Parameterizable->new(%opts, parent=>$self);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000006,1,0.000006,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Type constraints with a bound parameter (ArrayRef[Int])
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
