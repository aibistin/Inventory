# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,package Class::MOP::Mixin::HasAttributes;
0.000000,0,0.000000,BEGIN {
0.000021,1,0.000021,$Class::MOP::Mixin::HasAttributes::AUTHORITY = 'cpan:STEVAN';
0.000031,1,0.000031,}
0.000000,0,0.000000,{
0.000005,2,0.000002,$Class::MOP::Mixin::HasAttributes::VERSION = '2.1005';
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000034,2,0.000017,use strict;
0.000038,2,0.000019,use warnings;
0.000000,0,0.000000,
0.000035,2,0.000017,use Carp         'confess';
0.000038,2,0.000019,use Scalar::Util 'blessed';
0.000000,0,0.000000,
0.000380,2,0.000190,use base 'Class::MOP::Mixin';
0.000000,0,0.000000,
0.000000,0,0.000000,sub add_attribute {
0.000202,131,0.000002,my $self = shift;
0.000000,0,0.000000,
0.001738,131,0.000013,my $attribute
0.000000,0,0.000000,= blessed( $_[0] ) ? $_[0] : $self->attribute_metaclass->new(@_);
0.000000,0,0.000000,
0.000998,131,0.000008,( $attribute->isa('Class::MOP::Mixin::AttributeCore') )
0.000000,0,0.000000,|| confess
0.000000,0,0.000000,"Your attribute must be an instance of Class::MOP::Mixin::AttributeCore (or a subclass)";
0.000000,0,0.000000,
0.000652,131,0.000005,$self->_attach_attribute($attribute);
0.000000,0,0.000000,
0.000952,131,0.000007,my $attr_name = $attribute->name;
0.000000,0,0.000000,
0.000705,131,0.000005,$self->remove_attribute($attr_name)
0.000000,0,0.000000,if $self->has_attribute($attr_name);
0.000000,0,0.000000,
0.000893,131,0.000007,my $order = ( scalar keys %{ $self->_attribute_map } );
0.000678,131,0.000005,$attribute->_set_insertion_order($order);
0.000000,0,0.000000,
0.000914,131,0.000007,$self->_attribute_map->{$attr_name} = $attribute;
0.000000,0,0.000000,
0.000000,0,0.000000,# This method is called to allow for installing accessors. Ideally, we'd
0.000000,0,0.000000,# use method overriding, but then the subclass would be responsible for
0.000000,0,0.000000,# making the attribute, which would end up with lots of code
0.000000,0,0.000000,# duplication. Even more ideally, we'd use augment/inner, but this is
0.000000,0,0.000000,# Class::MOP!
0.001742,131,0.000013,$self->_post_add_attribute($attribute)
0.000000,0,0.000000,if $self->can('_post_add_attribute');
0.000000,0,0.000000,
0.000894,131,0.000007,return $attribute;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub has_attribute {
0.000304,185,0.000002,my ( $self, $attribute_name ) = @_;
0.000000,0,0.000000,
0.000269,185,0.000001,( defined $attribute_name )
0.000000,0,0.000000,|| confess "You must define an attribute name";
0.000000,0,0.000000,
0.010076,185,0.000054,exists $self->_attribute_map->{$attribute_name};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub get_attribute {
0.000224,130,0.000002,my ( $self, $attribute_name ) = @_;
0.000000,0,0.000000,
0.000189,130,0.000001,( defined $attribute_name )
0.000000,0,0.000000,|| confess "You must define an attribute name";
0.000000,0,0.000000,
0.001331,130,0.000010,return $self->_attribute_map->{$attribute_name};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub remove_attribute {
0.000000,0,0.000000,my ( $self, $attribute_name ) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,( defined $attribute_name )
0.000000,0,0.000000,|| confess "You must define an attribute name";
0.000000,0,0.000000,
0.000000,0,0.000000,my $removed_attribute = $self->_attribute_map->{$attribute_name};
0.000000,0,0.000000,return unless defined $removed_attribute;
0.000000,0,0.000000,
0.000000,0,0.000000,delete $self->_attribute_map->{$attribute_name};
0.000000,0,0.000000,
0.000000,0,0.000000,return $removed_attribute;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub get_attribute_list {
0.000049,33,0.000001,my $self = shift;
0.000392,33,0.000012,keys %{ $self->_attribute_map };
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,sub _restore_metaattributes_from {
0.000000,0,0.000000,my $self = shift;
0.000000,0,0.000000,my ($old_meta) = @_;
0.000000,0,0.000000,
0.000000,0,0.000000,for my $attr (sort { $a->insertion_order <=> $b->insertion_order }
0.000000,0,0.000000,map { $old_meta->get_attribute($_) }
0.000000,0,0.000000,$old_meta->get_attribute_list) {
0.000000,0,0.000000,$attr->_make_compatible_with($self->attribute_metaclass);
0.000000,0,0.000000,$self->add_attribute($attr);
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000004,1,0.000004,1;
0.000000,0,0.000000,
0.000000,0,0.000000,# ABSTRACT: Methods for metaclasses which have attributes
0.000000,0,0.000000,
0.000000,0,0.000000,__END__
