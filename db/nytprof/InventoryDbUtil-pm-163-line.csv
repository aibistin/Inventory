# Profile data generated by Devel::NYTProf::Reader
# Version: v5.06
# More information at http://search.cpan.org/dist/Devel-NYTProf/
# Format: time,calls,time/call,code
0.000000,0,0.000000,# ABSTRACT: Handy Module Ineractions with the Inventory SQLite Database
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Connects to SQLite Database and returns a SQLite Database handle
0.000000,0,0.000000,#  Returns many Insert SQL Statement Handles for Inserting to Inventory DB
0.000000,0,0.000000,#  Generic Insert, Execute and Commit Statement
0.000000,0,0.000000,#  Safe Disconnect From Database
0.000000,0,0.000000,#  All functions are exported
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,package InventoryDbUtil;
0.000036,2,0.000018,use Modern::Perl;
0.000043,2,0.000022,use autodie;
0.000037,2,0.000018,use DBI;
0.000036,2,0.000018,use Carp 'croak';
0.000034,2,0.000017,use Data::Dump qw/dump/;
0.000163,2,0.000082,use utf8::all;
0.000136,2,0.000068,use Exporter::NoWork;
0.000037,2,0.000018,use Try::Tiny;
0.000191,2,0.000095,use Crypt::PBKDF2;
0.000256,2,0.000128,use String::Random;
0.000000,0,0.000000,#------ GLOBALS
0.000002,1,0.000002,my $YES = my $TRUE  = 1;
0.000002,1,0.000002,my $NO  = my $FALSE = 0;
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Connect to a SQLite Database
0.000000,0,0.000000,#  Set foreigh keys on.
0.000000,0,0.000000,#  Return a DBH
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,sub db_handle {
0.000002,1,0.000002,my $db_file = shift
0.000000,0,0.000000,or croak "db_handle() requires a database name";
0.000002,1,0.000002,my $attr = shift;
0.000002,1,0.000002,$attr ||= {
0.000000,0,0.000000,RaiseError                 => 1,
0.000000,0,0.000000,PrintError                 => 0,
0.000000,0,0.000000,AutoCommit                 => 1,
0.000000,0,0.000000,FetchHashKeyName           => 'Name_lc',
0.000000,0,0.000000,sqlite_see_if_its_a_number => 1,
0.000000,0,0.000000,sqlite_unicode             => 1,
0.000000,0,0.000000,};
0.001905,2,0.000953,no warnings 'once';
0.000010,1,0.000010,my $dbh = DBI->connect(
0.000000,0,0.000000,"dbi:SQLite:dbname=$db_file",
0.000000,0,0.000000,"",    # no username required
0.000000,0,0.000000,"",    # no password required
0.000000,0,0.000000,$attr,
0.000000,0,0.000000,) or die $DBH::errstr;
0.000000,0,0.000000,
0.000018,1,0.000018,$dbh->do("PRAGMA foreign_keys = ON");
0.000000,0,0.000000,
0.000008,1,0.000008,return $dbh;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Commmit and Safe Disconnect
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,sub commit_and_disconnect {
0.000002,1,0.000002,my $dbh = shift;
0.000002,1,0.000002,croak 'Cannot disconnect, as no DBH given!' unless $dbh;
0.000002,1,0.000002,my $ok;
0.000025,1,0.000025,if ( $dbh->ping ) {
0.000010,1,0.000010,$dbh->commit;
0.000060,1,0.000060,$dbh->disconnect;
0.000002,1,0.000002,$ok = $TRUE;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,croak 'Cannot disconnect, as there is no connection!';
0.000000,0,0.000000,}
0.000046,1,0.000046,say 'Successful Disconnect and commit.' if $ok;
0.000007,1,0.000007,return $ok;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#      GET STATEMENT HANDLES FOR INSERTING
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#
0.000000,0,0.000000,# Get Statement Handle To Insert to Address DB
0.000000,0,0.000000,# Pass the DBH
0.000000,0,0.000000,# Returns a $sth
0.000000,0,0.000000,#
0.000000,0,0.000000,sub get_insert_to_address_sth {
0.000000,0,0.000000,my $dbh = shift;
0.000000,0,0.000000,croak 'You must pass a DBH to create the Statement!' unless $dbh;
0.000000,0,0.000000,
0.000000,0,0.000000,my $sql = <<"POPULATE_SQL";
0.000000,0,0.000000,INSERT OR IGNORE
0.000000,0,0.000000,INTO address(
0.000000,0,0.000000,id, 
0.000000,0,0.000000,address_1, 
0.000000,0,0.000000,address_2,
0.000000,0,0.000000,city, 
0.000000,0,0.000000,state, 
0.000000,0,0.000000,zip, 
0.000000,0,0.000000,country, 
0.000000,0,0.000000,updated 
0.000000,0,0.000000,)
0.000000,0,0.000000,VALUES (?, ?, ?, ?, ?, ?, ?, ?)
0.000000,0,0.000000,POPULATE_SQL
0.000000,0,0.000000,
0.000000,0,0.000000,return $dbh->prepare($sql);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#
0.000000,0,0.000000,# Get Statement Handle To Insert to Location DB
0.000000,0,0.000000,#
0.000000,0,0.000000,sub get_insert_to_location_sth {
0.000000,0,0.000000,my $dbh = shift;
0.000000,0,0.000000,croak 'You must pass a DBH to create the Statement!' unless $dbh;
0.000000,0,0.000000,
0.000000,0,0.000000,my $sql = <<"POPULATE_SQL";
0.000000,0,0.000000,INSERT OR IGNORE
0.000000,0,0.000000,INTO location(
0.000000,0,0.000000,id, 
0.000000,0,0.000000,name, 
0.000000,0,0.000000,address, 
0.000000,0,0.000000,description,
0.000000,0,0.000000,updated 
0.000000,0,0.000000,)
0.000000,0,0.000000,VALUES (?, ?, ?, ?, ?)
0.000000,0,0.000000,POPULATE_SQL
0.000000,0,0.000000,
0.000000,0,0.000000,return $dbh->prepare($sql);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#
0.000000,0,0.000000,# Get Statement Handle To Insert to item_type DB
0.000000,0,0.000000,#
0.000000,0,0.000000,sub get_insert_to_item_type_sth {
0.000000,0,0.000000,my $dbh = shift;
0.000000,0,0.000000,croak 'You must pass a DBH to create the Statement!' unless $dbh;
0.000000,0,0.000000,
0.000000,0,0.000000,my $sql = <<"POPULATE_SQL";
0.000000,0,0.000000,INSERT OR IGNORE
0.000000,0,0.000000,INTO item_type(
0.000000,0,0.000000,id, 
0.000000,0,0.000000,name,
0.000000,0,0.000000,updated 
0.000000,0,0.000000,)
0.000000,0,0.000000,VALUES (?, ?, ?)
0.000000,0,0.000000,POPULATE_SQL
0.000000,0,0.000000,
0.000000,0,0.000000,return $dbh->prepare($sql);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#
0.000000,0,0.000000,# Get Statement Handle To Insert to desc_type DB
0.000000,0,0.000000,#
0.000000,0,0.000000,sub get_insert_to_desc_type_sth {
0.000000,0,0.000000,
0.000000,0,0.000000,my $dbh = shift;
0.000000,0,0.000000,croak 'You must pass a DBH to create the Statement!' unless $dbh;
0.000000,0,0.000000,my $sql = <<"POPULATE_SQL";
0.000000,0,0.000000,INSERT OR IGNORE
0.000000,0,0.000000,INTO desc_type(
0.000000,0,0.000000,id, 
0.000000,0,0.000000,name,
0.000000,0,0.000000,updated 
0.000000,0,0.000000,)
0.000000,0,0.000000,VALUES (?, ?, ?)
0.000000,0,0.000000,POPULATE_SQL
0.000000,0,0.000000,return $dbh->prepare($sql);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#
0.000000,0,0.000000,# Get Statement Handle To Insert to structure_type DB
0.000000,0,0.000000,#
0.000000,0,0.000000,sub get_insert_to_structure_type_sth {
0.000000,0,0.000000,my $dbh = shift;
0.000000,0,0.000000,croak 'You must pass a DBH to create the Statement!' unless $dbh;
0.000000,0,0.000000,
0.000000,0,0.000000,my $sql = <<"POPULATE_SQL";
0.000000,0,0.000000,INSERT OR IGNORE
0.000000,0,0.000000,INTO structure_type(
0.000000,0,0.000000,id, 
0.000000,0,0.000000,name,
0.000000,0,0.000000,updated 
0.000000,0,0.000000,)
0.000000,0,0.000000,VALUES (?, ?, ?)
0.000000,0,0.000000,POPULATE_SQL
0.000000,0,0.000000,
0.000000,0,0.000000,return $dbh->prepare($sql);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#
0.000000,0,0.000000,# Get Statement Handle To Insert to color_type DB
0.000000,0,0.000000,#
0.000000,0,0.000000,sub get_insert_to_color_type_sth {
0.000000,0,0.000000,my $dbh = shift;
0.000000,0,0.000000,croak 'You must pass a DBH to create the Statement!' unless $dbh;
0.000000,0,0.000000,
0.000000,0,0.000000,my $sql = <<"POPULATE_SQL";
0.000000,0,0.000000,INSERT OR IGNORE
0.000000,0,0.000000,INTO color_type(
0.000000,0,0.000000,id, 
0.000000,0,0.000000,name,
0.000000,0,0.000000,updated 
0.000000,0,0.000000,)
0.000000,0,0.000000,VALUES (?, ?, ?)
0.000000,0,0.000000,POPULATE_SQL
0.000000,0,0.000000,
0.000000,0,0.000000,return $dbh->prepare($sql);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#
0.000000,0,0.000000,# Get Statement Handle To Insert to item DB
0.000000,0,0.000000,#
0.000000,0,0.000000,sub get_insert_to_item_sth {
0.000000,0,0.000000,my $dbh = shift;
0.000000,0,0.000000,croak 'You must pass a DBH to create the Statement!' unless $dbh;
0.000000,0,0.000000,
0.000000,0,0.000000,my $sql = <<"POPULATE_SQL";
0.000000,0,0.000000,INSERT OR IGNORE
0.000000,0,0.000000,INTO item(
0.000000,0,0.000000,id, 
0.000000,0,0.000000,type, 
0.000000,0,0.000000,name, 
0.000000,0,0.000000,location, 
0.000000,0,0.000000,length,
0.000000,0,0.000000,width, 
0.000000,0,0.000000,height, 
0.000000,0,0.000000,diameter, 
0.000000,0,0.000000,weight, 
0.000000,0,0.000000,external_ref, 
0.000000,0,0.000000,comments, 
0.000000,0,0.000000,updated 
0.000000,0,0.000000,)
0.000000,0,0.000000,VALUES (?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
0.000000,0,0.000000,POPULATE_SQL
0.000000,0,0.000000,
0.000000,0,0.000000,return $dbh->prepare($sql);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#
0.000000,0,0.000000,# Get Statement Handle To Insert to item_desc DB
0.000000,0,0.000000,#
0.000000,0,0.000000,sub get_insert_to_item_desc_sth {
0.000000,0,0.000000,my $dbh = shift;
0.000000,0,0.000000,croak 'You must pass a DBH to create the Statement!' unless $dbh;
0.000000,0,0.000000,
0.000000,0,0.000000,my $sql = <<"POPULATE_SQL";
0.000000,0,0.000000,INSERT OR IGNORE
0.000000,0,0.000000,INTO item_desc(
0.000000,0,0.000000,item,
0.000000,0,0.000000,desc 
0.000000,0,0.000000,)
0.000000,0,0.000000,VALUES (?, ?)
0.000000,0,0.000000,POPULATE_SQL
0.000000,0,0.000000,
0.000000,0,0.000000,return $dbh->prepare($sql);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#
0.000000,0,0.000000,# Get Statement Handle To Insert to item_structure DB
0.000000,0,0.000000,#
0.000000,0,0.000000,sub get_insert_to_item_structure_sth {
0.000000,0,0.000000,my $dbh = shift;
0.000000,0,0.000000,croak 'You must pass a DBH to create the Statement!' unless $dbh;
0.000000,0,0.000000,
0.000000,0,0.000000,my $sql = <<"POPULATE_SQL";
0.000000,0,0.000000,INSERT OR IGNORE
0.000000,0,0.000000,INTO item_structure(
0.000000,0,0.000000,item,
0.000000,0,0.000000,structure 
0.000000,0,0.000000,)
0.000000,0,0.000000,VALUES (?, ?)
0.000000,0,0.000000,POPULATE_SQL
0.000000,0,0.000000,
0.000000,0,0.000000,return $dbh->prepare($sql);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#
0.000000,0,0.000000,# Get Statement Handle To Insert to item_color DB
0.000000,0,0.000000,#
0.000000,0,0.000000,sub get_insert_to_item_color_sth {
0.000000,0,0.000000,
0.000000,0,0.000000,my $dbh = shift;
0.000000,0,0.000000,croak 'You must pass a DBH to create the Statement!' unless $dbh;
0.000000,0,0.000000,my $sql = <<"POPULATE_SQL";
0.000000,0,0.000000,INSERT OR IGNORE
0.000000,0,0.000000,INTO item_color(
0.000000,0,0.000000,item,
0.000000,0,0.000000,color 
0.000000,0,0.000000,)
0.000000,0,0.000000,VALUES (?, ?)
0.000000,0,0.000000,POPULATE_SQL
0.000000,0,0.000000,
0.000000,0,0.000000,return $dbh->prepare($sql);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  User DB Tables
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#
0.000000,0,0.000000,# Get Statement Handle To Insert to User DB
0.000000,0,0.000000,# Pass the DBH
0.000000,0,0.000000,# Returns a $sth
0.000000,0,0.000000,#get_insert_to_address_sth
0.000000,0,0.000000,sub get_insert_to_user_sth {
0.000000,0,0.000000,my $dbh = shift;
0.000000,0,0.000000,croak 'You must pass a DBH to create the Statement!' unless $dbh;
0.000000,0,0.000000,
0.000000,0,0.000000,my $sql = <<"POPULATE_SQL";
0.000000,0,0.000000,INSERT OR IGNORE
0.000000,0,0.000000,INTO user(
0.000000,0,0.000000,id, 
0.000000,0,0.000000,name, 
0.000000,0,0.000000,password,
0.000000,0,0.000000,employee, 
0.000000,0,0.000000,customer, 
0.000000,0,0.000000,status, 
0.000000,0,0.000000,comments, 
0.000000,0,0.000000,created, 
0.000000,0,0.000000,updated 
0.000000,0,0.000000,)
0.000000,0,0.000000,VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
0.000000,0,0.000000,POPULATE_SQL
0.000000,0,0.000000,
0.000000,0,0.000000,return $dbh->prepare($sql);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#
0.000000,0,0.000000,sub get_insert_to_role_sth {
0.000000,0,0.000000,my $dbh = shift;
0.000000,0,0.000000,croak 'You must pass a DBH to create the Statement!' unless $dbh;
0.000000,0,0.000000,
0.000000,0,0.000000,my $sql = <<"POPULATE_SQL";
0.000000,0,0.000000,INSERT OR IGNORE
0.000000,0,0.000000,INTO role(
0.000000,0,0.000000,id, 
0.000000,0,0.000000,role 
0.000000,0,0.000000,)
0.000000,0,0.000000,VALUES (?, ?)
0.000000,0,0.000000,POPULATE_SQL
0.000000,0,0.000000,
0.000000,0,0.000000,return $dbh->prepare($sql);
0.000000,0,0.000000,}
0.000000,0,0.000000,#
0.000000,0,0.000000,sub get_insert_to_user_role_sth {
0.000000,0,0.000000,my $dbh = shift;
0.000000,0,0.000000,croak 'You must pass a DBH to create the Statement!' unless $dbh;
0.000000,0,0.000000,
0.000000,0,0.000000,my $sql = <<"POPULATE_SQL";
0.000000,0,0.000000,INSERT OR IGNORE
0.000000,0,0.000000,INTO user_role(
0.000000,0,0.000000,user, 
0.000000,0,0.000000,role 
0.000000,0,0.000000,)
0.000000,0,0.000000,VALUES (?, ?)
0.000000,0,0.000000,POPULATE_SQL
0.000000,0,0.000000,
0.000000,0,0.000000,return $dbh->prepare($sql);
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Select Statements
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Insert Statements
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#
0.000000,0,0.000000,# Insert to Database and do an immediate Commit
0.000000,0,0.000000,#
0.000000,0,0.000000,sub insert_commit_to_database {
0.000000,0,0.000000,my $sth = shift;
0.000000,0,0.000000,croak 'Cannot Insert as no Statement handle was provided!' unless $sth;
0.000000,0,0.000000,my $params = shift;
0.000000,0,0.000000,croak 'There is nothing to insert to the DB!' unless $params;
0.000000,0,0.000000,my $dbh = shift;
0.000000,0,0.000000,croak 'Cannot Commit as no DBH was provided!' unless $dbh;
0.000000,0,0.000000,
0.000000,0,0.000000,say 'Params at insert_commit_to_database are : ' . dump $params;
0.000000,0,0.000000,$sth->execute(@$params);
0.000000,0,0.000000,
0.000000,0,0.000000,$dbh->commit;
0.000000,0,0.000000,}
0.000000,0,0.000000,#
0.000000,0,0.000000,# Insert to Database without a commit
0.000000,0,0.000000,#
0.000000,0,0.000000,sub insert_row_to_table {
0.000000,0,0.000000,my $sth = shift;
0.000000,0,0.000000,croak 'Cannot Insert as no Statement handle was provided!' unless $sth;
0.000000,0,0.000000,my $params = shift;
0.000000,0,0.000000,croak 'There is nothing to insert to the DB!' unless $params;
0.000000,0,0.000000,
0.000000,0,0.000000,say 'Params at insert_row_to_table are : ' . dump $params;
0.000000,0,0.000000,$sth->execute(@$params)
0.000000,0,0.000000,or confess( 'Failed to insert ' . dump($params) . "\n Because of $!" );
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Execute the Select statement
0.000000,0,0.000000,#  Returns the Statement handle or undef if it fails.
0.000000,0,0.000000,#  Can pass placeholder params if necessary.
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,sub execute_select {
0.000000,0,0.000000,my $sth = shift or croak 'execute_select() requires a SQL statment handle.';
0.000000,0,0.000000,my $bind_params_ref = shift;
0.000000,0,0.000000,croak 'Bind params must be an ArrayRef!'
0.000000,0,0.000000,unless ( ref $bind_params_ref eq 'ARRAY' );
0.000000,0,0.000000,
0.000000,0,0.000000,return $sth->execute(@$bind_params_ref) or die $DBH::errstr;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Fetchall
0.000000,0,0.000000,#  Returns an ArrayRef of ArrayRef's of data
0.000000,0,0.000000,#  Can pass slice or parms.
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,sub fetchall_arrayref {
0.000000,0,0.000000,my $sth = shift
0.000000,0,0.000000,or croak 'fetchall_arrayref() requires a SQL statment handle.';
0.000000,0,0.000000,my $slice_or_params = shift;
0.000000,0,0.000000,if ($slice_or_params) {
0.000000,0,0.000000,return $sth->fetchall_arrayref($slice_or_params) or die $DBH::errstr;
0.000000,0,0.000000,}
0.000000,0,0.000000,else {
0.000000,0,0.000000,return $sth->fetchall_arrayref() or die $DBH::errstr;
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  FetchRow
0.000000,0,0.000000,#  Returns one row of data.
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,sub fetchrow_arrayref {
0.000000,0,0.000000,my $sth = shift
0.000000,0,0.000000,or croak 'fetchrow_arrayref() requires an SQL statment handle.';
0.000000,0,0.000000,return $sth->fetchrow_arrayref() or die $DBH::errstr;
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#                   DELETING AND TRUNCATING
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Truncate Tables
0.000000,0,0.000000,#  Truncates a list of tables
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,sub truncate_tables {
0.000000,0,0.000000,my $tables = shift;
0.000000,0,0.000000,croak 'truncate_tables() needs some tables to truncate!' unless $tables;
0.000000,0,0.000000,croak 'truncate_tables() needs an ArrayRef!'
0.000000,0,0.000000,unless ( ref($tables) eq 'ARRAY' );
0.000000,0,0.000000,my $dbh = shift;
0.000000,0,0.000000,croak 'truncate_tables() needs a $dbh!' unless $dbh;
0.000000,0,0.000000,
0.000000,0,0.000000,for my $tbl (@$tables) {
0.000000,0,0.000000,say 'About to truncate table: ' . $tbl;
0.000000,0,0.000000,truncate_table( $tbl, $dbh );
0.000000,0,0.000000,}
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,#  Truncate Table ( SQLite3 style)
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000000,0,0.000000,sub truncate_table {
0.000000,0,0.000000,my $table = shift;
0.000000,0,0.000000,croak 'truncate_table() needs a table to truncate!' unless $table;
0.000000,0,0.000000,my $dbh = shift;
0.000000,0,0.000000,croak 'truncate_table() requires a DBH!' unless $dbh;
0.000000,0,0.000000,my $truncate_table_sql = <<"TRUNCTE_TBL";
0.000000,0,0.000000,DELETE FROM $table;
0.000000,0,0.000000,TRUNCTE_TBL
0.000000,0,0.000000,
0.000000,0,0.000000,try {
0.000000,0,0.000000,$dbh->do($truncate_table_sql);
0.000000,0,0.000000,}
0.000000,0,0.000000,catch {
0.000000,0,0.000000,say "Unable to truncate table: $table because " . $_;
0.000000,0,0.000000,};
0.000000,0,0.000000,}
0.000000,0,0.000000,
0.000000,0,0.000000,#-------------------------------------------------------------------------------
0.000027,1,0.000027,1;
